var searchIndex = {};
searchIndex['glium'] = {"items":[[0,"","glium","Easy-to-use high-level OpenGL3+ wrapper."],[1,"Program","","A combinaison of shaders linked together."],[1,"DrawParameters","","Represents the parameters to use when drawing."],[11,"depth_function","","The function that the GPU will use to determine whether to write over an existing pixel\non the target.",0],[11,"depth_range","","The range of Z coordinates in surface coordinates.",0],[11,"blending_function","","The function that the GPU will use to merge the existing pixel with the pixel that is\nbeing written.",0],[11,"line_width","","Width in pixels of the lines to draw when drawing lines.",0],[11,"backface_culling","","Whether or not the GPU should filter out some faces.",0],[11,"polygon_mode","","Sets how to render polygons. The default value is `Fill`.",0],[11,"multisampling","","Whether multisample antialiasing (MSAA) should be used. Default value is `true`.",0],[11,"dithering","","Whether dithering is activated. Default value is `true`.",0],[11,"viewport","","Specifies the viewport to use when drawing.",0],[11,"scissor","","If specified, only pixels in this rect will be displayed. Default is `None`.",0],[1,"Rect","","Area of a surface in pixels."],[11,"left","","Number of pixels between the left border of the surface and the left border of\nthe rectangle.",1],[11,"bottom","","Number of pixels between the bottom border of the surface and the bottom border\nof the rectangle.",1],[11,"width","","Width of the area in pixels.",1],[11,"height","","Height of the area in pixels.",1],[1,"Frame","","Implementation of `Surface` targetting the default framebuffer."],[1,"Display","","The main object of this library. Controls the whole display."],[2,"ProgramCreationError","","Error that can be triggered when creating a `Program`."],[12,"CompilationError","","Error while compiling one of the shaders.",2],[12,"LinkingError","","Error while linking the program.",2],[12,"ShaderTypeNotSupported","","One of the request shader type is not supported by the backend.",2],[2,"BlendingFunction","","Function that the GPU will use for blending."],[12,"AlwaysReplace","","Always replace the destination pixel by the source.",3],[12,"LerpBySourceAlpha","","Linear interpolation of the source pixel by the source pixel's alpha.",3],[2,"BackfaceCullingMode","","Describes how triangles should be filtered before the fragment processing. Backface culling\nis purely an optimization. If you don't know what this does, just use `CullingDisabled`."],[12,"CullingDisabled","","All triangles are always drawn.",4],[12,"CullCounterClockWise","","Triangles whose vertices are counterclockwise won't be drawn.",4],[12,"CullClockWise","","Triangles whose vertices are clockwise won't be drawn.",4],[2,"DepthFunction","","The function that the GPU will use to determine whether to write over an existing pixel\non the target."],[12,"Ignore","","Never replace the target pixel.",5],[12,"Overwrite","","Always replace the target pixel.",5],[12,"IfEqual","","Replace if the z-value of the source is equal to the destination.",5],[12,"IfNotEqual","","Replace if the z-value of the source is different than the destination.",5],[12,"IfMore","","Replace if the z-value of the source is more than the destination.",5],[12,"IfMoreOrEqual","","Replace if the z-value of the source is more or equal to the destination.",5],[12,"IfLess","","Replace if the z-value of the source is less than the destination.",5],[12,"IfLessOrEqual","","Replace if the z-value of the source is less or equal to the destination.",5],[2,"PolygonMode","","Defines how the device should render polygons."],[12,"Point","","Only draw a single point at each vertex.",6],[12,"Line","","Only draw a line in the boundaries of each polygon.",6],[12,"Fill","","Fill the content of the polygon. This is the default mode.",6],[2,"GliumCreationError","","Error that can happen while creating a glium display."],[12,"GlutinCreationError","","An error has happened while creating the glutin window or headless renderer.",7],[12,"IncompatibleOpenGl","","The OpenGL implementation is too old.",7],[0,"debug","",""],[1,"TimestampQuery","glium::debug","Allows you to obtain the timestamp inside the OpenGL commands queue."],[2,"Severity","","Severity of a debug message."],[12,"Notification","","Anything that isn't an error or performance issue.",8],[12,"Low","","Redundant state change performance warning, or unimportant undefined behavior.",8],[12,"Medium","","Major performance warnings, shader compilation/linking warnings,\nor the use of deprecated functionality.",8],[12,"High","","All OpenGL Errors, shader compilation/linking errors,\nor highly-dangerous undefined behavior.",8],[2,"Source","","Source of a debug message."],[12,"Api","","Calls to the OpenGL API.",9],[12,"WindowSystem","","Calls to a window-system API.",9],[12,"ShaderCompiler","","A compiler for a shading language.",9],[12,"ThirdParty","","An application associated with Openctxt.gl.",9],[12,"Application","","Explicitely generated by Glium or the application.",9],[12,"OtherSource","","",9],[2,"MessageType","","Type of a debug message."],[12,"Error","","An error, typically from the API",10],[12,"DeprecatedBehavior","","Some behavior marked deprecated has been used",10],[12,"UndefinedBehavior","","Something has invoked undefined behavior",10],[12,"Portability","","Some functionality the user relies upon is not portable",10],[12,"Performance","","Code has triggered possible performance issues",10],[12,"Marker","","Command stream annotation",10],[12,"PushGroup","","",10],[12,"PopGroup","","",10],[12,"Other","","",10],[10,"eq","","",8],[10,"ne","","",8],[10,"from_i64","","",8],[10,"from_u64","","",8],[10,"fmt","","",8],[10,"clone","","",8],[10,"from_i64","","",9],[10,"from_u64","","",9],[10,"fmt","","",9],[10,"clone","","",9],[10,"from_i64","","",10],[10,"from_u64","","",10],[10,"fmt","","",10],[10,"clone","","",10],[10,"new","","Creates a new `TimestampQuery`. Returns `None` if the backend doesn't support it.",11],[10,"is_ready","","Queries to counter to see if the timestamp is already available.",11],[10,"get","","Returns the value of the timestamp. Blocks until it is available.",11],[0,"framebuffer","glium","Framebuffers allows you to customize the color, depth and stencil buffers you will draw on."],[1,"SimpleFrameBuffer","glium::framebuffer","A framebuffer which has only one color attachment."],[1,"MultiOutputFrameBuffer","","This struct is useless for the moment."],[2,"ColorAttachment","","Describes an attachment for a color buffer."],[12,"Texture2d","","A texture.",12],[12,"RenderBuffer","","A render buffer.",12],[2,"DepthAttachment","","Describes an attachment for a depth buffer."],[12,"Texture2d","","A texture.",13],[12,"RenderBuffer","","A render buffer.",13],[2,"StencilAttachment","","Describes an attachment for a stencil buffer."],[12,"Texture2d","","A texture.",14],[12,"RenderBuffer","","A render buffer.",14],[2,"DepthStencilAttachment","","Describes an attachment for a depth and stencil buffer."],[12,"Texture2d","","A texture.",15],[12,"RenderBuffer","","A render buffer.",15],[6,"ToColorAttachment","","Trait for objects that can be used as color attachments."],[9,"to_color_attachment","","Builds the `ColorAttachment`.",16],[6,"ToDepthAttachment","","Trait for objects that can be used as depth attachments."],[9,"to_depth_attachment","","Builds the `DepthAttachment`.",17],[6,"ToStencilAttachment","","Trait for objects that can be used as stencil attachments."],[9,"to_stencil_attachment","","Builds the `StencilAttachment`.",18],[6,"ToDepthStencilAttachment","","Trait for objects that can be used as depth and stencil attachments."],[9,"to_depth_stencil_attachment","","Builds the `DepthStencilAttachment`.",19],[10,"new","","Creates a `SimpleFrameBuffer` with a single color attachment and no depth\nnor stencil buffer.",20],[10,"with_depth_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a depth\nbuffer, but no stencil buffer.",20],[10,"with_depth_and_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment, a depth\nbuffer, and a stencil buffer.",20],[10,"with_stencil_buffer","","Creates a `SimpleFrameBuffer` with a single color attachment and a stencil\nbuffer, but no buffer buffer.",20],[10,"clear_color","","",20],[10,"clear_depth","","",20],[10,"clear_stencil","","",20],[10,"get_dimensions","","",20],[10,"get_depth_buffer_bits","","",20],[10,"get_stencil_buffer_bits","","",20],[10,"draw","","",20],[10,"get_blit_helper","","",20],[10,"new","","Creates a new `MultiOutputFramebuffer`.",21],[10,"clone","","",12],[10,"clone","","",13],[10,"clone","","",14],[10,"clone","","",15],[0,"index_buffer","glium","In order to draw, you need to provide a source of indices which is used to link the vertices\ntogether into *primitives*."],[1,"IndexBuffer","glium::index_buffer","A list of indices loaded in the graphics card's memory."],[1,"PointsList","","A list of points stored in RAM."],[1,"LinesList","","A list of lines stored in RAM."],[1,"LinesListAdjacency","","A list of lines with adjacency infos stored in RAM."],[1,"LineStrip","","A list of lines connected together stored in RAM."],[1,"LineStripAdjacency","","A list of lines connected together with adjacency infos stored in RAM."],[1,"TrianglesList","","A list of triangles stored in RAM."],[1,"TrianglesListAdjacency","","A list of triangles with adjacency infos stored in RAM."],[1,"TriangleStrip","","A list of triangles connected together stored in RAM."],[1,"TriangleStripAdjacency","","A list of triangles connected together with adjacency infos stored in RAM."],[1,"TriangleFan","","A list of triangles stored in RAM."],[2,"IndicesSource","","Describes a source of indices used for drawing."],[12,"IndexBuffer","","A buffer uploaded in video memory.",22],[11,"buffer","glium::index_buffer::IndicesSource","The buffer.",22],[11,"offset","","Offset of the first element of the buffer to use.",22],[11,"length","","Number of elements in the buffer to use.",22],[12,"Buffer","glium::index_buffer","A buffer in RAM.",22],[11,"pointer","glium::index_buffer::IndicesSource","Slice of data to use.",22],[11,"primitives","","Type of primitives contained in the buffer.",22],[11,"offset","","Offset of the first element of the buffer to use.",22],[11,"length","","Number of elements in the buffer to use.",22],[2,"PrimitiveType","glium::index_buffer","List of available primitives."],[12,"Points","","",23],[12,"LinesList","","",23],[12,"LinesListAdjacency","","",23],[12,"LineStrip","","",23],[12,"LineStripAdjacency","","",23],[12,"TrianglesList","","",23],[12,"TrianglesListAdjacency","","",23],[12,"TriangleStrip","","",23],[12,"TriangleStripAdjacency","","",23],[12,"TriangleFan","","",23],[2,"IndexType","","Types of indices in an indices source."],[12,"U8","","u8",24],[12,"U16","","u16",24],[12,"U32","","u32",24],[6,"ToIndicesSource","","Can be used as a source of indices when drawing."],[9,"to_indices_source","","Builds the `IndicesSource`.",25],[6,"Index","","An index from the index buffer."],[9,"get_type","","Returns the `IndexType` corresponding to this type.",26],[6,"IntoIndexBuffer","","Object is convertible to an index buffer."],[9,"into_index_buffer","","Creates a new `IndexBuffer` with the list of indices.",27],[10,"clone","","",22],[10,"get_primitives_type","","Returns the types of primitives.",22],[10,"get_indices_type","","Returns the types of indices.",22],[10,"get_offset","","Returns the first element to use from the buffer.",22],[10,"get_length","","Returns the lgnth of the buffer to use.",22],[10,"eq","","",23],[10,"ne","","",23],[10,"clone","","",23],[10,"fmt","","",23],[10,"fmt","","",28],[10,"new","","Builds a new index buffer.",28],[10,"get_primitives_type","","Returns the type of primitives associated with this index buffer.",28],[10,"get_indices_type","","Returns the data type of the indices inside this index buffer.",28],[10,"to_indices_source","","",28],[10,"drop","","",28],[10,"eq","","",24],[10,"ne","","",24],[10,"clone","","",24],[10,"fmt","","",24],[10,"clone","","",29],[10,"into_index_buffer","","",29],[10,"to_indices_source","","",29],[10,"into_index_buffer","","",30],[10,"to_indices_source","","",30],[10,"into_index_buffer","","",31],[10,"to_indices_source","","",31],[10,"into_index_buffer","","",32],[10,"to_indices_source","","",32],[10,"into_index_buffer","","",33],[10,"to_indices_source","","",33],[10,"into_index_buffer","","",34],[10,"to_indices_source","","",34],[10,"into_index_buffer","","",35],[10,"to_indices_source","","",35],[10,"into_index_buffer","","",36],[10,"to_indices_source","","",36],[10,"into_index_buffer","","",37],[10,"to_indices_source","","",37],[10,"into_index_buffer","","",38],[10,"to_indices_source","","",38],[0,"pixel_buffer","glium","Pixel buffers are buffer that contain two-dimensional texture data."],[1,"PixelBuffer","glium::pixel_buffer","Buffer that stores the content of a texture."],[10,"new_empty","","Builds a new buffer with an uninitialized content.",39],[10,"get_size","","Returns the size in bytes of the buffer.",39],[10,"read","","Copies the content of the pixel buffer to the RAM.",39],[0,"render_buffer","glium","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[1,"RenderBuffer","glium::render_buffer","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[1,"DepthRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[1,"StencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[1,"DepthStencilRenderBuffer","","A render buffer is similar to a texture, but is optimized for usage as a draw target."],[10,"new","","Builds a new render buffer.",40],[10,"get_dimensions","","Returns the dimensions of the render buffer.",40],[10,"to_color_attachment","","",40],[10,"new","","Builds a new render buffer.",41],[10,"get_dimensions","","Returns the dimensions of the render buffer.",41],[10,"to_depth_attachment","","",41],[10,"new","","Builds a new render buffer.",42],[10,"get_dimensions","","Returns the dimensions of the render buffer.",42],[10,"to_stencil_attachment","","",42],[10,"new","","Builds a new render buffer.",43],[10,"get_dimensions","","Returns the dimensions of the render buffer.",43],[10,"to_depth_stencil_attachment","","",43],[0,"uniforms","glium","A uniform is a global variable in your program. In order to draw something, you will need to\n tell `glium` what the values of all your uniforms are. Objects that implement the `Uniform`\n trait are here to do that."],[1,"Sampler","glium::uniforms","A sampler."],[1,"SamplerBehavior","","Behavior of a sampler."],[11,"wrap_function","","Functions to use for the X, Y, and Z coordinates.",44],[11,"minify_filter","","Filter to use when mignifying the texture.",44],[11,"magnify_filter","","Filter to use when magnifying the texture.",44],[11,"max_anisotropy","","`1` means no anisotropic filtering, any value superior to `1` does.",44],[1,"EmptyUniforms","","Object that can be used when you don't have any uniform."],[1,"UniformsStorage","","Stores uniforms."],[2,"SamplerWrapFunction","","Function to use for out-of-bounds samples."],[12,"Repeat","","Samples at coord `x + 1` are mapped to coord `x`.",45],[12,"Mirror","","Samples at coord `x + 1` are mapped to coord `1 - x`.",45],[12,"Clamp","","Samples at coord `x + 1` are mapped to coord `1`.",45],[2,"MagnifySamplerFilter","","The function that the GPU will use when loading the value of a texel."],[12,"Nearest","","The nearest texel will be loaded.",46],[12,"Linear","","All nearby texels will be loaded and their values will be merged.",46],[2,"MinifySamplerFilter","","The function that the GPU will use when loading the value of a texel."],[12,"Nearest","","The nearest texel will be loaded.",47],[12,"Linear","","All nearby texels will be loaded and their values will be merged.",47],[12,"NearestMipmapNearest","","The nearest texel of the nearest mipmap will be loaded.",47],[12,"LinearMipmapNearest","","Takes the nearest texel from the two nearest mipmaps, and merges them.",47],[12,"NearestMipmapLinear","","Same as `Linear` but from the nearest mipmap.",47],[12,"LinearMipmapLinear","","",47],[2,"UniformValue","","Represents a value to bind to a uniform."],[12,"SignedInt","","",48],[12,"UnsignedInt","","",48],[12,"Float","","",48],[12,"Mat2","","2x2 column-major matrix.",48],[12,"Mat3","","3x3 column-major matrix.",48],[12,"Mat4","","4x4 column-major matrix.",48],[12,"Vec2","","",48],[12,"Vec3","","",48],[12,"Vec4","","",48],[12,"Texture1d","","",48],[12,"CompressedTexture1d","","",48],[12,"IntegralTexture1d","","",48],[12,"UnsignedTexture1d","","",48],[12,"DepthTexture1d","","",48],[12,"Texture2d","","",48],[12,"CompressedTexture2d","","",48],[12,"IntegralTexture2d","","",48],[12,"UnsignedTexture2d","","",48],[12,"DepthTexture2d","","",48],[12,"Texture3d","","",48],[12,"CompressedTexture3d","","",48],[12,"IntegralTexture3d","","",48],[12,"UnsignedTexture3d","","",48],[12,"DepthTexture3d","","",48],[12,"Texture1dArray","","",48],[12,"CompressedTexture1dArray","","",48],[12,"IntegralTexture1dArray","","",48],[12,"UnsignedTexture1dArray","","",48],[12,"DepthTexture1dArray","","",48],[12,"Texture2dArray","","",48],[12,"CompressedTexture2dArray","","",48],[12,"IntegralTexture2dArray","","",48],[12,"UnsignedTexture2dArray","","",48],[12,"DepthTexture2dArray","","",48],[2,"UniformType","","Type of a uniform in a program."],[12,"Float","","",49],[12,"FloatVec2","","",49],[12,"FloatVec3","","",49],[12,"FloatVec4","","",49],[12,"Double","","",49],[12,"DoubleVec2","","",49],[12,"DoubleVec3","","",49],[12,"DoubleVec4","","",49],[12,"Int","","",49],[12,"IntVec2","","",49],[12,"IntVec3","","",49],[12,"IntVec4","","",49],[12,"UnsignedInt","","",49],[12,"UnsignedIntVec2","","",49],[12,"UnsignedIntVec3","","",49],[12,"UnsignedIntVec4","","",49],[12,"Bool","","",49],[12,"BoolVec2","","",49],[12,"BoolVec3","","",49],[12,"BoolVec4","","",49],[12,"FloatMat2","","",49],[12,"FloatMat3","","",49],[12,"FloatMat4","","",49],[12,"FloatMat2x3","","",49],[12,"FloatMat2x4","","",49],[12,"FloatMat3x2","","",49],[12,"FloatMat3x4","","",49],[12,"FloatMat4x2","","",49],[12,"FloatMat4x3","","",49],[12,"DoubleMat2","","",49],[12,"DoubleMat3","","",49],[12,"DoubleMat4","","",49],[12,"DoubleMat2x3","","",49],[12,"DoubleMat2x4","","",49],[12,"DoubleMat3x2","","",49],[12,"DoubleMat3x4","","",49],[12,"DoubleMat4x2","","",49],[12,"DoubleMat4x3","","",49],[12,"Sampler1d","","",49],[12,"ISampler1d","","",49],[12,"USampler1d","","",49],[12,"Sampler2d","","",49],[12,"ISampler2d","","",49],[12,"USampler2d","","",49],[12,"Sampler3d","","",49],[12,"ISampler3d","","",49],[12,"USampler3d","","",49],[12,"Sampler1dArray","","",49],[12,"ISampler1dArray","","",49],[12,"USampler1dArray","","",49],[12,"Sampler2dArray","","",49],[12,"ISampler2dArray","","",49],[12,"USampler2dArray","","",49],[12,"SamplerCube","","",49],[12,"ISamplerCube","","",49],[12,"USamplerCube","","",49],[12,"Sampler2dRect","","",49],[12,"ISampler2dRect","","",49],[12,"USampler2dRect","","",49],[12,"Sampler2dRectShadow","","",49],[12,"SamplerCubeArray","","",49],[12,"ISamplerCubeArray","","",49],[12,"USamplerCubeArray","","",49],[12,"SamplerBuffer","","",49],[12,"ISamplerBuffer","","",49],[12,"USamplerBuffer","","",49],[12,"Sampler2dMultisample","","",49],[12,"ISampler2dMultisample","","",49],[12,"USampler2dMultisample","","",49],[12,"Sampler2dMultisampleArray","","",49],[12,"ISampler2dMultisampleArray","","",49],[12,"USampler2dMultisampleArray","","",49],[12,"Sampler1dShadow","","",49],[12,"Sampler2dShadow","","",49],[12,"SamplerCubeShadow","","",49],[12,"Sampler1dArrayShadow","","",49],[12,"Sampler2dArrayShadow","","",49],[12,"SamplerCubeArrayShadow","","",49],[12,"Image1d","","",49],[12,"IImage1d","","",49],[12,"UImage1d","","",49],[12,"Image2d","","",49],[12,"IImage2d","","",49],[12,"UImage2d","","",49],[12,"Image3d","","",49],[12,"IImage3d","","",49],[12,"UImage3d","","",49],[12,"Image2dRect","","",49],[12,"IImage2dRect","","",49],[12,"UImage2dRect","","",49],[12,"ImageCube","","",49],[12,"IImageCube","","",49],[12,"UImageCube","","",49],[12,"ImageBuffer","","",49],[12,"IImageBuffer","","",49],[12,"UImageBuffer","","",49],[12,"Image1dArray","","",49],[12,"IImage1dArray","","",49],[12,"UImage1dArray","","",49],[12,"Image2dArray","","",49],[12,"IImage2dArray","","",49],[12,"UImage2dArray","","",49],[12,"Image2dMultisample","","",49],[12,"IImage2dMultisample","","",49],[12,"UImage2dMultisample","","",49],[12,"Image2dMultisampleArray","","",49],[12,"IImage2dMultisampleArray","","",49],[12,"UImage2dMultisampleArray","","",49],[12,"AtomicCounterUint","","",49],[10,"eq","","",45],[10,"ne","","",45],[10,"hash","","",45],[10,"clone","","",45],[10,"fmt","","",45],[10,"eq","","",46],[10,"ne","","",46],[10,"hash","","",46],[10,"clone","","",46],[10,"fmt","","",46],[10,"eq","","",47],[10,"ne","","",47],[10,"hash","","",47],[10,"clone","","",47],[10,"fmt","","",47],[10,"eq","","",44],[10,"ne","","",44],[10,"hash","","",44],[10,"clone","","",44],[10,"fmt","","",44],[10,"default","","",44],[10,"clone","","",50],[10,"fmt","","",50],[10,"visit_values","","",50],[10,"new","","Builds a new storage with a value.",51],[10,"add","","Adds a value to the storage.",51],[10,"eq","","",49],[10,"ne","","",49],[10,"fmt","","",49],[10,"clone","","",49],[10,"fmt","","",48],[10,"clone","","",48],[10,"is_usable_with","","Returns true if this value can be used with a uniform of the given type.",48],[10,"into_uniform_value","nalgebra::structs::mat","",52],[10,"into_uniform_value","","",53],[10,"into_uniform_value","","",54],[10,"into_uniform_value","nalgebra::structs::ortho","",55],[10,"into_uniform_value","","",56],[10,"into_uniform_value","nalgebra::structs::persp","",57],[10,"into_uniform_value","","",58],[10,"into_uniform_value","nalgebra::structs::pnt","",59],[10,"into_uniform_value","","",60],[10,"into_uniform_value","","",61],[10,"into_uniform_value","nalgebra::structs::quat","",62],[10,"into_uniform_value","nalgebra::structs::rot","",63],[10,"into_uniform_value","","",64],[10,"into_uniform_value","","",65],[10,"into_uniform_value","nalgebra::structs::quat","",66],[10,"into_uniform_value","nalgebra::structs::vec","",67],[10,"into_uniform_value","","",68],[10,"into_uniform_value","","",69],[10,"into_uniform_value","cgmath::matrix","",70],[10,"into_uniform_value","","",71],[10,"into_uniform_value","","",72],[10,"into_uniform_value","cgmath::vector","",73],[10,"into_uniform_value","","",74],[10,"into_uniform_value","","",75],[6,"IntoUniformValue","glium::uniforms","Represents a value that can be used as the value of a uniform."],[9,"into_uniform_value","","Builds a `UniformValue`.",76],[6,"Uniforms","","Object that contains the values of all the uniforms to bind to a program."],[9,"visit_values","","Calls the parameter once with the name and value of each uniform.",77],[0,"vertex_buffer","glium","Contains everything related to vertex buffers."],[1,"VertexBuffer","glium::vertex_buffer","A list of vertices loaded in the graphics card's memory."],[1,"VertexBufferAny","","A list of vertices loaded in the graphics card's memory."],[1,"Mapping","","A mapping of a buffer."],[2,"VerticesSource","","Describes the source to use for the vertices when drawing."],[12,"VertexBuffer","","A buffer uploaded in the video memory.",78],[2,"AttributeType","",""],[12,"I8","","",79],[12,"I8I8","","",79],[12,"I8I8I8","","",79],[12,"I8I8I8I8","","",79],[12,"U8","","",79],[12,"U8U8","","",79],[12,"U8U8U8","","",79],[12,"U8U8U8U8","","",79],[12,"I16","","",79],[12,"I16I16","","",79],[12,"I16I16I16","","",79],[12,"I16I16I16I16","","",79],[12,"U16","","",79],[12,"U16U16","","",79],[12,"U16U16U16","","",79],[12,"U16U16U16U16","","",79],[12,"I32","","",79],[12,"I32I32","","",79],[12,"I32I32I32","","",79],[12,"I32I32I32I32","","",79],[12,"U32","","",79],[12,"U32U32","","",79],[12,"U32U32U32","","",79],[12,"U32U32U32U32","","",79],[12,"F32","","",79],[12,"F32F32","","",79],[12,"F32F32F32","","",79],[12,"F32F32F32F32","","",79],[4,"VertexFormat","","Describes the layout of each vertex in a vertex buffer."],[6,"IntoVerticesSource","","Objects that can be used as vertex sources."],[9,"into_vertices_source","","Builds the `VerticesSource`.",80],[6,"Vertex","","Trait for structures that represent a vertex."],[9,"build_bindings","","Builds the `VertexFormat` representing the layout of this element.",81],[6,"Attribute","","Trait for types that can be used as vertex attributes."],[9,"get_type","","Get the type of data.",82],[10,"clone","","",78],[10,"into_vertices_source","","",78],[10,"fmt","","",83],[10,"new","","Builds a new vertex buffer.",83],[10,"new_dynamic","","Builds a new vertex buffer.",83],[10,"new_raw","","Builds a new vertex buffer from an undeterminate data type and bindings.",83],[10,"map","","Maps the buffer to allow write access to it.",83],[10,"read","","Reads the content of the buffer.",83],[10,"read_slice","","Reads the content of the buffer.",83],[10,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",83],[10,"get_bindings","","Returns the associated `VertexFormat`.",83],[10,"into_vertex_buffer_any","","Lose the type informations and turn the vertex buffer into a `VertexBufferAny`.",83],[10,"fmt","","",84],[10,"get_elements_size","","Returns the number of bytes between two consecutive elements in the buffer.",84],[10,"get_bindings","","Returns the associated `VertexFormat`.",84],[10,"into_vertex_buffer","","Turns the vertex buffer into a `VertexBuffer` without checking the type.",84],[10,"drop","","",84],[4,"Target","",""],[10,"deref","","",85],[10,"deref_mut","","",85],[10,"eq","","",79],[10,"ne","","",79],[10,"fmt","","",79],[10,"clone","","",79],[0,"texture","glium","A texture is an image loaded in video memory and that can be sampled in your shaders."],[1,"Texture1d","glium::texture","A one-dimensional texture  containing floating-point data."],[1,"CompressedTexture1d","","A compressed one-dimensional texture  containing floating-point data."],[1,"IntegralTexture1d","","A one-dimensional texture  containing signed integral data."],[1,"UnsignedTexture1d","","A one-dimensional texture  containing unsigned integral data."],[1,"DepthTexture1d","","A one-dimensional texture  containing depth data."],[1,"StencilTexture1d","","A one-dimensional texture  containing stencil data."],[1,"DepthStencilTexture1d","","A one-dimensional texture  containing both depth and stencil data."],[1,"Texture2d","","A two-dimensional texture  containing floating-point data."],[1,"CompressedTexture2d","","A compressed two-dimensional texture  containing floating-point data."],[1,"IntegralTexture2d","","A two-dimensional texture  containing signed integral data."],[1,"UnsignedTexture2d","","A two-dimensional texture  containing unsigned integral data."],[1,"DepthTexture2d","","A two-dimensional texture  containing depth data."],[1,"StencilTexture2d","","A two-dimensional texture  containing stencil data."],[1,"DepthStencilTexture2d","","A two-dimensional texture  containing both depth and stencil data."],[1,"Texture3d","","A three-dimensional texture  containing floating-point data."],[1,"CompressedTexture3d","","A compressed three-dimensional texture  containing floating-point data."],[1,"IntegralTexture3d","","A three-dimensional texture  containing signed integral data."],[1,"UnsignedTexture3d","","A three-dimensional texture  containing unsigned integral data."],[1,"DepthTexture3d","","A three-dimensional texture  containing depth data."],[1,"StencilTexture3d","","A three-dimensional texture  containing stencil data."],[1,"DepthStencilTexture3d","","A three-dimensional texture  containing both depth and stencil data."],[1,"Texture1dArray","","An array of one-dimensional textures  containing floating-point data."],[1,"CompressedTexture1dArray","","An array of compressed one-dimensional textures  containing floating-point data."],[1,"IntegralTexture1dArray","","An array of one-dimensional textures  containing signed integral data."],[1,"UnsignedTexture1dArray","","An array of one-dimensional textures  containing unsigned integral data."],[1,"DepthTexture1dArray","","An array of one-dimensional textures  containing depth data."],[1,"StencilTexture1dArray","","An array of one-dimensional textures  containing stencil data."],[1,"DepthStencilTexture1dArray","","An array of one-dimensional textures  containing both depth and stencil data."],[1,"Texture2dArray","","An array of two-dimensional textures  containing floating-point data."],[1,"CompressedTexture2dArray","","An array of compressed two-dimensional textures  containing floating-point data."],[1,"IntegralTexture2dArray","","An array of two-dimensional textures  containing signed integral data."],[1,"UnsignedTexture2dArray","","An array of two-dimensional textures  containing unsigned integral data."],[1,"DepthTexture2dArray","","An array of two-dimensional textures  containing depth data."],[1,"StencilTexture2dArray","","An array of two-dimensional textures  containing stencil data."],[1,"DepthStencilTexture2dArray","","An array of two-dimensional textures  containing both depth and stencil data."],[1,"TextureSurface","","Struct that allows you to draw on a texture."],[2,"ClientFormat","","List of client-side pixel formats."],[12,"U8","","",86],[12,"U8U8","","",86],[12,"U8U8U8","","",86],[12,"U8U8U8U8","","",86],[12,"I8","","",86],[12,"I8I8","","",86],[12,"I8I8I8","","",86],[12,"I8I8I8I8","","",86],[12,"U16","","",86],[12,"U16U16","","",86],[12,"U16U16U16","","",86],[12,"U16U16U16U16","","",86],[12,"I16","","",86],[12,"I16I16","","",86],[12,"I16I16I16","","",86],[12,"I16I16I16I16","","",86],[12,"U32","","",86],[12,"U32U32","","",86],[12,"U32U32U32","","",86],[12,"U32U32U32U32","","",86],[12,"I32","","",86],[12,"I32I32","","",86],[12,"I32I32I32","","",86],[12,"I32I32I32I32","","",86],[12,"U3U3U2","","",86],[12,"U5U6U5","","",86],[12,"U4U4U4U4","","",86],[12,"U5U5U5U1","","",86],[12,"U10U10U10U2","","",86],[12,"F16","","",86],[12,"F16F16","","",86],[12,"F16F16F16","","",86],[12,"F16F16F16F16","","",86],[12,"F32","","",86],[12,"F32F32","","",86],[12,"F32F32F32","","",86],[12,"F32F32F32F32","","",86],[2,"TextureFormat","","Format of the internal representation of a texture."],[12,"UncompressedFloat","","",87],[12,"UncompressedIntegral","","",87],[2,"UncompressedFloatFormat","","List of uncompressed pixel formats that contain floating points-like data."],[12,"U8","","",88],[12,"I8","","",88],[12,"U16","","",88],[12,"I16","","",88],[12,"U8U8","","",88],[12,"I8I8","","",88],[12,"U16U16","","",88],[12,"I16I16","","",88],[12,"U3U32U","","",88],[12,"U4U4U4","","",88],[12,"U5U5U5","","",88],[12,"U8U8U8","","",88],[12,"I8I8I8","","",88],[12,"U10U10U10","","",88],[12,"U12U12U12","","",88],[12,"I16I16I16","","",88],[12,"U2U2U2U2","","",88],[12,"U4U4U4U4","","",88],[12,"U5U5U5U1","","",88],[12,"U8U8U8U8","","",88],[12,"I8I8I8I8","","",88],[12,"U10U10U10U2","","",88],[12,"U12U12U12U12","","",88],[12,"U16U16U16U16","","",88],[12,"F16","","",88],[12,"F16F16","","",88],[12,"F16F16F16","","",88],[12,"F16F16F16F16","","",88],[12,"F32","","",88],[12,"F32F32","","",88],[12,"F32F32F32","","",88],[12,"F32F32F32F32","","",88],[12,"F11F11F10","","",88],[12,"F9F9F9","","Uses three components of 9 bits of precision that all share the same exponent.",88],[2,"UncompressedIntFormat","","List of uncompressed pixel formats that contain signed integral data."],[12,"I8","","",89],[12,"I16","","",89],[12,"I32","","",89],[12,"I8I8","","",89],[12,"I16I16","","",89],[12,"I32I32","","",89],[12,"I8I8I8","","",89],[12,"I16I16I16","","May not be supported by renderbuffers.",89],[12,"I32I32I32","","May not be supported by renderbuffers.",89],[12,"I8I8I8I8","","May not be supported by renderbuffers.",89],[12,"I16I16I16I16","","",89],[12,"I32I32I32I32","","",89],[2,"UncompressedUintFormat","","List of uncompressed pixel formats that contain unsigned integral data."],[12,"U8","","",90],[12,"U16","","",90],[12,"U32","","",90],[12,"U8U8","","",90],[12,"U16U16","","",90],[12,"U32U32","","",90],[12,"U8U8U8","","",90],[12,"U16U16U16","","May not be supported by renderbuffers.",90],[12,"U32U32U32","","May not be supported by renderbuffers.",90],[12,"U8U8U8U8","","May not be supported by renderbuffers.",90],[12,"U16U16U16U16","","",90],[12,"U32U32U32U32","","",90],[12,"U10U10U10U2","","",90],[2,"CompressedFormat","","List of compressed texture formats."],[12,"RGTCFormatU","","Red/green compressed texture with one unsigned component.",91],[12,"RGTCFormatI","","Red/green compressed texture with one signed component.",91],[12,"RGTCFormatUU","","Red/green compressed texture with two unsigned components.",91],[12,"RGTCFormatII","","Red/green compressed texture with two signed components.",91],[2,"DepthFormat","","List of formats available for depth textures."],[12,"I16","","",92],[12,"I24","","",92],[12,"I32","","May not be supported by all hardwares.",92],[12,"F32","","",92],[2,"DepthStencilFormat","","List of formats available for depth-stencil textures."],[12,"I24I8","","",93],[12,"F32I8","","",93],[2,"StencilFormat","","List of formats available for stencil textures."],[12,"I1","","",94],[12,"I4","","",94],[12,"I8","","",94],[12,"I16","","",94],[10,"eq","","",86],[10,"ne","","",86],[10,"clone","","",86],[10,"fmt","","",86],[10,"get_size","","Returns the size in bytes of a pixel of this type.",86],[10,"to_float_internal_format","","Returns the default corresponding floating-point-like internal format.",86],[10,"eq","","",88],[10,"ne","","",88],[10,"clone","","",88],[10,"fmt","","",88],[10,"eq","","",89],[10,"ne","","",89],[10,"clone","","",89],[10,"fmt","","",89],[10,"eq","","",90],[10,"ne","","",90],[10,"clone","","",90],[10,"fmt","","",90],[10,"eq","","",91],[10,"ne","","",91],[10,"clone","","",91],[10,"fmt","","",91],[10,"eq","","",92],[10,"ne","","",92],[10,"clone","","",92],[10,"fmt","","",92],[10,"eq","","",93],[10,"ne","","",93],[10,"clone","","",93],[10,"fmt","","",93],[10,"eq","","",94],[10,"ne","","",94],[10,"clone","","",94],[10,"fmt","","",94],[10,"eq","","",87],[10,"ne","","",87],[10,"clone","","",87],[10,"fmt","","",87],[10,"get_format","image::color","",95],[10,"get_format","","",96],[10,"get_format","","",97],[10,"get_format","","",97],[10,"get_format","","",97],[10,"get_format","","",98],[10,"get_format","","",98],[10,"get_format","","",98],[6,"PixelValue","glium::texture","A trait that must be implemented for any type that can represent the value of a pixel."],[9,"get_format","","Returns corresponding client format.",99],[6,"Texture","","Trait that describes a texture."],[9,"get_width","","Returns the width in pixels of the texture.",100],[9,"get_height","","Returns the height in pixels of the texture, or `None` for one dimension textures.",100],[9,"get_depth","","Returns the depth in pixels of the texture, or `None` for one or two dimension textures.",100],[9,"get_array_size","","Returns the number of textures in the array, or `None` for non-arrays.",100],[6,"Texture1dData","","Trait that describes data for a one-dimensional texture."],[17,"Data","glium::texture::Texture1dData",""],[9,"get_format","glium::texture","Returns the format of the pixels.",101],[9,"into_vec","","Returns a vec where each element is a pixel of the texture.",101],[9,"from_vec","","Builds a new object from raw data.",101],[6,"Texture2dData","","Trait that describes data for a two-dimensional texture."],[17,"Data","glium::texture::Texture2dData",""],[9,"get_format","glium::texture","Returns the format of the pixels.",102],[9,"get_dimensions","","Returns the dimensions of the texture.",102],[9,"into_vec","","Returns a vec where each element is a pixel of the texture.",102],[9,"from_vec","","Builds a new object from raw data.",102],[6,"Texture3dData","","Trait that describes data for a three-dimensional texture."],[17,"Data","glium::texture::Texture3dData",""],[9,"get_format","glium::texture","Returns the format of the pixels.",103],[9,"get_dimensions","","Returns the dimensions of the texture.",103],[9,"into_vec","","Returns a vec where each element is a pixel of the texture.",103],[9,"from_vec","","Builds a new object from raw data.",103],[10,"get_width","","",104],[10,"get_height","","",104],[10,"get_depth","","",104],[10,"get_array_size","","",104],[10,"fmt","","",104],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",104],[10,"new_empty","","Creates an empty texture.",104],[10,"get_width","","",106],[10,"get_height","","",106],[10,"get_depth","","",106],[10,"get_array_size","","",106],[10,"fmt","","",106],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",106],[10,"get_width","","",107],[10,"get_height","","",107],[10,"get_depth","","",107],[10,"get_array_size","","",107],[10,"fmt","","",107],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",107],[10,"new_empty","","Creates an empty texture.",107],[10,"get_width","","",108],[10,"get_height","","",108],[10,"get_depth","","",108],[10,"get_array_size","","",108],[10,"fmt","","",108],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",108],[10,"new_empty","","Creates an empty texture.",108],[10,"get_width","","",109],[10,"get_height","","",109],[10,"get_depth","","",109],[10,"get_array_size","","",109],[10,"fmt","","",109],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",109],[10,"new_empty","","Creates an empty texture.",109],[10,"get_width","","",110],[10,"get_height","","",110],[10,"get_depth","","",110],[10,"get_array_size","","",110],[10,"fmt","","",110],[10,"new","","Builds a new texture by uploading data.",110],[10,"new_empty","","Creates an empty texture.",110],[10,"get_width","","",111],[10,"get_height","","",111],[10,"get_depth","","",111],[10,"get_array_size","","",111],[10,"fmt","","",111],[10,"new","","Builds a new texture by uploading data.",111],[10,"new_empty","","Creates an empty texture.",111],[10,"get_width","","",112],[10,"get_height","","",112],[10,"get_depth","","",112],[10,"get_array_size","","",112],[10,"fmt","","",112],[10,"into_uniform_value","glium::uniforms","",105],[10,"to_color_attachment","glium::texture","",112],[10,"new","","Builds a new texture by uploading data.",112],[10,"new_empty","","Creates an empty texture.",112],[10,"as_surface","","Starts drawing on the texture.",112],[10,"read","","Reads the content of the texture to the RAM.",112],[10,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",112],[10,"get_width","","",113],[10,"get_height","","",113],[10,"get_depth","","",113],[10,"get_array_size","","",113],[10,"fmt","","",113],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",113],[10,"read","","Reads the content of the texture to the RAM.",113],[10,"read_to_pixel_buffer","","Reads the content of the texture into a buffer in video memory.",113],[10,"get_width","","",114],[10,"get_height","","",114],[10,"get_depth","","",114],[10,"get_array_size","","",114],[10,"fmt","","",114],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",114],[10,"new_empty","","Creates an empty texture.",114],[10,"get_width","","",115],[10,"get_height","","",115],[10,"get_depth","","",115],[10,"get_array_size","","",115],[10,"fmt","","",115],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",115],[10,"new_empty","","Creates an empty texture.",115],[10,"get_width","","",116],[10,"get_height","","",116],[10,"get_depth","","",116],[10,"get_array_size","","",116],[10,"fmt","","",116],[10,"into_uniform_value","glium::uniforms","",105],[10,"to_depth_attachment","glium::texture","",116],[10,"new","","Builds a new texture by uploading data.",116],[10,"new_empty","","Creates an empty texture.",116],[10,"get_width","","",117],[10,"get_height","","",117],[10,"get_depth","","",117],[10,"get_array_size","","",117],[10,"fmt","","",117],[10,"to_stencil_attachment","","",117],[10,"new","","Builds a new texture by uploading data.",117],[10,"new_empty","","Creates an empty texture.",117],[10,"get_width","","",118],[10,"get_height","","",118],[10,"get_depth","","",118],[10,"get_array_size","","",118],[10,"fmt","","",118],[10,"to_depth_stencil_attachment","","",118],[10,"new","","Builds a new texture by uploading data.",118],[10,"new_empty","","Creates an empty texture.",118],[10,"get_width","","",119],[10,"get_height","","",119],[10,"get_depth","","",119],[10,"get_array_size","","",119],[10,"fmt","","",119],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",119],[10,"new_empty","","Creates an empty texture.",119],[10,"get_width","","",120],[10,"get_height","","",120],[10,"get_depth","","",120],[10,"get_array_size","","",120],[10,"fmt","","",120],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",120],[10,"get_width","","",121],[10,"get_height","","",121],[10,"get_depth","","",121],[10,"get_array_size","","",121],[10,"fmt","","",121],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",121],[10,"new_empty","","Creates an empty texture.",121],[10,"get_width","","",122],[10,"get_height","","",122],[10,"get_depth","","",122],[10,"get_array_size","","",122],[10,"fmt","","",122],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",122],[10,"new_empty","","Creates an empty texture.",122],[10,"get_width","","",123],[10,"get_height","","",123],[10,"get_depth","","",123],[10,"get_array_size","","",123],[10,"fmt","","",123],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",123],[10,"new_empty","","Creates an empty texture.",123],[10,"get_width","","",124],[10,"get_height","","",124],[10,"get_depth","","",124],[10,"get_array_size","","",124],[10,"fmt","","",124],[10,"new","","Builds a new texture by uploading data.",124],[10,"new_empty","","Creates an empty texture.",124],[10,"get_width","","",125],[10,"get_height","","",125],[10,"get_depth","","",125],[10,"get_array_size","","",125],[10,"fmt","","",125],[10,"new","","Builds a new texture by uploading data.",125],[10,"new_empty","","Creates an empty texture.",125],[10,"get_width","","",126],[10,"get_height","","",126],[10,"get_depth","","",126],[10,"get_array_size","","",126],[10,"fmt","","",126],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",126],[10,"new_empty","","Creates an empty texture.",126],[10,"get_width","","",127],[10,"get_height","","",127],[10,"get_depth","","",127],[10,"get_array_size","","",127],[10,"fmt","","",127],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",127],[10,"get_width","","",128],[10,"get_height","","",128],[10,"get_depth","","",128],[10,"get_array_size","","",128],[10,"fmt","","",128],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",128],[10,"new_empty","","Creates an empty texture.",128],[10,"get_width","","",129],[10,"get_height","","",129],[10,"get_depth","","",129],[10,"get_array_size","","",129],[10,"fmt","","",129],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",129],[10,"new_empty","","Creates an empty texture.",129],[10,"get_width","","",130],[10,"get_height","","",130],[10,"get_depth","","",130],[10,"get_array_size","","",130],[10,"fmt","","",130],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",130],[10,"new_empty","","Creates an empty texture.",130],[10,"get_width","","",131],[10,"get_height","","",131],[10,"get_depth","","",131],[10,"get_array_size","","",131],[10,"fmt","","",131],[10,"new","","Builds a new texture by uploading data.",131],[10,"new_empty","","Creates an empty texture.",131],[10,"get_width","","",132],[10,"get_height","","",132],[10,"get_depth","","",132],[10,"get_array_size","","",132],[10,"fmt","","",132],[10,"new","","Builds a new texture by uploading data.",132],[10,"new_empty","","Creates an empty texture.",132],[10,"get_width","","",133],[10,"get_height","","",133],[10,"get_depth","","",133],[10,"get_array_size","","",133],[10,"fmt","","",133],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",133],[10,"new_empty","","Creates an empty texture.",133],[10,"get_width","","",134],[10,"get_height","","",134],[10,"get_depth","","",134],[10,"get_array_size","","",134],[10,"fmt","","",134],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",134],[10,"get_width","","",135],[10,"get_height","","",135],[10,"get_depth","","",135],[10,"get_array_size","","",135],[10,"fmt","","",135],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",135],[10,"new_empty","","Creates an empty texture.",135],[10,"get_width","","",136],[10,"get_height","","",136],[10,"get_depth","","",136],[10,"get_array_size","","",136],[10,"fmt","","",136],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",136],[10,"new_empty","","Creates an empty texture.",136],[10,"get_width","","",137],[10,"get_height","","",137],[10,"get_depth","","",137],[10,"get_array_size","","",137],[10,"fmt","","",137],[10,"into_uniform_value","glium::uniforms","",105],[10,"new","glium::texture","Builds a new texture by uploading data.",137],[10,"new_empty","","Creates an empty texture.",137],[10,"get_width","","",138],[10,"get_height","","",138],[10,"get_depth","","",138],[10,"get_array_size","","",138],[10,"fmt","","",138],[10,"new","","Builds a new texture by uploading data.",138],[10,"new_empty","","Creates an empty texture.",138],[10,"get_width","","",139],[10,"get_height","","",139],[10,"get_depth","","",139],[10,"get_array_size","","",139],[10,"fmt","","",139],[10,"new","","Builds a new texture by uploading data.",139],[10,"new_empty","","Creates an empty texture.",139],[4,"Data","",""],[10,"get_format","collections::vec","",140],[10,"into_vec","","",140],[10,"from_vec","","",140],[4,"Data","glium::texture",""],[4,"Data","",""],[10,"get_format","collections::vec","",140],[10,"get_dimensions","","",140],[10,"into_vec","","",140],[10,"from_vec","","",140],[4,"Data","glium::texture",""],[10,"get_format","image::buffer","",141],[10,"get_dimensions","","",141],[10,"into_vec","","",141],[10,"from_vec","","",141],[4,"Data","glium::texture",""],[10,"get_format","image::dynimage","",142],[10,"get_dimensions","","",142],[10,"into_vec","","",142],[10,"from_vec","","",142],[4,"Data","glium::texture",""],[10,"get_format","collections::vec","",140],[10,"get_dimensions","","",140],[10,"into_vec","","",140],[10,"from_vec","","",140],[10,"clear_color","glium::texture","",143],[10,"clear_depth","","",143],[10,"clear_stencil","","",143],[10,"get_dimensions","","",143],[10,"get_depth_buffer_bits","","",143],[10,"get_stencil_buffer_bits","","",143],[10,"draw","","",143],[10,"get_blit_helper","","",143],[10,"fmt","glium","",2],[10,"clone","","",2],[10,"description","","",2],[10,"detail","","",2],[10,"cause","","",2],[10,"new","","Builds a new program.",144],[10,"from_source","","Builds a new program from GLSL source code.",144],[10,"get_frag_data_location","","Returns the *location* of an output fragment, if it exists.",144],[10,"fmt","","",144],[10,"drop","","",144],[6,"Surface","","Object which can be drawn upon."],[9,"clear_color","","Clears the color components of the target.",145],[9,"clear_depth","","Clears the depth component of the target.",145],[9,"clear_stencil","","Clears the stencil component of the target.",145],[9,"get_dimensions","","Returns the dimensions in pixels of the target.",145],[9,"get_depth_buffer_bits","","Returns the number of bits of each pixel of the depth buffer.",145],[10,"has_depth_buffer","","Returns true if the surface has a depth buffer available.",145],[9,"get_stencil_buffer_bits","","Returns the number of bits of each pixel of the stencil buffer.",145],[10,"has_stencil_buffer","","Returns true if the surface has a stencil buffer available.",145],[9,"draw","","Draws.",145],[9,"get_blit_helper","","Returns an opaque type that is used by the implementation of blit functions.",145],[10,"blit_color","","Copies a rectangle of pixels from this surface to another surface.",145],[10,"blit_whole_color_to","","Copies the entire surface to a target surface. See `blit_color`.",145],[10,"fill","","Copies the entire surface to the entire target. See `blit_color`.",145],[6,"DisplayBuild","","Objects that can build a `Display` object."],[9,"build_glium","","Build a context and a `Display` to draw on it.",146],[10,"eq","","",3],[10,"ne","","",3],[10,"fmt","","",3],[10,"clone","","",3],[10,"eq","","",4],[10,"ne","","",4],[10,"fmt","","",4],[10,"clone","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"fmt","","",5],[10,"clone","","",5],[10,"requires_depth_buffer","","Returns true if the function requires a depth buffer to be used.",5],[10,"eq","","",6],[10,"ne","","",6],[10,"fmt","","",6],[10,"clone","","",6],[10,"eq","","",0],[10,"ne","","",0],[10,"fmt","","",0],[10,"clone","","",0],[10,"default","","",0],[10,"eq","","",1],[10,"ne","","",1],[10,"default","","",1],[10,"clone","","",1],[10,"fmt","","",1],[10,"finish","","Stop drawing and swap the buffers.",147],[10,"clear_color","","",147],[10,"clear_depth","","",147],[10,"clear_stencil","","",147],[10,"get_dimensions","","",147],[10,"get_depth_buffer_bits","","",147],[10,"get_stencil_buffer_bits","","",147],[10,"draw","","",147],[10,"get_blit_helper","","",147],[10,"drop","","",147],[10,"eq","","",7],[10,"ne","","",7],[10,"fmt","","",7],[10,"clone","","",7],[10,"description","","",7],[10,"detail","","",7],[10,"cause","","",7],[10,"from_error","","",7],[10,"build_glium","glutin","",148],[10,"clone","glium","",149],[10,"poll_events","","Reads all events received by the window.",149],[10,"get_framebuffer_dimensions","","Returns the dimensions of the main framebuffer.",149],[10,"draw","","Start drawing on the backbuffer.",149],[10,"get_max_anisotropy_support","","Returns the maximum value that can be used for anisotropic filtering, or `None`\nif the hardware doesn't support it.",149],[10,"get_max_viewport_dimensions","","Returns the maximum dimensions of the viewport that you can pass when drawing.",149],[10,"release_shader_compiler","","Releases the shader compiler, indicating that no new programs will be created for a while.",149],[10,"get_free_video_memory","","Returns an estimate of the amount of video memory available in bytes.",149],[10,"set_debug_callback","","Sets the callback to use when an OpenGL debug message is generated.",149],[10,"set_debug_callback_sync","","Sets the callback to use when an OpenGL debug message is generated.",149],[10,"read_front_buffer","","Reads the content of the front buffer.",149],[10,"assert_no_error","","Asserts that there are no OpenGL error pending.",149],[10,"synchronize","","Waits until all the previous commands have finished being executed.",149]],"paths":[[1,"DrawParameters"],[1,"Rect"],[2,"ProgramCreationError"],[2,"BlendingFunction"],[2,"BackfaceCullingMode"],[2,"DepthFunction"],[2,"PolygonMode"],[2,"GliumCreationError"],[2,"Severity"],[2,"Source"],[2,"MessageType"],[1,"TimestampQuery"],[2,"ColorAttachment"],[2,"DepthAttachment"],[2,"StencilAttachment"],[2,"DepthStencilAttachment"],[6,"ToColorAttachment"],[6,"ToDepthAttachment"],[6,"ToStencilAttachment"],[6,"ToDepthStencilAttachment"],[1,"SimpleFrameBuffer"],[1,"MultiOutputFrameBuffer"],[2,"IndicesSource"],[2,"PrimitiveType"],[2,"IndexType"],[6,"ToIndicesSource"],[6,"Index"],[6,"IntoIndexBuffer"],[1,"IndexBuffer"],[1,"PointsList"],[1,"LinesList"],[1,"LinesListAdjacency"],[1,"LineStrip"],[1,"LineStripAdjacency"],[1,"TrianglesList"],[1,"TrianglesListAdjacency"],[1,"TriangleStrip"],[1,"TriangleStripAdjacency"],[1,"TriangleFan"],[1,"PixelBuffer"],[1,"RenderBuffer"],[1,"DepthRenderBuffer"],[1,"StencilRenderBuffer"],[1,"DepthStencilRenderBuffer"],[1,"SamplerBehavior"],[2,"SamplerWrapFunction"],[2,"MagnifySamplerFilter"],[2,"MinifySamplerFilter"],[2,"UniformValue"],[2,"UniformType"],[1,"EmptyUniforms"],[1,"UniformsStorage"],[1,"Mat2"],[1,"Mat3"],[1,"Mat4"],[1,"Ortho3"],[1,"OrthoMat3"],[1,"Persp3"],[1,"PerspMat3"],[1,"Pnt2"],[1,"Pnt3"],[1,"Pnt4"],[1,"Quat"],[1,"Rot2"],[1,"Rot3"],[1,"Rot4"],[1,"UnitQuat"],[1,"Vec2"],[1,"Vec3"],[1,"Vec4"],[1,"Matrix2"],[1,"Matrix3"],[1,"Matrix4"],[1,"Vector2"],[1,"Vector3"],[1,"Vector4"],[6,"IntoUniformValue"],[6,"Uniforms"],[2,"VerticesSource"],[2,"AttributeType"],[6,"IntoVerticesSource"],[6,"Vertex"],[6,"Attribute"],[1,"VertexBuffer"],[1,"VertexBufferAny"],[1,"Mapping"],[2,"ClientFormat"],[2,"TextureFormat"],[2,"UncompressedFloatFormat"],[2,"UncompressedIntFormat"],[2,"UncompressedUintFormat"],[2,"CompressedFormat"],[2,"DepthFormat"],[2,"DepthStencilFormat"],[2,"StencilFormat"],[1,"Rgb"],[1,"Rgba"],[1,"Luma"],[1,"LumaA"],[6,"PixelValue"],[6,"Texture"],[6,"Texture1dData"],[6,"Texture2dData"],[6,"Texture3dData"],[1,"Texture1d"],[1,"Sampler"],[1,"CompressedTexture1d"],[1,"IntegralTexture1d"],[1,"UnsignedTexture1d"],[1,"DepthTexture1d"],[1,"StencilTexture1d"],[1,"DepthStencilTexture1d"],[1,"Texture2d"],[1,"CompressedTexture2d"],[1,"IntegralTexture2d"],[1,"UnsignedTexture2d"],[1,"DepthTexture2d"],[1,"StencilTexture2d"],[1,"DepthStencilTexture2d"],[1,"Texture3d"],[1,"CompressedTexture3d"],[1,"IntegralTexture3d"],[1,"UnsignedTexture3d"],[1,"DepthTexture3d"],[1,"StencilTexture3d"],[1,"DepthStencilTexture3d"],[1,"Texture1dArray"],[1,"CompressedTexture1dArray"],[1,"IntegralTexture1dArray"],[1,"UnsignedTexture1dArray"],[1,"DepthTexture1dArray"],[1,"StencilTexture1dArray"],[1,"DepthStencilTexture1dArray"],[1,"Texture2dArray"],[1,"CompressedTexture2dArray"],[1,"IntegralTexture2dArray"],[1,"UnsignedTexture2dArray"],[1,"DepthTexture2dArray"],[1,"StencilTexture2dArray"],[1,"DepthStencilTexture2dArray"],[1,"Vec"],[1,"ImageBuffer"],[2,"DynamicImage"],[1,"TextureSurface"],[1,"Program"],[6,"Surface"],[6,"DisplayBuild"],[1,"Frame"],[1,"WindowBuilder"],[1,"Display"]]};
searchIndex['nalgebra'] = {"items":[[0,"","nalgebra","# nalgebra"],[1,"Identity","","Special identity matrix. All its operation are no-ops."],[1,"DMat","","Matrix with dimensions unknown at compile-time."],[1,"DVec","","Heap allocated, dynamically sized vector."],[11,"at","","Components of the vector. Contains as much elements as the vector dimension.",0],[1,"DVec1","","Stack-allocated, dynamically sized vector with a maximum size of 1."],[1,"DVec2","","Stack-allocated, dynamically sized vector with a maximum size of 2."],[1,"DVec3","","Stack-allocated, dynamically sized vector with a maximum size of 3."],[1,"DVec4","","Stack-allocated, dynamically sized vector with a maximum size of 4."],[1,"DVec5","","Stack-allocated, dynamically sized vector with a maximum size of 5."],[1,"DVec6","","Stack-allocated, dynamically sized vector with a maximum size of 6."],[1,"Iso2","","Two dimensional isometry."],[11,"rotation","","The rotation applicable by this isometry.",1],[11,"translation","","The translation applicable by this isometry.",1],[1,"Iso3","","Three dimensional isometry."],[11,"rotation","","The rotation applicable by this isometry.",2],[11,"translation","","The translation applicable by this isometry.",2],[1,"Iso4","","Four dimensional isometry."],[11,"rotation","","The rotation applicable by this isometry.",3],[11,"translation","","The translation applicable by this isometry.",3],[1,"Mat1","","Square matrix of dimension 1."],[11,"m11","","",4],[1,"Mat2","","Square matrix of dimension 2."],[11,"m11","","",5],[11,"m21","","",5],[11,"m12","","",5],[11,"m22","","",5],[1,"Mat3","","Square matrix of dimension 3."],[11,"m11","","",6],[11,"m21","","",6],[11,"m31","","",6],[11,"m12","","",6],[11,"m22","","",6],[11,"m32","","",6],[11,"m13","","",6],[11,"m23","","",6],[11,"m33","","",6],[1,"Mat4","","Square matrix of dimension 4."],[11,"m11","","",7],[11,"m21","","",7],[11,"m31","","",7],[11,"m41","","",7],[11,"m12","","",7],[11,"m22","","",7],[11,"m32","","",7],[11,"m42","","",7],[11,"m13","","",7],[11,"m23","","",7],[11,"m33","","",7],[11,"m43","","",7],[11,"m14","","",7],[11,"m24","","",7],[11,"m34","","",7],[11,"m44","","",7],[1,"Mat5","","Square matrix of dimension 5."],[11,"m11","","",8],[11,"m21","","",8],[11,"m31","","",8],[11,"m41","","",8],[11,"m51","","",8],[11,"m12","","",8],[11,"m22","","",8],[11,"m32","","",8],[11,"m42","","",8],[11,"m52","","",8],[11,"m13","","",8],[11,"m23","","",8],[11,"m33","","",8],[11,"m43","","",8],[11,"m53","","",8],[11,"m14","","",8],[11,"m24","","",8],[11,"m34","","",8],[11,"m44","","",8],[11,"m54","","",8],[11,"m15","","",8],[11,"m25","","",8],[11,"m35","","",8],[11,"m45","","",8],[11,"m55","","",8],[1,"Mat6","","Square matrix of dimension 6."],[11,"m11","","",9],[11,"m21","","",9],[11,"m31","","",9],[11,"m41","","",9],[11,"m51","","",9],[11,"m61","","",9],[11,"m12","","",9],[11,"m22","","",9],[11,"m32","","",9],[11,"m42","","",9],[11,"m52","","",9],[11,"m62","","",9],[11,"m13","","",9],[11,"m23","","",9],[11,"m33","","",9],[11,"m43","","",9],[11,"m53","","",9],[11,"m63","","",9],[11,"m14","","",9],[11,"m24","","",9],[11,"m34","","",9],[11,"m44","","",9],[11,"m54","","",9],[11,"m64","","",9],[11,"m15","","",9],[11,"m25","","",9],[11,"m35","","",9],[11,"m45","","",9],[11,"m55","","",9],[11,"m65","","",9],[11,"m16","","",9],[11,"m26","","",9],[11,"m36","","",9],[11,"m46","","",9],[11,"m56","","",9],[11,"m66","","",9],[1,"Rot2","","Two dimensional rotation matrix."],[1,"Rot3","","Three dimensional rotation matrix."],[1,"Rot4","","Four dimensional rotation matrix."],[1,"Vec0","","Vector of dimension 0."],[1,"Vec1","","Vector of dimension 1."],[11,"x","","First component of the vector.",10],[1,"Vec2","","Vector of dimension 2."],[11,"x","","First component of the vector.",11],[11,"y","","Second component of the vector.",11],[1,"Vec3","","Vector of dimension 3."],[11,"x","","First component of the vector.",12],[11,"y","","Second component of the vector.",12],[11,"z","","Third component of the vector.",12],[1,"Vec4","","Vector of dimension 4."],[11,"x","","First component of the vector.",13],[11,"y","","Second component of the vector.",13],[11,"z","","Third component of the vector.",13],[11,"w","","Fourth component of the vector.",13],[1,"Vec5","","Vector of dimension 5."],[11,"x","","First component of the vector.",14],[11,"y","","Second component of the vector.",14],[11,"z","","Third component of the vector.",14],[11,"w","","Fourth component of the vector.",14],[11,"a","","Fifth of the vector.",14],[1,"Vec6","","Vector of dimension 6."],[11,"x","","First component of the vector.",15],[11,"y","","Second component of the vector.",15],[11,"z","","Third component of the vector.",15],[11,"w","","Fourth component of the vector.",15],[11,"a","","Fifth of the vector.",15],[11,"b","","Sixth component of the vector.",15],[1,"Pnt0","","Point of dimension 0."],[1,"Pnt1","","Point of dimension 1."],[11,"x","","First component of the point.",16],[1,"Pnt2","","Point of dimension 2."],[11,"x","","First component of the point.",17],[11,"y","","Second component of the point.",17],[1,"Pnt3","","Point of dimension 3."],[11,"x","","First component of the point.",18],[11,"y","","Second component of the point.",18],[11,"z","","Third component of the point.",18],[1,"Pnt4","","Point of dimension 4."],[11,"x","","First component of the point.",19],[11,"y","","Second component of the point.",19],[11,"z","","Third component of the point.",19],[11,"w","","Fourth component of the point.",19],[1,"Pnt5","","Point of dimension 5."],[11,"x","","First component of the point.",20],[11,"y","","Second component of the point.",20],[11,"z","","Third component of the point.",20],[11,"w","","Fourth component of the point.",20],[11,"a","","Fifth of the point.",20],[1,"Pnt6","","Point of dimension 6."],[11,"x","","First component of the point.",21],[11,"y","","Second component of the point.",21],[11,"z","","Third component of the point.",21],[11,"w","","Fourth component of the point.",21],[11,"a","","Fifth of the point.",21],[11,"b","","Sixth component of the point.",21],[1,"Persp3","","A 3D perspective projection stored without any matrix."],[1,"PerspMat3","","A 3D perspective projection stored as a 4D matrix."],[1,"Ortho3","","A 3D orthographic projection stored without any matrix."],[1,"OrthoMat3","","A 3D orthographic projection stored as a 4D matrix."],[1,"Quat","","A quaternion."],[11,"w","","The scalar component of the quaternion.",22],[11,"i","","The first vector component of the quaternion.",22],[11,"j","","The second vector component of the quaternion.",22],[11,"k","","The third vector component of the quaternion.",22],[1,"UnitQuat","","A unit quaternion that can represent a 3D rotation."],[2,"POrdering","","Result of a partial ordering."],[12,"PartialLess","","Result of a strict comparison.",23],[12,"PartialEqual","","Equality relationship.",23],[12,"PartialGreater","","Result of a strict comparison.",23],[12,"NotComparable","","Result of a comparison between two objects that are not comparable.",23],[3,"qr","","QR decomposition using Householder reflections."],[3,"householder_matrix","","Get the householder matrix corresponding to a reflexion to the hyperplane\ndefined by `vec`. It can be a reflexion contained in a subspace."],[3,"clamp","","Change the input value to ensure it is on the range `[min, max]`."],[3,"max","","Same as `cmp::max`."],[3,"min","","Same as `cmp::min`."],[3,"inf","","Returns the infimum of `a` and `b`."],[3,"sup","","Returns the supremum of `a` and `b`."],[3,"partial_cmp","","Compare `a` and `b` using a partial ordering relation."],[3,"partial_lt","","Returns `true` iff `a` and `b` are comparable and `a < b`."],[3,"partial_le","","Returns `true` iff `a` and `b` are comparable and `a <= b`."],[3,"partial_gt","","Returns `true` iff `a` and `b` are comparable and `a > b`."],[3,"partial_ge","","Returns `true` iff `a` and `b` are comparable and `a >= b`."],[3,"partial_min","","Return the minimum of `a` and `b` if they are comparable."],[3,"partial_max","","Return the maximum of `a` and `b` if they are comparable."],[3,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`."],[3,"identity","","Create a special identity object."],[3,"zero","","Create a zero-valued value."],[3,"is_zero","","Tests is a value is iqual to zero."],[3,"one","","Create a one-valued value."],[3,"orig","","Returns the trivial origin of an affine space."],[3,"center","","Returns the center of two points."],[3,"dist","","Returns the distance between two points."],[3,"sqdist","","Returns the squared distance between two points."],[3,"perspective3d","","Computes a projection matrix given the frustrum near plane width, height, the field of\nview, and the distance to the clipping planes (`znear` and `zfar`)."],[3,"translation","","Gets the translation applicable by `m`."],[3,"inv_translation","","Gets the inverse translation applicable by `m`."],[3,"append_translation","","Applies the translation `v` to a copy of `m`."],[3,"translate","","Applies a translation to a point."],[3,"inv_translate","","Applies an inverse translation to a point."],[3,"rotation","","Gets the rotation applicable by `m`."],[3,"inv_rotation","","Gets the inverse rotation applicable by `m`."],[3,"append_rotation","","Applies the rotation `v` to a copy of `m`."],[3,"prepend_rotation","","Pre-applies the rotation `v` to a copy of `m`."],[3,"rotate","","Applies a rotation to a vector."],[3,"inv_rotate","","Applies an inverse rotation to a vector."],[3,"append_rotation_wrt_point","","Rotates a copy of `m` by `amount` using `center` as the pivot point."],[3,"append_rotation_wrt_center","","Rotates a copy of `m` by `amount` using `m.translation()` as the pivot point."],[3,"to_rot_mat","","Builds a rotation matrix from `r`."],[3,"absolute_rotate","","Applies a rotation using the absolute values of its components."],[3,"transformation","","Gets the transformation applicable by `m`."],[3,"inv_transformation","","Gets the inverse transformation applicable by `m`."],[3,"append_transformation","","Gets a transformed copy of `m`."],[3,"transform","","Applies a transformation to a vector."],[3,"inv_transform","","Applies an inverse transformation to a vector."],[3,"dot","","Computes the dot product of two vectors."],[3,"norm","","Computes the L2 norm of a vector."],[3,"sqnorm","","Computes the squared L2 norm of a vector."],[3,"normalize","","Gets the normalized version of a vector."],[3,"det","","Computes the determinant of a square matrix."],[3,"cross","","Computes the cross product of two vectors."],[3,"cross_matrix","","Given a vector, computes the matrix which, when multiplied by another vector, computes a cross\nproduct."],[3,"to_homogeneous","","Converts a matrix or vector to homogeneous coordinates."],[3,"from_homogeneous","","Converts a matrix or vector from homogeneous coordinates."],[3,"sample_sphere","","Samples the unit sphere living on the dimension as the samples types."],[3,"approx_eq","","Tests approximate equality."],[3,"approx_eq_eps","","Tests approximate equality using a custom epsilon."],[3,"abs","","Computes a component-wise absolute value."],[3,"inv","","Gets an inverted copy of a matrix."],[3,"transpose","","Gets a transposed copy of a matrix."],[3,"outer","","Computes the outer product of two vectors."],[3,"cov","","Computes the covariance of a set of observations."],[3,"mean","","Computes the mean of a set of observations."],[3,"eigen_qr","","Computes the eigenvalues and eigenvectors of a square matrix usin the QR algorithm."],[3,"new_identity","","Construct the identity matrix for a given dimension"],[3,"canonical_basis","","Computes the canonical basis for a given dimension."],[3,"orthonormal_subspace_basis","","Computes the basis of the orthonormal subspace of a given vector."],[3,"canonical_basis_element","","Gets the (0-based) i-th element of the canonical basis of V."],[3,"diag","","Gets the diagonal of a square matrix."],[3,"dim","","Gets the dimension an object lives in."],[3,"shape","","Gets the indexable range of an object."],[3,"cast","","Converts an object from one type to another."],[10,"clone","","",24],[10,"eq","","",24],[10,"ne","","",24],[10,"new_uninitialized","","Creates an uninitialized matrix.",24],[10,"new_zeros","","Builds a matrix filled with zeros.",24],[10,"is_zero","","Tests if all components of the matrix are zeroes.",24],[10,"reset","","",24],[10,"new_random","","Builds a matrix filled with random values.",24],[10,"new_ones","","Builds a matrix filled with a given constant.",24],[10,"from_elem","","Builds a matrix filled with a given constant.",24],[10,"from_row_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in row-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24],[10,"from_col_vec","","Builds a matrix filled with the components provided by a vector.\nThe vector contains the matrix data in column-major order.\nNote that `from_col_vec` is a lot faster than `from_row_vec` since a `DMat` stores its data\nin column-major order.",24],[10,"from_fn","","Builds a matrix filled with a given constant.",24],[10,"nrows","","The number of row on the matrix.",24],[10,"ncols","","The number of columns on the matrix.",24],[10,"to_vec","","Transforms this matrix isizeo an array. This consumes the matrix and is O(1).\nThe returned vector contains the matrix data in column-major order.",24],[10,"as_vec","","Gets a reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24],[10,"as_mut_vec","","Gets a mutable reference to this matrix data.\nThe returned vector contains the matrix data in column-major order.",24],[10,"new_identity","","Builds an identity matrix.",24],[10,"set","","Changes the value of a component of the matrix.",24],[10,"unsafe_set","","Just like `set` without bounds checking.",24],[10,"at","","Reads the value of a component of the matrix.",24],[10,"unsafe_at","","Just like `at` without bounds checking.",24],[10,"swap","","",24],[10,"shape","","",24],[10,"index","","",24],[10,"index_mut","","",24],[10,"mul","","",24],[10,"mul","","",24],[10,"mul","","",0],[10,"inv_cpy","","",24],[10,"inv","","",24],[10,"transpose_cpy","","",24],[10,"transpose","","",24],[10,"mean","","",24],[10,"cov","","",24],[10,"col_slice","","",24],[10,"row_slice","","",24],[10,"from_diag","","",24],[10,"set_diag","","",24],[10,"diag","","",24],[10,"approx_epsilon","","",24],[10,"approx_ulps","","",24],[10,"approx_eq_eps","","",24],[10,"approx_eq_ulps","","",24],[10,"fmt","","",24],[10,"mul","","",24],[10,"div","","",24],[10,"add","","",24],[10,"sub","","",24],[10,"clone","","",0],[10,"fmt","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"new_uninitialized","","Creates an uninitialized vec.",0],[10,"from_elem","","Builds a vector filled with a constant.",0],[10,"from_slice","","Builds a vector filled with the components provided by a vector.",0],[10,"from_fn","","Builds a vector filled with the result of a function.",0],[10,"len","","",0],[10,"from_iter","","",0],[10,"new_zeros","","Builds a vector filled with zeros.",0],[10,"is_zero","","Tests if all components of the vector are zeroes.",0],[10,"as_slice","","Slices this vector.",0],[10,"as_mut_slice","","Mutably slices this vector.",0],[10,"shape","","",0],[10,"at","","",0],[10,"set","","",0],[10,"swap","","",0],[10,"unsafe_at","","",0],[10,"unsafe_set","","",0],[10,"index","","",0],[10,"index_mut","","",0],[10,"new_ones","","Builds a vector filled with ones.",0],[10,"new_random","","Builds a vector filled with random values.",0],[10,"iter","","",0],[10,"iter_mut","","",0],[10,"axpy","","",0],[10,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",0],[10,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",0],[10,"mul","","",0],[10,"div","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"neg","","",0],[10,"dot","","",0],[10,"sqnorm","","",0],[10,"normalize_cpy","","",0],[10,"normalize","","",0],[10,"approx_epsilon","","",0],[10,"approx_ulps","","",0],[10,"approx_eq_eps","","",0],[10,"approx_eq_ulps","","",0],[10,"mul","","",0],[10,"div","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"len","","",25],[10,"eq","","",25],[10,"clone","","",25],[10,"new_zeros","","Builds a vector filled with zeros.",25],[10,"is_zero","","Tests if all components of the vector are zeroes.",25],[10,"as_slice","","Slices this vector.",25],[10,"as_mut_slice","","Mutably slices this vector.",25],[10,"shape","","",25],[10,"at","","",25],[10,"set","","",25],[10,"swap","","",25],[10,"unsafe_at","","",25],[10,"unsafe_set","","",25],[10,"index","","",25],[10,"index_mut","","",25],[10,"new_ones","","Builds a vector filled with ones.",25],[10,"new_random","","Builds a vector filled with random values.",25],[10,"iter","","",25],[10,"iter_mut","","",25],[10,"axpy","","",25],[10,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",25],[10,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",25],[10,"mul","","",25],[10,"div","","",25],[10,"add","","",25],[10,"sub","","",25],[10,"neg","","",25],[10,"dot","","",25],[10,"sqnorm","","",25],[10,"normalize_cpy","","",25],[10,"normalize","","",25],[10,"approx_epsilon","","",25],[10,"approx_ulps","","",25],[10,"approx_eq_eps","","",25],[10,"approx_eq_ulps","","",25],[10,"mul","","",25],[10,"div","","",25],[10,"add","","",25],[10,"sub","","",25],[10,"from_elem","","Builds a vector filled with a constant.",25],[10,"from_slice","","Builds a vector filled with the components provided by a vector.",25],[10,"from_fn","","Builds a vector filled with the result of a function.",25],[10,"from_iter","","",25],[10,"len","","",26],[10,"eq","","",26],[10,"clone","","",26],[10,"new_zeros","","Builds a vector filled with zeros.",26],[10,"is_zero","","Tests if all components of the vector are zeroes.",26],[10,"as_slice","","Slices this vector.",26],[10,"as_mut_slice","","Mutably slices this vector.",26],[10,"shape","","",26],[10,"at","","",26],[10,"set","","",26],[10,"swap","","",26],[10,"unsafe_at","","",26],[10,"unsafe_set","","",26],[10,"index","","",26],[10,"index_mut","","",26],[10,"new_ones","","Builds a vector filled with ones.",26],[10,"new_random","","Builds a vector filled with random values.",26],[10,"iter","","",26],[10,"iter_mut","","",26],[10,"axpy","","",26],[10,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",26],[10,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",26],[10,"mul","","",26],[10,"div","","",26],[10,"add","","",26],[10,"sub","","",26],[10,"neg","","",26],[10,"dot","","",26],[10,"sqnorm","","",26],[10,"normalize_cpy","","",26],[10,"normalize","","",26],[10,"approx_epsilon","","",26],[10,"approx_ulps","","",26],[10,"approx_eq_eps","","",26],[10,"approx_eq_ulps","","",26],[10,"mul","","",26],[10,"div","","",26],[10,"add","","",26],[10,"sub","","",26],[10,"from_elem","","Builds a vector filled with a constant.",26],[10,"from_slice","","Builds a vector filled with the components provided by a vector.",26],[10,"from_fn","","Builds a vector filled with the result of a function.",26],[10,"from_iter","","",26],[10,"len","","",27],[10,"eq","","",27],[10,"clone","","",27],[10,"new_zeros","","Builds a vector filled with zeros.",27],[10,"is_zero","","Tests if all components of the vector are zeroes.",27],[10,"as_slice","","Slices this vector.",27],[10,"as_mut_slice","","Mutably slices this vector.",27],[10,"shape","","",27],[10,"at","","",27],[10,"set","","",27],[10,"swap","","",27],[10,"unsafe_at","","",27],[10,"unsafe_set","","",27],[10,"index","","",27],[10,"index_mut","","",27],[10,"new_ones","","Builds a vector filled with ones.",27],[10,"new_random","","Builds a vector filled with random values.",27],[10,"iter","","",27],[10,"iter_mut","","",27],[10,"axpy","","",27],[10,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",27],[10,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",27],[10,"mul","","",27],[10,"div","","",27],[10,"add","","",27],[10,"sub","","",27],[10,"neg","","",27],[10,"dot","","",27],[10,"sqnorm","","",27],[10,"normalize_cpy","","",27],[10,"normalize","","",27],[10,"approx_epsilon","","",27],[10,"approx_ulps","","",27],[10,"approx_eq_eps","","",27],[10,"approx_eq_ulps","","",27],[10,"mul","","",27],[10,"div","","",27],[10,"add","","",27],[10,"sub","","",27],[10,"from_elem","","Builds a vector filled with a constant.",27],[10,"from_slice","","Builds a vector filled with the components provided by a vector.",27],[10,"from_fn","","Builds a vector filled with the result of a function.",27],[10,"from_iter","","",27],[10,"len","","",28],[10,"eq","","",28],[10,"clone","","",28],[10,"new_zeros","","Builds a vector filled with zeros.",28],[10,"is_zero","","Tests if all components of the vector are zeroes.",28],[10,"as_slice","","Slices this vector.",28],[10,"as_mut_slice","","Mutably slices this vector.",28],[10,"shape","","",28],[10,"at","","",28],[10,"set","","",28],[10,"swap","","",28],[10,"unsafe_at","","",28],[10,"unsafe_set","","",28],[10,"index","","",28],[10,"index_mut","","",28],[10,"new_ones","","Builds a vector filled with ones.",28],[10,"new_random","","Builds a vector filled with random values.",28],[10,"iter","","",28],[10,"iter_mut","","",28],[10,"axpy","","",28],[10,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",28],[10,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",28],[10,"mul","","",28],[10,"div","","",28],[10,"add","","",28],[10,"sub","","",28],[10,"neg","","",28],[10,"dot","","",28],[10,"sqnorm","","",28],[10,"normalize_cpy","","",28],[10,"normalize","","",28],[10,"approx_epsilon","","",28],[10,"approx_ulps","","",28],[10,"approx_eq_eps","","",28],[10,"approx_eq_ulps","","",28],[10,"mul","","",28],[10,"div","","",28],[10,"add","","",28],[10,"sub","","",28],[10,"from_elem","","Builds a vector filled with a constant.",28],[10,"from_slice","","Builds a vector filled with the components provided by a vector.",28],[10,"from_fn","","Builds a vector filled with the result of a function.",28],[10,"from_iter","","",28],[10,"len","","",29],[10,"eq","","",29],[10,"clone","","",29],[10,"new_zeros","","Builds a vector filled with zeros.",29],[10,"is_zero","","Tests if all components of the vector are zeroes.",29],[10,"as_slice","","Slices this vector.",29],[10,"as_mut_slice","","Mutably slices this vector.",29],[10,"shape","","",29],[10,"at","","",29],[10,"set","","",29],[10,"swap","","",29],[10,"unsafe_at","","",29],[10,"unsafe_set","","",29],[10,"index","","",29],[10,"index_mut","","",29],[10,"new_ones","","Builds a vector filled with ones.",29],[10,"new_random","","Builds a vector filled with random values.",29],[10,"iter","","",29],[10,"iter_mut","","",29],[10,"axpy","","",29],[10,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",29],[10,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",29],[10,"mul","","",29],[10,"div","","",29],[10,"add","","",29],[10,"sub","","",29],[10,"neg","","",29],[10,"dot","","",29],[10,"sqnorm","","",29],[10,"normalize_cpy","","",29],[10,"normalize","","",29],[10,"approx_epsilon","","",29],[10,"approx_ulps","","",29],[10,"approx_eq_eps","","",29],[10,"approx_eq_ulps","","",29],[10,"mul","","",29],[10,"div","","",29],[10,"add","","",29],[10,"sub","","",29],[10,"from_elem","","Builds a vector filled with a constant.",29],[10,"from_slice","","Builds a vector filled with the components provided by a vector.",29],[10,"from_fn","","Builds a vector filled with the result of a function.",29],[10,"from_iter","","",29],[10,"len","","",30],[10,"eq","","",30],[10,"clone","","",30],[10,"new_zeros","","Builds a vector filled with zeros.",30],[10,"is_zero","","Tests if all components of the vector are zeroes.",30],[10,"as_slice","","Slices this vector.",30],[10,"as_mut_slice","","Mutably slices this vector.",30],[10,"shape","","",30],[10,"at","","",30],[10,"set","","",30],[10,"swap","","",30],[10,"unsafe_at","","",30],[10,"unsafe_set","","",30],[10,"index","","",30],[10,"index_mut","","",30],[10,"new_ones","","Builds a vector filled with ones.",30],[10,"new_random","","Builds a vector filled with random values.",30],[10,"iter","","",30],[10,"iter_mut","","",30],[10,"axpy","","",30],[10,"canonical_basis_with_dim","","Computes the canonical basis for the given dimension. A canonical basis is a set of\nvectors, mutually orthogonal, with all its component equal to 0.0 except one which is equal\nto 1.0.",30],[10,"orthogonal_subspace_basis","","Computes a basis of the space orthogonal to the vector. If the input vector is of dimension\n`n`, this will return `n - 1` vectors.",30],[10,"mul","","",30],[10,"div","","",30],[10,"add","","",30],[10,"sub","","",30],[10,"neg","","",30],[10,"dot","","",30],[10,"sqnorm","","",30],[10,"normalize_cpy","","",30],[10,"normalize","","",30],[10,"approx_epsilon","","",30],[10,"approx_ulps","","",30],[10,"approx_eq_eps","","",30],[10,"approx_eq_ulps","","",30],[10,"mul","","",30],[10,"div","","",30],[10,"add","","",30],[10,"sub","","",30],[10,"from_elem","","Builds a vector filled with a constant.",30],[10,"from_slice","","Builds a vector filled with the components provided by a vector.",30],[10,"from_fn","","Builds a vector filled with the result of a function.",30],[10,"from_iter","","",30],[10,"fmt","","",31],[10,"rand","","",31],[10,"clone","","",31],[10,"decode","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"new","","Creates a new vector.",31],[10,"new_repeat","","Creates a new vector. The parameter is not taken in account.",31],[10,"fmt","","",10],[10,"rand","","",10],[10,"hash","","",10],[10,"clone","","",10],[10,"decode","","",10],[10,"encode","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"new","","Creates a new vector.",10],[10,"inf","","",10],[10,"sup","","",10],[10,"partial_cmp","","",10],[10,"partial_lt","","",10],[10,"partial_le","","",10],[10,"partial_gt","","",10],[10,"partial_ge","","",10],[10,"x","","Create a unit vector with its `$compN` component equal to 1.0.",10],[10,"from","","",10],[10,"as_array","","View this vector as an array.",10],[10,"as_array_mut","","View this vector as a mutable array.",10],[10,"from_array_ref","","View an array as a vector.",10],[10,"from_array_mut","","View an array as a vector.",10],[10,"index","","",10],[10,"index_mut","","",10],[10,"shape","","",10],[10,"at","","",10],[10,"set","","",10],[10,"swap","","",10],[10,"unsafe_at","","",10],[10,"unsafe_set","","",10],[10,"at_fast","","Unsafe read access to a vector element by index.",10],[10,"set_fast","","Unsafe write access to a vector element by index.",10],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",10],[10,"dim","","",10],[10,"len","","",10],[10,"add","","",10],[10,"sub","","",10],[10,"mul","","",10],[10,"div","","",10],[10,"add","","",10],[10,"sub","","",10],[10,"mul","","",10],[10,"div","","",10],[10,"neg","","",10],[10,"dot","","",10],[10,"mul_s","","",10],[10,"div_s","","",10],[10,"add_s","","",10],[10,"sub_s","","",10],[10,"translation","","",10],[10,"inv_translation","","",10],[10,"append_translation","","",10],[10,"append_translation_cpy","","",10],[10,"prepend_translation","","",10],[10,"prepend_translation_cpy","","",10],[10,"set_translation","","",10],[10,"sqnorm","","",10],[10,"normalize_cpy","","",10],[10,"normalize","","",10],[10,"approx_epsilon","","",10],[10,"approx_ulps","","",10],[10,"approx_eq","","",10],[10,"approx_eq_eps","","",10],[10,"approx_eq_ulps","","",10],[10,"one","","",10],[10,"zero","","",10],[10,"is_zero","","",10],[10,"from_iter","","",10],[10,"max_value","","",10],[10,"min_value","","",10],[10,"axpy","","",10],[10,"iter","","",10],[10,"iter_mut","","",10],[10,"to_homogeneous","","",10],[10,"from","","",10],[10,"translate","","",10],[10,"inv_translate","","",10],[10,"rotate","","",10],[10,"inv_rotate","","",10],[10,"rotate","","",16],[10,"inv_rotate","","",16],[10,"transform","","",10],[10,"inv_transform","","",10],[10,"to_pnt","","",10],[10,"as_pnt","","",10],[10,"to_pnt","","",10],[10,"as_pnt","","",10],[10,"abs","","",10],[10,"fmt","","",11],[10,"rand","","",11],[10,"hash","","",11],[10,"clone","","",11],[10,"decode","","",11],[10,"encode","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"new","","Creates a new vector.",11],[10,"inf","","",11],[10,"sup","","",11],[10,"partial_cmp","","",11],[10,"partial_lt","","",11],[10,"partial_le","","",11],[10,"partial_gt","","",11],[10,"partial_ge","","",11],[10,"x","","Create a unit vector with its `$compN` component equal to 1.0.",11],[10,"y","","Create a unit vector with its `$compN` component equal to 1.0.",11],[10,"from","","",11],[10,"as_array","","View this vector as an array.",11],[10,"as_array_mut","","View this vector as a mutable array.",11],[10,"from_array_ref","","View an array as a vector.",11],[10,"from_array_mut","","View an array as a vector.",11],[10,"index","","",11],[10,"index_mut","","",11],[10,"shape","","",11],[10,"at","","",11],[10,"set","","",11],[10,"swap","","",11],[10,"unsafe_at","","",11],[10,"unsafe_set","","",11],[10,"at_fast","","Unsafe read access to a vector element by index.",11],[10,"set_fast","","Unsafe write access to a vector element by index.",11],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",11],[10,"dim","","",11],[10,"len","","",11],[10,"add","","",11],[10,"sub","","",11],[10,"mul","","",11],[10,"div","","",11],[10,"add","","",11],[10,"sub","","",11],[10,"mul","","",11],[10,"div","","",11],[10,"neg","","",11],[10,"dot","","",11],[10,"mul_s","","",11],[10,"div_s","","",11],[10,"add_s","","",11],[10,"sub_s","","",11],[10,"translation","","",11],[10,"inv_translation","","",11],[10,"append_translation","","",11],[10,"append_translation_cpy","","",11],[10,"prepend_translation","","",11],[10,"prepend_translation_cpy","","",11],[10,"set_translation","","",11],[10,"sqnorm","","",11],[10,"normalize_cpy","","",11],[10,"normalize","","",11],[10,"approx_epsilon","","",11],[10,"approx_ulps","","",11],[10,"approx_eq","","",11],[10,"approx_eq_eps","","",11],[10,"approx_eq_ulps","","",11],[10,"one","","",11],[10,"zero","","",11],[10,"is_zero","","",11],[10,"from_iter","","",11],[10,"max_value","","",11],[10,"min_value","","",11],[10,"axpy","","",11],[10,"iter","","",11],[10,"iter_mut","","",11],[10,"to_homogeneous","","",11],[10,"from","","",11],[10,"translate","","",11],[10,"inv_translate","","",11],[10,"rotate","","",11],[10,"inv_rotate","","",11],[10,"rotate","","",17],[10,"inv_rotate","","",17],[10,"transform","","",11],[10,"inv_transform","","",11],[10,"to_pnt","","",11],[10,"as_pnt","","",11],[10,"to_pnt","","",11],[10,"as_pnt","","",11],[10,"abs","","",11],[10,"fmt","","",12],[10,"rand","","",12],[10,"hash","","",12],[10,"clone","","",12],[10,"decode","","",12],[10,"encode","","",12],[10,"eq","","",12],[10,"ne","","",12],[10,"new","","Creates a new vector.",12],[10,"inf","","",12],[10,"sup","","",12],[10,"partial_cmp","","",12],[10,"partial_lt","","",12],[10,"partial_le","","",12],[10,"partial_gt","","",12],[10,"partial_ge","","",12],[10,"x","","Create a unit vector with its `$compN` component equal to 1.0.",12],[10,"y","","Create a unit vector with its `$compN` component equal to 1.0.",12],[10,"z","","Create a unit vector with its `$compN` component equal to 1.0.",12],[10,"from","","",12],[10,"as_array","","View this vector as an array.",12],[10,"as_array_mut","","View this vector as a mutable array.",12],[10,"from_array_ref","","View an array as a vector.",12],[10,"from_array_mut","","View an array as a vector.",12],[10,"index","","",12],[10,"index_mut","","",12],[10,"shape","","",12],[10,"at","","",12],[10,"set","","",12],[10,"swap","","",12],[10,"unsafe_at","","",12],[10,"unsafe_set","","",12],[10,"at_fast","","Unsafe read access to a vector element by index.",12],[10,"set_fast","","Unsafe write access to a vector element by index.",12],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",12],[10,"dim","","",12],[10,"len","","",12],[10,"add","","",12],[10,"sub","","",12],[10,"mul","","",12],[10,"div","","",12],[10,"add","","",12],[10,"sub","","",12],[10,"mul","","",12],[10,"div","","",12],[10,"neg","","",12],[10,"dot","","",12],[10,"mul_s","","",12],[10,"div_s","","",12],[10,"add_s","","",12],[10,"sub_s","","",12],[10,"translation","","",12],[10,"inv_translation","","",12],[10,"append_translation","","",12],[10,"append_translation_cpy","","",12],[10,"prepend_translation","","",12],[10,"prepend_translation_cpy","","",12],[10,"set_translation","","",12],[10,"sqnorm","","",12],[10,"normalize_cpy","","",12],[10,"normalize","","",12],[10,"approx_epsilon","","",12],[10,"approx_ulps","","",12],[10,"approx_eq","","",12],[10,"approx_eq_eps","","",12],[10,"approx_eq_ulps","","",12],[10,"one","","",12],[10,"zero","","",12],[10,"is_zero","","",12],[10,"from_iter","","",12],[10,"max_value","","",12],[10,"min_value","","",12],[10,"axpy","","",12],[10,"iter","","",12],[10,"iter_mut","","",12],[10,"to_homogeneous","","",12],[10,"from","","",12],[10,"translate","","",12],[10,"inv_translate","","",12],[10,"rotate","","",12],[10,"inv_rotate","","",12],[10,"rotate","","",18],[10,"inv_rotate","","",18],[10,"transform","","",12],[10,"inv_transform","","",12],[10,"to_pnt","","",12],[10,"as_pnt","","",12],[10,"to_pnt","","",12],[10,"as_pnt","","",12],[10,"abs","","",12],[10,"fmt","","",13],[10,"rand","","",13],[10,"hash","","",13],[10,"clone","","",13],[10,"decode","","",13],[10,"encode","","",13],[10,"eq","","",13],[10,"ne","","",13],[10,"new","","Creates a new vector.",13],[10,"inf","","",13],[10,"sup","","",13],[10,"partial_cmp","","",13],[10,"partial_lt","","",13],[10,"partial_le","","",13],[10,"partial_gt","","",13],[10,"partial_ge","","",13],[10,"x","","Create a unit vector with its `$compN` component equal to 1.0.",13],[10,"y","","Create a unit vector with its `$compN` component equal to 1.0.",13],[10,"z","","Create a unit vector with its `$compN` component equal to 1.0.",13],[10,"w","","Create a unit vector with its `$compN` component equal to 1.0.",13],[10,"from","","",13],[10,"as_array","","View this vector as an array.",13],[10,"as_array_mut","","View this vector as a mutable array.",13],[10,"from_array_ref","","View an array as a vector.",13],[10,"from_array_mut","","View an array as a vector.",13],[10,"index","","",13],[10,"index_mut","","",13],[10,"shape","","",13],[10,"at","","",13],[10,"set","","",13],[10,"swap","","",13],[10,"unsafe_at","","",13],[10,"unsafe_set","","",13],[10,"at_fast","","Unsafe read access to a vector element by index.",13],[10,"set_fast","","Unsafe write access to a vector element by index.",13],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",13],[10,"dim","","",13],[10,"len","","",13],[10,"canonical_basis","","",13],[10,"orthonormal_subspace_basis","","",13],[10,"canonical_basis_element","","",13],[10,"add","","",13],[10,"sub","","",13],[10,"mul","","",13],[10,"div","","",13],[10,"add","","",13],[10,"sub","","",13],[10,"mul","","",13],[10,"div","","",13],[10,"neg","","",13],[10,"dot","","",13],[10,"mul_s","","",13],[10,"div_s","","",13],[10,"add_s","","",13],[10,"sub_s","","",13],[10,"translation","","",13],[10,"inv_translation","","",13],[10,"append_translation","","",13],[10,"append_translation_cpy","","",13],[10,"prepend_translation","","",13],[10,"prepend_translation_cpy","","",13],[10,"set_translation","","",13],[10,"sqnorm","","",13],[10,"normalize_cpy","","",13],[10,"normalize","","",13],[10,"approx_epsilon","","",13],[10,"approx_ulps","","",13],[10,"approx_eq","","",13],[10,"approx_eq_eps","","",13],[10,"approx_eq_ulps","","",13],[10,"one","","",13],[10,"zero","","",13],[10,"is_zero","","",13],[10,"from_iter","","",13],[10,"max_value","","",13],[10,"min_value","","",13],[10,"axpy","","",13],[10,"iter","","",13],[10,"iter_mut","","",13],[10,"to_homogeneous","","",13],[10,"from","","",13],[10,"translate","","",13],[10,"inv_translate","","",13],[10,"rotate","","",13],[10,"inv_rotate","","",13],[10,"rotate","","",19],[10,"inv_rotate","","",19],[10,"transform","","",13],[10,"inv_transform","","",13],[10,"to_pnt","","",13],[10,"as_pnt","","",13],[10,"to_pnt","","",13],[10,"as_pnt","","",13],[10,"abs","","",13],[10,"fmt","","",14],[10,"rand","","",14],[10,"hash","","",14],[10,"clone","","",14],[10,"decode","","",14],[10,"encode","","",14],[10,"eq","","",14],[10,"ne","","",14],[10,"new","","Creates a new vector.",14],[10,"inf","","",14],[10,"sup","","",14],[10,"partial_cmp","","",14],[10,"partial_lt","","",14],[10,"partial_le","","",14],[10,"partial_gt","","",14],[10,"partial_ge","","",14],[10,"x","","Create a unit vector with its `$compN` component equal to 1.0.",14],[10,"y","","Create a unit vector with its `$compN` component equal to 1.0.",14],[10,"z","","Create a unit vector with its `$compN` component equal to 1.0.",14],[10,"w","","Create a unit vector with its `$compN` component equal to 1.0.",14],[10,"a","","Create a unit vector with its `$compN` component equal to 1.0.",14],[10,"from","","",14],[10,"as_array","","View this vector as an array.",14],[10,"as_array_mut","","View this vector as a mutable array.",14],[10,"from_array_ref","","View an array as a vector.",14],[10,"from_array_mut","","View an array as a vector.",14],[10,"index","","",14],[10,"index_mut","","",14],[10,"shape","","",14],[10,"at","","",14],[10,"set","","",14],[10,"swap","","",14],[10,"unsafe_at","","",14],[10,"unsafe_set","","",14],[10,"at_fast","","Unsafe read access to a vector element by index.",14],[10,"set_fast","","Unsafe write access to a vector element by index.",14],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",14],[10,"dim","","",14],[10,"len","","",14],[10,"canonical_basis","","",14],[10,"orthonormal_subspace_basis","","",14],[10,"canonical_basis_element","","",14],[10,"add","","",14],[10,"sub","","",14],[10,"mul","","",14],[10,"div","","",14],[10,"add","","",14],[10,"sub","","",14],[10,"mul","","",14],[10,"div","","",14],[10,"neg","","",14],[10,"dot","","",14],[10,"mul_s","","",14],[10,"div_s","","",14],[10,"add_s","","",14],[10,"sub_s","","",14],[10,"translation","","",14],[10,"inv_translation","","",14],[10,"append_translation","","",14],[10,"append_translation_cpy","","",14],[10,"prepend_translation","","",14],[10,"prepend_translation_cpy","","",14],[10,"set_translation","","",14],[10,"sqnorm","","",14],[10,"normalize_cpy","","",14],[10,"normalize","","",14],[10,"approx_epsilon","","",14],[10,"approx_ulps","","",14],[10,"approx_eq","","",14],[10,"approx_eq_eps","","",14],[10,"approx_eq_ulps","","",14],[10,"one","","",14],[10,"zero","","",14],[10,"is_zero","","",14],[10,"from_iter","","",14],[10,"max_value","","",14],[10,"min_value","","",14],[10,"axpy","","",14],[10,"iter","","",14],[10,"iter_mut","","",14],[10,"to_homogeneous","","",14],[10,"from","","",14],[10,"translate","","",14],[10,"inv_translate","","",14],[10,"rotate","","",14],[10,"inv_rotate","","",14],[10,"rotate","","",20],[10,"inv_rotate","","",20],[10,"transform","","",14],[10,"inv_transform","","",14],[10,"to_pnt","","",14],[10,"as_pnt","","",14],[10,"to_pnt","","",14],[10,"as_pnt","","",14],[10,"abs","","",14],[10,"fmt","","",15],[10,"rand","","",15],[10,"hash","","",15],[10,"clone","","",15],[10,"decode","","",15],[10,"encode","","",15],[10,"eq","","",15],[10,"ne","","",15],[10,"new","","Creates a new vector.",15],[10,"inf","","",15],[10,"sup","","",15],[10,"partial_cmp","","",15],[10,"partial_lt","","",15],[10,"partial_le","","",15],[10,"partial_gt","","",15],[10,"partial_ge","","",15],[10,"x","","Create a unit vector with its `$compN` component equal to 1.0.",15],[10,"y","","Create a unit vector with its `$compN` component equal to 1.0.",15],[10,"z","","Create a unit vector with its `$compN` component equal to 1.0.",15],[10,"w","","Create a unit vector with its `$compN` component equal to 1.0.",15],[10,"a","","Create a unit vector with its `$compN` component equal to 1.0.",15],[10,"b","","Create a unit vector with its `$compN` component equal to 1.0.",15],[10,"from","","",15],[10,"as_array","","View this vector as an array.",15],[10,"as_array_mut","","View this vector as a mutable array.",15],[10,"from_array_ref","","View an array as a vector.",15],[10,"from_array_mut","","View an array as a vector.",15],[10,"index","","",15],[10,"index_mut","","",15],[10,"shape","","",15],[10,"at","","",15],[10,"set","","",15],[10,"swap","","",15],[10,"unsafe_at","","",15],[10,"unsafe_set","","",15],[10,"at_fast","","Unsafe read access to a vector element by index.",15],[10,"set_fast","","Unsafe write access to a vector element by index.",15],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",15],[10,"dim","","",15],[10,"len","","",15],[10,"canonical_basis","","",15],[10,"orthonormal_subspace_basis","","",15],[10,"canonical_basis_element","","",15],[10,"add","","",15],[10,"sub","","",15],[10,"mul","","",15],[10,"div","","",15],[10,"add","","",15],[10,"sub","","",15],[10,"mul","","",15],[10,"div","","",15],[10,"neg","","",15],[10,"dot","","",15],[10,"mul_s","","",15],[10,"div_s","","",15],[10,"add_s","","",15],[10,"sub_s","","",15],[10,"translation","","",15],[10,"inv_translation","","",15],[10,"append_translation","","",15],[10,"append_translation_cpy","","",15],[10,"prepend_translation","","",15],[10,"prepend_translation_cpy","","",15],[10,"set_translation","","",15],[10,"sqnorm","","",15],[10,"normalize_cpy","","",15],[10,"normalize","","",15],[10,"approx_epsilon","","",15],[10,"approx_ulps","","",15],[10,"approx_eq","","",15],[10,"approx_eq_eps","","",15],[10,"approx_eq_ulps","","",15],[10,"one","","",15],[10,"zero","","",15],[10,"is_zero","","",15],[10,"from_iter","","",15],[10,"max_value","","",15],[10,"min_value","","",15],[10,"axpy","","",15],[10,"iter","","",15],[10,"iter_mut","","",15],[10,"translate","","",15],[10,"inv_translate","","",15],[10,"rotate","","",15],[10,"inv_rotate","","",15],[10,"rotate","","",21],[10,"inv_rotate","","",21],[10,"transform","","",15],[10,"inv_transform","","",15],[10,"to_pnt","","",15],[10,"as_pnt","","",15],[10,"to_pnt","","",15],[10,"as_pnt","","",15],[10,"abs","","",15],[10,"fmt","","",32],[10,"rand","","",32],[10,"clone","","",32],[10,"decode","","",32],[10,"eq","","",32],[10,"ne","","",32],[10,"new","","Creates a new point.",32],[10,"new_repeat","","Creates a new point. The parameter is not taken in account.",32],[10,"fmt","","",16],[10,"rand","","",16],[10,"hash","","",16],[10,"clone","","",16],[10,"decode","","",16],[10,"encode","","",16],[10,"eq","","",16],[10,"ne","","",16],[10,"new","","Creates a new vector.",16],[10,"orig","","",16],[10,"is_orig","","",16],[10,"inf","","",16],[10,"sup","","",16],[10,"partial_cmp","","",16],[10,"partial_lt","","",16],[10,"partial_le","","",16],[10,"partial_gt","","",16],[10,"partial_ge","","",16],[10,"mul","","",16],[10,"div","","",16],[10,"add","","",16],[10,"sub","","",16],[10,"from","","",16],[10,"as_array","","View this vector as an array.",16],[10,"as_array_mut","","View this vector as a mutable array.",16],[10,"from_array_ref","","View an array as a vector.",16],[10,"from_array_mut","","View an array as a vector.",16],[10,"index","","",16],[10,"index_mut","","",16],[10,"shape","","",16],[10,"at","","",16],[10,"set","","",16],[10,"swap","","",16],[10,"unsafe_at","","",16],[10,"unsafe_set","","",16],[10,"at_fast","","Unsafe read access to a vector element by index.",16],[10,"set_fast","","Unsafe write access to a vector element by index.",16],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",16],[10,"dim","","",16],[10,"len","","",16],[10,"to_vec","","Converts this point to its associated vector.",16],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",16],[10,"to_vec","","",16],[10,"as_vec","","",16],[10,"set_coords","","",16],[10,"sub","","",16],[10,"neg","","",16],[10,"add","","",16],[10,"sub","","",16],[10,"mul_s","","",16],[10,"div_s","","",16],[10,"add_s","","",16],[10,"sub_s","","",16],[10,"approx_epsilon","","",16],[10,"approx_ulps","","",16],[10,"approx_eq","","",16],[10,"approx_eq_eps","","",16],[10,"approx_eq_ulps","","",16],[10,"from_iter","","",16],[10,"max_value","","",16],[10,"min_value","","",16],[10,"axpy","","",16],[10,"iter","","",16],[10,"iter_mut","","",16],[10,"to_homogeneous","","",16],[10,"from","","",16],[10,"fmt","","",17],[10,"rand","","",17],[10,"hash","","",17],[10,"clone","","",17],[10,"decode","","",17],[10,"encode","","",17],[10,"eq","","",17],[10,"ne","","",17],[10,"new","","Creates a new vector.",17],[10,"orig","","",17],[10,"is_orig","","",17],[10,"inf","","",17],[10,"sup","","",17],[10,"partial_cmp","","",17],[10,"partial_lt","","",17],[10,"partial_le","","",17],[10,"partial_gt","","",17],[10,"partial_ge","","",17],[10,"mul","","",17],[10,"div","","",17],[10,"add","","",17],[10,"sub","","",17],[10,"from","","",17],[10,"as_array","","View this vector as an array.",17],[10,"as_array_mut","","View this vector as a mutable array.",17],[10,"from_array_ref","","View an array as a vector.",17],[10,"from_array_mut","","View an array as a vector.",17],[10,"index","","",17],[10,"index_mut","","",17],[10,"shape","","",17],[10,"at","","",17],[10,"set","","",17],[10,"swap","","",17],[10,"unsafe_at","","",17],[10,"unsafe_set","","",17],[10,"at_fast","","Unsafe read access to a vector element by index.",17],[10,"set_fast","","Unsafe write access to a vector element by index.",17],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",17],[10,"dim","","",17],[10,"len","","",17],[10,"to_vec","","Converts this point to its associated vector.",17],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",17],[10,"to_vec","","",17],[10,"as_vec","","",17],[10,"set_coords","","",17],[10,"sub","","",17],[10,"neg","","",17],[10,"add","","",17],[10,"sub","","",17],[10,"mul_s","","",17],[10,"div_s","","",17],[10,"add_s","","",17],[10,"sub_s","","",17],[10,"approx_epsilon","","",17],[10,"approx_ulps","","",17],[10,"approx_eq","","",17],[10,"approx_eq_eps","","",17],[10,"approx_eq_ulps","","",17],[10,"from_iter","","",17],[10,"max_value","","",17],[10,"min_value","","",17],[10,"axpy","","",17],[10,"iter","","",17],[10,"iter_mut","","",17],[10,"to_homogeneous","","",17],[10,"from","","",17],[10,"fmt","","",18],[10,"rand","","",18],[10,"hash","","",18],[10,"clone","","",18],[10,"decode","","",18],[10,"encode","","",18],[10,"eq","","",18],[10,"ne","","",18],[10,"new","","Creates a new vector.",18],[10,"orig","","",18],[10,"is_orig","","",18],[10,"inf","","",18],[10,"sup","","",18],[10,"partial_cmp","","",18],[10,"partial_lt","","",18],[10,"partial_le","","",18],[10,"partial_gt","","",18],[10,"partial_ge","","",18],[10,"mul","","",18],[10,"div","","",18],[10,"add","","",18],[10,"sub","","",18],[10,"from","","",18],[10,"as_array","","View this vector as an array.",18],[10,"as_array_mut","","View this vector as a mutable array.",18],[10,"from_array_ref","","View an array as a vector.",18],[10,"from_array_mut","","View an array as a vector.",18],[10,"index","","",18],[10,"index_mut","","",18],[10,"shape","","",18],[10,"at","","",18],[10,"set","","",18],[10,"swap","","",18],[10,"unsafe_at","","",18],[10,"unsafe_set","","",18],[10,"at_fast","","Unsafe read access to a vector element by index.",18],[10,"set_fast","","Unsafe write access to a vector element by index.",18],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",18],[10,"dim","","",18],[10,"len","","",18],[10,"to_vec","","Converts this point to its associated vector.",18],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",18],[10,"to_vec","","",18],[10,"as_vec","","",18],[10,"set_coords","","",18],[10,"sub","","",18],[10,"neg","","",18],[10,"add","","",18],[10,"sub","","",18],[10,"mul_s","","",18],[10,"div_s","","",18],[10,"add_s","","",18],[10,"sub_s","","",18],[10,"approx_epsilon","","",18],[10,"approx_ulps","","",18],[10,"approx_eq","","",18],[10,"approx_eq_eps","","",18],[10,"approx_eq_ulps","","",18],[10,"from_iter","","",18],[10,"max_value","","",18],[10,"min_value","","",18],[10,"axpy","","",18],[10,"iter","","",18],[10,"iter_mut","","",18],[10,"to_homogeneous","","",18],[10,"from","","",18],[10,"fmt","","",19],[10,"rand","","",19],[10,"hash","","",19],[10,"clone","","",19],[10,"decode","","",19],[10,"encode","","",19],[10,"eq","","",19],[10,"ne","","",19],[10,"new","","Creates a new vector.",19],[10,"orig","","",19],[10,"is_orig","","",19],[10,"inf","","",19],[10,"sup","","",19],[10,"partial_cmp","","",19],[10,"partial_lt","","",19],[10,"partial_le","","",19],[10,"partial_gt","","",19],[10,"partial_ge","","",19],[10,"mul","","",19],[10,"div","","",19],[10,"add","","",19],[10,"sub","","",19],[10,"from","","",19],[10,"as_array","","View this vector as an array.",19],[10,"as_array_mut","","View this vector as a mutable array.",19],[10,"from_array_ref","","View an array as a vector.",19],[10,"from_array_mut","","View an array as a vector.",19],[10,"index","","",19],[10,"index_mut","","",19],[10,"shape","","",19],[10,"at","","",19],[10,"set","","",19],[10,"swap","","",19],[10,"unsafe_at","","",19],[10,"unsafe_set","","",19],[10,"at_fast","","Unsafe read access to a vector element by index.",19],[10,"set_fast","","Unsafe write access to a vector element by index.",19],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",19],[10,"dim","","",19],[10,"len","","",19],[10,"to_vec","","Converts this point to its associated vector.",19],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",19],[10,"to_vec","","",19],[10,"as_vec","","",19],[10,"set_coords","","",19],[10,"sub","","",19],[10,"neg","","",19],[10,"add","","",19],[10,"sub","","",19],[10,"mul_s","","",19],[10,"div_s","","",19],[10,"add_s","","",19],[10,"sub_s","","",19],[10,"approx_epsilon","","",19],[10,"approx_ulps","","",19],[10,"approx_eq","","",19],[10,"approx_eq_eps","","",19],[10,"approx_eq_ulps","","",19],[10,"from_iter","","",19],[10,"max_value","","",19],[10,"min_value","","",19],[10,"axpy","","",19],[10,"iter","","",19],[10,"iter_mut","","",19],[10,"to_homogeneous","","",19],[10,"from","","",19],[10,"fmt","","",20],[10,"rand","","",20],[10,"hash","","",20],[10,"clone","","",20],[10,"decode","","",20],[10,"encode","","",20],[10,"eq","","",20],[10,"ne","","",20],[10,"new","","Creates a new vector.",20],[10,"orig","","",20],[10,"is_orig","","",20],[10,"inf","","",20],[10,"sup","","",20],[10,"partial_cmp","","",20],[10,"partial_lt","","",20],[10,"partial_le","","",20],[10,"partial_gt","","",20],[10,"partial_ge","","",20],[10,"mul","","",20],[10,"div","","",20],[10,"add","","",20],[10,"sub","","",20],[10,"from","","",20],[10,"as_array","","View this vector as an array.",20],[10,"as_array_mut","","View this vector as a mutable array.",20],[10,"from_array_ref","","View an array as a vector.",20],[10,"from_array_mut","","View an array as a vector.",20],[10,"index","","",20],[10,"index_mut","","",20],[10,"shape","","",20],[10,"at","","",20],[10,"set","","",20],[10,"swap","","",20],[10,"unsafe_at","","",20],[10,"unsafe_set","","",20],[10,"at_fast","","Unsafe read access to a vector element by index.",20],[10,"set_fast","","Unsafe write access to a vector element by index.",20],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",20],[10,"dim","","",20],[10,"len","","",20],[10,"to_vec","","Converts this point to its associated vector.",20],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",20],[10,"to_vec","","",20],[10,"as_vec","","",20],[10,"set_coords","","",20],[10,"sub","","",20],[10,"neg","","",20],[10,"add","","",20],[10,"sub","","",20],[10,"mul_s","","",20],[10,"div_s","","",20],[10,"add_s","","",20],[10,"sub_s","","",20],[10,"approx_epsilon","","",20],[10,"approx_ulps","","",20],[10,"approx_eq","","",20],[10,"approx_eq_eps","","",20],[10,"approx_eq_ulps","","",20],[10,"from_iter","","",20],[10,"max_value","","",20],[10,"min_value","","",20],[10,"axpy","","",20],[10,"iter","","",20],[10,"iter_mut","","",20],[10,"to_homogeneous","","",20],[10,"from","","",20],[10,"fmt","","",21],[10,"rand","","",21],[10,"hash","","",21],[10,"clone","","",21],[10,"decode","","",21],[10,"encode","","",21],[10,"eq","","",21],[10,"ne","","",21],[10,"new","","Creates a new vector.",21],[10,"orig","","",21],[10,"is_orig","","",21],[10,"inf","","",21],[10,"sup","","",21],[10,"partial_cmp","","",21],[10,"partial_lt","","",21],[10,"partial_le","","",21],[10,"partial_gt","","",21],[10,"partial_ge","","",21],[10,"mul","","",21],[10,"div","","",21],[10,"add","","",21],[10,"sub","","",21],[10,"from","","",21],[10,"as_array","","View this vector as an array.",21],[10,"as_array_mut","","View this vector as a mutable array.",21],[10,"from_array_ref","","View an array as a vector.",21],[10,"from_array_mut","","View an array as a vector.",21],[10,"index","","",21],[10,"index_mut","","",21],[10,"shape","","",21],[10,"at","","",21],[10,"set","","",21],[10,"swap","","",21],[10,"unsafe_at","","",21],[10,"unsafe_set","","",21],[10,"at_fast","","Unsafe read access to a vector element by index.",21],[10,"set_fast","","Unsafe write access to a vector element by index.",21],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",21],[10,"dim","","",21],[10,"len","","",21],[10,"to_vec","","Converts this point to its associated vector.",21],[10,"as_vec","","Converts a reference to this point to a reference to its associated vector.",21],[10,"to_vec","","",21],[10,"as_vec","","",21],[10,"set_coords","","",21],[10,"sub","","",21],[10,"neg","","",21],[10,"add","","",21],[10,"sub","","",21],[10,"mul_s","","",21],[10,"div_s","","",21],[10,"add_s","","",21],[10,"sub_s","","",21],[10,"approx_epsilon","","",21],[10,"approx_ulps","","",21],[10,"approx_eq","","",21],[10,"approx_eq_eps","","",21],[10,"approx_eq_ulps","","",21],[10,"from_iter","","",21],[10,"max_value","","",21],[10,"min_value","","",21],[10,"axpy","","",21],[10,"iter","","",21],[10,"iter_mut","","",21],[10,"fmt","","",22],[10,"rand","","",22],[10,"hash","","",22],[10,"clone","","",22],[10,"decode","","",22],[10,"encode","","",22],[10,"eq","","",22],[10,"ne","","",22],[10,"new","","Creates a new quaternion from its components.",22],[10,"vector","","The vector part `(i, j, k)` of this quaternion.",22],[10,"scalar","","The scalar part `w` of this quaternion.",22],[10,"conjugate","","Replaces this quaternion by its conjugate.",22],[10,"inv_cpy","","",22],[10,"inv","","",22],[10,"sqnorm","","",22],[10,"normalize_cpy","","",22],[10,"normalize","","",22],[10,"mul","","",22],[10,"div","","",22],[10,"fmt","","",33],[10,"hash","","",33],[10,"clone","","",33],[10,"decode","","",33],[10,"encode","","",33],[10,"eq","","",33],[10,"ne","","",33],[10,"new","","Creates a new unit quaternion from the axis-angle representation of a rotation.",33],[10,"new_with_quat","","Creates a new unit quaternion from a quaternion.",33],[10,"new_with_euler_angles","","Creates a new unit quaternion from Euler angles.",33],[10,"to_rot","","Builds a rotation matrix from this quaternion.",33],[10,"new_with_unit_quat","","Creates a new unit quaternion from a quaternion.",33],[10,"quat","","The `Quat` representation of this unit quaternion.",33],[10,"one","","",33],[10,"inv_cpy","","",33],[10,"inv","","",33],[10,"rand","","",33],[10,"approx_epsilon","","",33],[10,"approx_ulps","","",33],[10,"approx_eq_eps","","",33],[10,"approx_eq_ulps","","",33],[10,"div","","",33],[10,"mul","","",33],[10,"mul","","",33],[10,"mul","","",33],[10,"mul","","",12],[10,"mul","","",18],[10,"rotation","","",33],[10,"inv_rotation","","",33],[10,"append_rotation","","",33],[10,"append_rotation_cpy","","",33],[10,"prepend_rotation","","",33],[10,"prepend_rotation_cpy","","",33],[10,"set_rotation","","",33],[10,"rotate","","",33],[10,"inv_rotate","","",33],[10,"rotate","","",33],[10,"inv_rotate","","",33],[10,"transform","","",33],[10,"inv_transform","","",33],[10,"transform","","",33],[10,"inv_transform","","",33],[10,"inf","","",22],[10,"sup","","",22],[10,"partial_cmp","","",22],[10,"partial_lt","","",22],[10,"partial_le","","",22],[10,"partial_gt","","",22],[10,"partial_ge","","",22],[10,"w","","Create a unit vector with its `$compN` component equal to 1.0.",22],[10,"i","","Create a unit vector with its `$compN` component equal to 1.0.",22],[10,"j","","Create a unit vector with its `$compN` component equal to 1.0.",22],[10,"k","","Create a unit vector with its `$compN` component equal to 1.0.",22],[10,"from","","",22],[10,"as_array","","View this vector as an array.",22],[10,"as_array_mut","","View this vector as a mutable array.",22],[10,"from_array_ref","","View an array as a vector.",22],[10,"from_array_mut","","View an array as a vector.",22],[10,"index","","",22],[10,"index_mut","","",22],[10,"shape","","",22],[10,"at","","",22],[10,"set","","",22],[10,"swap","","",22],[10,"unsafe_at","","",22],[10,"unsafe_set","","",22],[10,"at_fast","","Unsafe read access to a vector element by index.",22],[10,"set_fast","","Unsafe write access to a vector element by index.",22],[10,"new_repeat","","Creates a new vector with all its components equal to a given value.",22],[10,"dim","","",22],[10,"len","","",22],[10,"add","","",22],[10,"sub","","",22],[10,"add","","",22],[10,"sub","","",22],[10,"mul","","",22],[10,"div","","",22],[10,"neg","","",22],[10,"mul_s","","",22],[10,"div_s","","",22],[10,"add_s","","",22],[10,"sub_s","","",22],[10,"one","","",22],[10,"zero","","",22],[10,"is_zero","","",22],[10,"approx_epsilon","","",22],[10,"approx_ulps","","",22],[10,"approx_eq","","",22],[10,"approx_eq_eps","","",22],[10,"approx_eq_ulps","","",22],[10,"from_iter","","",22],[10,"max_value","","",22],[10,"min_value","","",22],[10,"axpy","","",22],[10,"iter","","",22],[10,"iter_mut","","",22],[10,"dim","","",33],[10,"fmt","","",34],[10,"rand","","",34],[10,"clone","","",34],[10,"decode","","",34],[10,"eq","","",34],[10,"ne","","",34],[10,"new","","Creates a new identity matrix.",34],[10,"fmt","","",4],[10,"rand","","",4],[10,"hash","","",4],[10,"clone","","",4],[10,"decode","","",4],[10,"encode","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"new_identity","","",4],[10,"new","","",4],[10,"as_array","","View this matrix as a column-major array of arrays.",4],[10,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",4],[10,"from_array_ref","","View a column-major array of array as a vector.",4],[10,"from_array_mut","","View a column-major array of array as a mutable vector.",4],[10,"from","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"mul","","",4],[10,"div","","",4],[10,"abs","","",4],[10,"zero","","",4],[10,"is_zero","","",4],[10,"one","","",4],[10,"iter","","",4],[10,"iter_mut","","",4],[10,"at_fast","","",4],[10,"set_fast","","",4],[10,"dim","","",4],[10,"shape","","",4],[10,"at","","",4],[10,"set","","",4],[10,"swap","","",4],[10,"unsafe_at","","",4],[10,"unsafe_set","","",4],[10,"index","","",4],[10,"index_mut","","",4],[10,"mul","","",4],[10,"mul","","",4],[10,"mul","","",10],[10,"mul","","",4],[10,"mul","","",16],[10,"transpose_cpy","","",4],[10,"transpose","","",4],[10,"approx_epsilon","","",4],[10,"approx_ulps","","",4],[10,"approx_eq_eps","","",4],[10,"approx_eq_ulps","","",4],[10,"nrows","","",4],[10,"set_row","","",4],[10,"row","","",4],[10,"ncols","","",4],[10,"set_col","","",4],[10,"col","","",4],[10,"col_slice","","",4],[10,"row_slice","","",4],[10,"from_diag","","",4],[10,"set_diag","","",4],[10,"diag","","",4],[10,"to_homogeneous","","",4],[10,"from","","",4],[10,"outer","","",10],[10,"eigen_qr","","",4],[10,"fmt","","",5],[10,"rand","","",5],[10,"hash","","",5],[10,"clone","","",5],[10,"decode","","",5],[10,"encode","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"new_identity","","",5],[10,"new","","",5],[10,"as_array","","View this matrix as a column-major array of arrays.",5],[10,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",5],[10,"from_array_ref","","View a column-major array of array as a vector.",5],[10,"from_array_mut","","View a column-major array of array as a mutable vector.",5],[10,"from","","",5],[10,"add","","",5],[10,"sub","","",5],[10,"add","","",5],[10,"sub","","",5],[10,"mul","","",5],[10,"div","","",5],[10,"abs","","",5],[10,"zero","","",5],[10,"is_zero","","",5],[10,"one","","",5],[10,"iter","","",5],[10,"iter_mut","","",5],[10,"dim","","",5],[10,"shape","","",5],[10,"at","","",5],[10,"set","","",5],[10,"swap","","",5],[10,"unsafe_at","","",5],[10,"unsafe_set","","",5],[10,"index","","",5],[10,"index_mut","","",5],[10,"at_fast","","",5],[10,"set_fast","","",5],[10,"transpose_cpy","","",5],[10,"transpose","","",5],[10,"approx_epsilon","","",5],[10,"approx_ulps","","",5],[10,"approx_eq_eps","","",5],[10,"approx_eq_ulps","","",5],[10,"nrows","","",5],[10,"set_row","","",5],[10,"row","","",5],[10,"ncols","","",5],[10,"set_col","","",5],[10,"col","","",5],[10,"col_slice","","",5],[10,"row_slice","","",5],[10,"from_diag","","",5],[10,"set_diag","","",5],[10,"diag","","",5],[10,"to_homogeneous","","",5],[10,"from","","",5],[10,"outer","","",11],[10,"eigen_qr","","",5],[10,"fmt","","",6],[10,"rand","","",6],[10,"hash","","",6],[10,"clone","","",6],[10,"decode","","",6],[10,"encode","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"new_identity","","",6],[10,"new","","",6],[10,"as_array","","View this matrix as a column-major array of arrays.",6],[10,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",6],[10,"from_array_ref","","View a column-major array of array as a vector.",6],[10,"from_array_mut","","View a column-major array of array as a mutable vector.",6],[10,"from","","",6],[10,"add","","",6],[10,"sub","","",6],[10,"add","","",6],[10,"sub","","",6],[10,"mul","","",6],[10,"div","","",6],[10,"abs","","",6],[10,"zero","","",6],[10,"is_zero","","",6],[10,"one","","",6],[10,"iter","","",6],[10,"iter_mut","","",6],[10,"dim","","",6],[10,"shape","","",6],[10,"at","","",6],[10,"set","","",6],[10,"swap","","",6],[10,"unsafe_at","","",6],[10,"unsafe_set","","",6],[10,"index","","",6],[10,"index_mut","","",6],[10,"at_fast","","",6],[10,"set_fast","","",6],[10,"transpose_cpy","","",6],[10,"transpose","","",6],[10,"approx_epsilon","","",6],[10,"approx_ulps","","",6],[10,"approx_eq_eps","","",6],[10,"approx_eq_ulps","","",6],[10,"col_slice","","",6],[10,"row_slice","","",6],[10,"from_diag","","",6],[10,"set_diag","","",6],[10,"diag","","",6],[10,"to_homogeneous","","",6],[10,"from","","",6],[10,"outer","","",12],[10,"eigen_qr","","",6],[10,"fmt","","",7],[10,"rand","","",7],[10,"hash","","",7],[10,"clone","","",7],[10,"decode","","",7],[10,"encode","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"new_identity","","",7],[10,"new","","",7],[10,"as_array","","View this matrix as a column-major array of arrays.",7],[10,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",7],[10,"from_array_ref","","View a column-major array of array as a vector.",7],[10,"from_array_mut","","View a column-major array of array as a mutable vector.",7],[10,"from","","",7],[10,"add","","",7],[10,"sub","","",7],[10,"add","","",7],[10,"sub","","",7],[10,"mul","","",7],[10,"div","","",7],[10,"abs","","",7],[10,"zero","","",7],[10,"is_zero","","",7],[10,"one","","",7],[10,"iter","","",7],[10,"iter_mut","","",7],[10,"dim","","",7],[10,"shape","","",7],[10,"at","","",7],[10,"set","","",7],[10,"swap","","",7],[10,"unsafe_at","","",7],[10,"unsafe_set","","",7],[10,"index","","",7],[10,"index_mut","","",7],[10,"at_fast","","",7],[10,"set_fast","","",7],[10,"mul","","",7],[10,"mul","","",7],[10,"mul","","",13],[10,"mul","","",7],[10,"mul","","",19],[10,"inv_cpy","","",7],[10,"inv","","",7],[10,"transpose_cpy","","",7],[10,"transpose","","",7],[10,"approx_epsilon","","",7],[10,"approx_ulps","","",7],[10,"approx_eq_eps","","",7],[10,"approx_eq_ulps","","",7],[10,"nrows","","",7],[10,"set_row","","",7],[10,"row","","",7],[10,"ncols","","",7],[10,"set_col","","",7],[10,"col","","",7],[10,"col_slice","","",7],[10,"row_slice","","",7],[10,"from_diag","","",7],[10,"set_diag","","",7],[10,"diag","","",7],[10,"to_homogeneous","","",7],[10,"from","","",7],[10,"outer","","",13],[10,"eigen_qr","","",7],[10,"fmt","","",8],[10,"rand","","",8],[10,"hash","","",8],[10,"clone","","",8],[10,"decode","","",8],[10,"encode","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"new_identity","","",8],[10,"new","","",8],[10,"as_array","","View this matrix as a column-major array of arrays.",8],[10,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",8],[10,"from_array_ref","","View a column-major array of array as a vector.",8],[10,"from_array_mut","","View a column-major array of array as a mutable vector.",8],[10,"from","","",8],[10,"abs","","",8],[10,"zero","","",8],[10,"is_zero","","",8],[10,"one","","",8],[10,"add","","",8],[10,"sub","","",8],[10,"add","","",8],[10,"sub","","",8],[10,"mul","","",8],[10,"div","","",8],[10,"iter","","",8],[10,"iter_mut","","",8],[10,"dim","","",8],[10,"shape","","",8],[10,"at","","",8],[10,"set","","",8],[10,"swap","","",8],[10,"unsafe_at","","",8],[10,"unsafe_set","","",8],[10,"index","","",8],[10,"index_mut","","",8],[10,"at_fast","","",8],[10,"set_fast","","",8],[10,"mul","","",8],[10,"mul","","",8],[10,"mul","","",14],[10,"mul","","",8],[10,"mul","","",20],[10,"inv_cpy","","",8],[10,"inv","","",8],[10,"transpose_cpy","","",8],[10,"transpose","","",8],[10,"approx_epsilon","","",8],[10,"approx_ulps","","",8],[10,"approx_eq_eps","","",8],[10,"approx_eq_ulps","","",8],[10,"nrows","","",8],[10,"set_row","","",8],[10,"row","","",8],[10,"ncols","","",8],[10,"set_col","","",8],[10,"col","","",8],[10,"col_slice","","",8],[10,"row_slice","","",8],[10,"from_diag","","",8],[10,"set_diag","","",8],[10,"diag","","",8],[10,"to_homogeneous","","",8],[10,"from","","",8],[10,"outer","","",14],[10,"eigen_qr","","",8],[10,"fmt","","",9],[10,"rand","","",9],[10,"hash","","",9],[10,"clone","","",9],[10,"decode","","",9],[10,"encode","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"new_identity","","",9],[10,"new","","",9],[10,"as_array","","View this matrix as a column-major array of arrays.",9],[10,"as_array_mut","","View this matrix as a column-major mutable array of arrays.",9],[10,"from_array_ref","","View a column-major array of array as a vector.",9],[10,"from_array_mut","","View a column-major array of array as a mutable vector.",9],[10,"from","","",9],[10,"add","","",9],[10,"sub","","",9],[10,"add","","",9],[10,"sub","","",9],[10,"mul","","",9],[10,"div","","",9],[10,"abs","","",9],[10,"zero","","",9],[10,"is_zero","","",9],[10,"one","","",9],[10,"iter","","",9],[10,"iter_mut","","",9],[10,"dim","","",9],[10,"shape","","",9],[10,"at","","",9],[10,"set","","",9],[10,"swap","","",9],[10,"unsafe_at","","",9],[10,"unsafe_set","","",9],[10,"index","","",9],[10,"index_mut","","",9],[10,"at_fast","","",9],[10,"set_fast","","",9],[10,"mul","","",9],[10,"mul","","",9],[10,"mul","","",15],[10,"mul","","",9],[10,"mul","","",21],[10,"inv_cpy","","",9],[10,"inv","","",9],[10,"transpose_cpy","","",9],[10,"transpose","","",9],[10,"approx_epsilon","","",9],[10,"approx_ulps","","",9],[10,"approx_eq_eps","","",9],[10,"approx_eq_ulps","","",9],[10,"nrows","","",9],[10,"set_row","","",9],[10,"row","","",9],[10,"ncols","","",9],[10,"set_col","","",9],[10,"col","","",9],[10,"col_slice","","",9],[10,"row_slice","","",9],[10,"from_diag","","",9],[10,"set_diag","","",9],[10,"diag","","",9],[10,"outer","","",15],[10,"eigen_qr","","",9],[10,"hash","","",35],[10,"fmt","","",35],[10,"clone","","",35],[10,"decode","","",35],[10,"encode","","",35],[10,"eq","","",35],[10,"ne","","",35],[10,"new","","Builds a 2 dimensional rotation matrix from an angle in radian.",35],[10,"rotation","","",35],[10,"inv_rotation","","",35],[10,"append_rotation","","",35],[10,"append_rotation_cpy","","",35],[10,"prepend_rotation","","",35],[10,"prepend_rotation_cpy","","",35],[10,"set_rotation","","",35],[10,"rand","","",35],[10,"absolute_rotate","","",35],[10,"hash","","",36],[10,"fmt","","",36],[10,"clone","","",36],[10,"decode","","",36],[10,"encode","","",36],[10,"eq","","",36],[10,"ne","","",36],[10,"new","","Builds a 3 dimensional rotation matrix from an axis and an angle.",36],[10,"new_with_mat","","Builds a rotation matrix from an orthogonal matrix.",36],[10,"new_with_euler_angles","","Creates a new rotation from Euler angles.",36],[10,"look_at","","Reorient this matrix such that its local `x` axis points to a given point. Note that the\nusually known `look_at` function does the same thing but with the `z` axis. See `look_at_z`\nfor that.",36],[10,"look_at_z","","Reorient this matrix such that its local `z` axis points to a given point.",36],[10,"rotation","","",36],[10,"inv_rotation","","",36],[10,"append_rotation","","",36],[10,"append_rotation_cpy","","",36],[10,"prepend_rotation","","",36],[10,"prepend_rotation_cpy","","",36],[10,"set_rotation","","",36],[10,"rand","","",36],[10,"absolute_rotate","","",36],[10,"hash","","",37],[10,"fmt","","",37],[10,"clone","","",37],[10,"decode","","",37],[10,"encode","","",37],[10,"eq","","",37],[10,"ne","","",37],[10,"absolute_rotate","","",37],[10,"rotation","","",37],[10,"inv_rotation","","",37],[10,"append_rotation","","",37],[10,"append_rotation_cpy","","",37],[10,"prepend_rotation","","",37],[10,"prepend_rotation_cpy","","",37],[10,"set_rotation","","",37],[10,"submat","","",35],[10,"rotate","","",35],[10,"inv_rotate","","",35],[10,"rotate","","",35],[10,"inv_rotate","","",35],[10,"transform","","",35],[10,"inv_transform","","",35],[10,"transform","","",35],[10,"inv_transform","","",35],[10,"dim","","",35],[10,"mul","","",35],[10,"mul","","",35],[10,"mul","","",11],[10,"mul","","",35],[10,"mul","","",17],[10,"one","","",35],[10,"to_rot_mat","","",35],[10,"ncols","","",35],[10,"col","","",35],[10,"set_col","","",35],[10,"nrows","","",35],[10,"row","","",35],[10,"set_row","","",35],[10,"index","","",35],[10,"abs","","",35],[10,"to_homogeneous","","",35],[10,"inv","","",35],[10,"inv_cpy","","",35],[10,"transpose_cpy","","",35],[10,"transpose","","",35],[10,"approx_epsilon","","",35],[10,"approx_ulps","","",35],[10,"approx_eq","","",35],[10,"approx_eq_eps","","",35],[10,"approx_eq_ulps","","",35],[10,"submat","","",36],[10,"rotate","","",36],[10,"inv_rotate","","",36],[10,"rotate","","",36],[10,"inv_rotate","","",36],[10,"transform","","",36],[10,"inv_transform","","",36],[10,"transform","","",36],[10,"inv_transform","","",36],[10,"dim","","",36],[10,"mul","","",36],[10,"mul","","",36],[10,"mul","","",12],[10,"mul","","",36],[10,"mul","","",18],[10,"one","","",36],[10,"to_rot_mat","","",36],[10,"ncols","","",36],[10,"col","","",36],[10,"set_col","","",36],[10,"nrows","","",36],[10,"row","","",36],[10,"set_row","","",36],[10,"index","","",36],[10,"abs","","",36],[10,"to_homogeneous","","",36],[10,"inv","","",36],[10,"inv_cpy","","",36],[10,"transpose_cpy","","",36],[10,"transpose","","",36],[10,"approx_epsilon","","",36],[10,"approx_ulps","","",36],[10,"approx_eq","","",36],[10,"approx_eq_eps","","",36],[10,"approx_eq_ulps","","",36],[10,"submat","","",37],[10,"rotate","","",37],[10,"inv_rotate","","",37],[10,"rotate","","",37],[10,"inv_rotate","","",37],[10,"transform","","",37],[10,"inv_transform","","",37],[10,"transform","","",37],[10,"inv_transform","","",37],[10,"dim","","",37],[10,"mul","","",37],[10,"mul","","",37],[10,"mul","","",13],[10,"mul","","",37],[10,"mul","","",19],[10,"one","","",37],[10,"to_rot_mat","","",37],[10,"ncols","","",37],[10,"col","","",37],[10,"set_col","","",37],[10,"nrows","","",37],[10,"row","","",37],[10,"set_row","","",37],[10,"index","","",37],[10,"abs","","",37],[10,"to_homogeneous","","",37],[10,"inv","","",37],[10,"inv_cpy","","",37],[10,"transpose_cpy","","",37],[10,"transpose","","",37],[10,"approx_epsilon","","",37],[10,"approx_ulps","","",37],[10,"approx_eq","","",37],[10,"approx_eq_eps","","",37],[10,"approx_eq_ulps","","",37],[10,"fmt","","",1],[10,"clone","","",1],[10,"decode","","",1],[10,"encode","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"fmt","","",2],[10,"clone","","",2],[10,"decode","","",2],[10,"encode","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",3],[10,"clone","","",3],[10,"decode","","",3],[10,"encode","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"look_at","","Reorient and translate this transformation such that its local `x` axis points to a given\ndirection.  Note that the usually known `look_at` function does the same thing but with the\n`z` axis. See `look_at_z` for that.",2],[10,"look_at_z","","Reorient and translate this transformation such that its local `z` axis points to a given\ndirection.",2],[10,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",3],[10,"new","","Creates a new isometry from a rotation matrix and a vector.",1],[10,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",1],[10,"to_rot_mat","","",1],[10,"rotation","","",1],[10,"inv_rotation","","",1],[10,"append_rotation","","",1],[10,"append_rotation_cpy","","",1],[10,"prepend_rotation","","",1],[10,"prepend_rotation_cpy","","",1],[10,"set_rotation","","",1],[10,"dim","","",1],[10,"one","","",1],[10,"absolute_rotate","","",1],[10,"rand","","",1],[10,"approx_epsilon","","",1],[10,"approx_ulps","","",1],[10,"approx_eq_eps","","",1],[10,"approx_eq_ulps","","",1],[10,"to_homogeneous","","",1],[10,"inv","","",1],[10,"inv_cpy","","",1],[10,"transform","","",1],[10,"inv_transform","","",1],[10,"transformation","","",1],[10,"inv_transformation","","",1],[10,"append_transformation","","",1],[10,"append_transformation_cpy","","",1],[10,"prepend_transformation","","",1],[10,"prepend_transformation_cpy","","",1],[10,"set_transformation","","",1],[10,"rotate","","",1],[10,"inv_rotate","","",1],[10,"translation","","",1],[10,"inv_translation","","",1],[10,"append_translation","","",1],[10,"append_translation_cpy","","",1],[10,"prepend_translation","","",1],[10,"prepend_translation_cpy","","",1],[10,"set_translation","","",1],[10,"translate","","",1],[10,"inv_translate","","",1],[10,"mul","","",1],[10,"mul","","",1],[10,"mul","","",17],[10,"new","","Creates a new isometry from a rotation matrix and a vector.",2],[10,"new_with_rotmat","","Creates a new isometry from a rotation matrix and a vector.",2],[10,"to_rot_mat","","",2],[10,"rotation","","",2],[10,"inv_rotation","","",2],[10,"append_rotation","","",2],[10,"append_rotation_cpy","","",2],[10,"prepend_rotation","","",2],[10,"prepend_rotation_cpy","","",2],[10,"set_rotation","","",2],[10,"dim","","",2],[10,"one","","",2],[10,"absolute_rotate","","",2],[10,"rand","","",2],[10,"approx_epsilon","","",2],[10,"approx_ulps","","",2],[10,"approx_eq_eps","","",2],[10,"approx_eq_ulps","","",2],[10,"to_homogeneous","","",2],[10,"inv","","",2],[10,"inv_cpy","","",2],[10,"transform","","",2],[10,"inv_transform","","",2],[10,"transformation","","",2],[10,"inv_transformation","","",2],[10,"append_transformation","","",2],[10,"append_transformation_cpy","","",2],[10,"prepend_transformation","","",2],[10,"prepend_transformation_cpy","","",2],[10,"set_transformation","","",2],[10,"rotate","","",2],[10,"inv_rotate","","",2],[10,"translation","","",2],[10,"inv_translation","","",2],[10,"append_translation","","",2],[10,"append_translation_cpy","","",2],[10,"prepend_translation","","",2],[10,"prepend_translation_cpy","","",2],[10,"set_translation","","",2],[10,"translate","","",2],[10,"inv_translate","","",2],[10,"mul","","",2],[10,"mul","","",2],[10,"mul","","",18],[10,"dim","","",3],[10,"one","","",3],[10,"absolute_rotate","","",3],[10,"approx_epsilon","","",3],[10,"approx_ulps","","",3],[10,"approx_eq_eps","","",3],[10,"approx_eq_ulps","","",3],[10,"to_homogeneous","","",3],[10,"inv","","",3],[10,"inv_cpy","","",3],[10,"transform","","",3],[10,"inv_transform","","",3],[10,"transformation","","",3],[10,"inv_transformation","","",3],[10,"append_transformation","","",3],[10,"append_transformation_cpy","","",3],[10,"prepend_transformation","","",3],[10,"prepend_transformation_cpy","","",3],[10,"set_transformation","","",3],[10,"rotate","","",3],[10,"inv_rotate","","",3],[10,"translation","","",3],[10,"inv_translation","","",3],[10,"append_translation","","",3],[10,"append_translation_cpy","","",3],[10,"prepend_translation","","",3],[10,"prepend_translation_cpy","","",3],[10,"set_translation","","",3],[10,"translate","","",3],[10,"inv_translate","","",3],[10,"mul","","",3],[10,"mul","","",3],[10,"mul","","",19],[10,"fmt","","",38],[10,"clone","","",38],[10,"decode","","",38],[10,"encode","","",38],[10,"eq","","",38],[10,"ne","","",38],[10,"fmt","","",39],[10,"clone","","",39],[10,"decode","","",39],[10,"encode","","",39],[10,"eq","","",39],[10,"ne","","",39],[10,"new","","Creates a new 3D perspective projection.",38],[10,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",38],[10,"to_persp_mat","","Build a `PerspMat3` representing this projection.",38],[10,"aspect","","Gets the `width / height` aspect ratio.",38],[10,"fov","","Gets the field of view of the view frustrum.",38],[10,"znear","","Gets the near plane offset of the view frustrum.",38],[10,"zfar","","Gets the far plane offset of the view frustrum.",38],[10,"set_aspect","","Sets the `width / height` aspect ratio of the view frustrum.",38],[10,"set_fov","","Sets the field of view of the view frustrum.",38],[10,"set_znear","","Sets the near plane offset of the view frustrum.",38],[10,"set_zfar","","Sets the far plane offset of the view frustrum.",38],[10,"project_pnt","","Projects a point.",38],[10,"project_vec","","Projects a vector.",38],[10,"new","","Creates a new persepctive matrix from the aspect ratio, field of view, and near/far planes.",39],[10,"new_with_mat","","Creates a new perspective projection matrix from a 4D matrix.",39],[10,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",39],[10,"aspect","","Gets the `width / height` aspect ratio of the view frustrum.",39],[10,"fov","","Gets the field of view of the view frustrum.",39],[10,"znear","","Gets the near plane offset of the view frustrum.",39],[10,"zfar","","Gets the far plane offset of the view frustrum.",39],[10,"set_aspect","","Updates this projection matrix with a new `width / height` aspect ratio of the view\nfrustrum.",39],[10,"set_fov","","Updates this projection with a new field of view of the view frustrum.",39],[10,"set_znear","","Updates this projection matrix with a new near plane offset of the view frustrum.",39],[10,"set_zfar","","Updates this projection matrix with a new far plane offset of the view frustrum.",39],[10,"set_znear_and_zfar","","Updates this projection matrix with new near and far plane offsets of the view frustrum.",39],[10,"project_pnt","","Projects a point.",39],[10,"project_vec","","Projects a vector.",39],[10,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",39],[10,"fmt","","",40],[10,"clone","","",40],[10,"decode","","",40],[10,"encode","","",40],[10,"eq","","",40],[10,"ne","","",40],[10,"fmt","","",41],[10,"clone","","",41],[10,"decode","","",41],[10,"encode","","",41],[10,"eq","","",41],[10,"ne","","",41],[10,"new","","Creates a new 3D orthographic projection.",40],[10,"to_mat","","Builds a 4D projection matrix (using homogeneous coordinates) for this projection.",40],[10,"to_persp_mat","","Build a `OrthoMat3` representing this projection.",40],[10,"width","","The width of the view cuboid.",40],[10,"height","","The height of the view cuboid.",40],[10,"znear","","The near plane offset of the view cuboid.",40],[10,"zfar","","The far plane offset of the view cuboid.",40],[10,"set_width","","Sets the width of the view cuboid.",40],[10,"set_height","","Sets the height of the view cuboid.",40],[10,"set_znear","","Sets the near plane offset of the view cuboid.",40],[10,"set_zfar","","Sets the far plane offset of the view cuboid.",40],[10,"project_pnt","","Projects a point.",40],[10,"project_vec","","Projects a vector.",40],[10,"new","","Creates a new orthographic projection matrix from the width, heihgt, znear and zfar planes of the view cuboid.",41],[10,"new_with_mat","","Creates a new orthographic matrix from a 4D matrix.",41],[10,"as_mat","","Returns a reference to the 4D matrix (using homogeneous coordinates) of this projection.",41],[10,"width","","The width of the view cuboid.",41],[10,"height","","The height of the view cuboid.",41],[10,"znear","","The near plane offset of the view cuboid.",41],[10,"zfar","","The far plane offset of the view cuboid.",41],[10,"set_width","","Sets the width of the view cuboid.",41],[10,"set_height","","Sets the height of the view cuboid.",41],[10,"set_znear","","Sets the near plane offset of the view cuboid.",41],[10,"set_zfar","","Sets the far plane offset of the view cuboid.",41],[10,"set_znear_and_zfar","","Sets the near and far plane offsets of the view cuboid.",41],[10,"project_pnt","","Projects a point.",41],[10,"project_vec","","Projects a vector.",41],[10,"to_mat","","Returns the 4D matrix (using homogeneous coordinates) of this projection.",41],[10,"fmt","","",23],[10,"clone","","",23],[10,"decode","","",23],[10,"encode","","",23],[10,"eq","","",23],[10,"ne","","",23],[10,"is_eq","","Returns `true` if `self` is equal to `Equal`.",23],[10,"is_lt","","Returns `true` if `self` is equal to `Less`.",23],[10,"is_le","","Returns `true` if `self` is equal to `Less` or `Equal`.",23],[10,"is_gt","","Returns `true` if `self` is equal to `Greater`.",23],[10,"is_ge","","Returns `true` if `self` is equal to `Greater` or `Equal`.",23],[10,"is_not_comparable","","Returns `true` if `self` is equal to `NotComparable`.",23],[10,"from_ordering","","Creates a `POrdering` from an `Ordering`.",23],[10,"to_ordering","","Converts this `POrdering` to an `Ordering`.",23],[6,"Absolute","","Trait of objects having an absolute value.\nThis is useful if the object does not have the same type as its absolute value."],[9,"abs","","Computes some absolute value of this object.\nTypically, this will make all component of a matrix or vector positive.",42],[6,"AbsoluteRotate","","Composition of a rotation and an absolute value."],[9,"absolute_rotate","","This is the same as:",43],[6,"ApproxEq","","Trait for testing approximate equality"],[9,"approx_epsilon","","Default epsilon for approximation.",44],[9,"approx_eq_eps","","Tests approximate equality using a custom epsilon.",44],[9,"approx_ulps","","Default ULPs for approximation.",44],[9,"approx_eq_ulps","","Tests approximate equality using units in the last place (ULPs)",44],[10,"approx_eq","","Tests approximate equality.",44],[6,"Axpy","","Trait of objects implementing the `y = ax + y` operation."],[9,"axpy","","Adds $$a * x$$ to `self`.",45],[6,"Basis","","Traits of objects which can form a basis (typically vectors)."],[9,"canonical_basis","","Iterates through the canonical basis of the space in which this object lives.",46],[9,"orthonormal_subspace_basis","","Iterates through a basis of the subspace orthogonal to `self`.",46],[9,"canonical_basis_element","","Gets the ith element of the canonical basis.",46],[6,"BaseFloat","","Basic floating-point number numeric trait."],[9,"pi","","Archimedes' constant.",47],[9,"two_pi","","2.0 * pi.",47],[9,"frac_pi_2","","pi / 2.0.",47],[9,"frac_pi_3","","pi / 3.0.",47],[9,"frac_pi_4","","pi / 4.0.",47],[9,"frac_pi_6","","pi / 6.0.",47],[9,"frac_pi_8","","pi / 8.0.",47],[9,"frac_1_pi","","1.0 / pi.",47],[9,"frac_2_pi","","2.0 / pi.",47],[9,"frac_2_sqrtpi","","2.0 / sqrt(pi).",47],[9,"e","","Euler's number.",47],[9,"log2_e","","log2(e).",47],[9,"log10_e","","log10(e).",47],[9,"ln_2","","ln(2.0).",47],[9,"ln_10","","ln(10.0).",47],[6,"BaseNum","","Basic isizeegral numeric trait."],[6,"Bounded","","Types that have maximum and minimum value."],[9,"min_value","","The minimum value.",48],[9,"max_value","","The maximum value.",48],[6,"Cast","","Traits of objects which can be created from an object of type `T`."],[9,"from","","Converts an element of type `T` to an element of type `Self`.",49],[6,"Col","","Trait to access columns of a matrix or vector."],[9,"ncols","","The number of column of this matrix or vector.",50],[9,"col","","Reads the `i`-th column of `self`.",50],[9,"set_col","","Writes the `i`-th column of `self`.",50],[6,"ColSlice","","Trait to access part of a column of a matrix"],[9,"col_slice","","Returns a view to a slice of a column of a matrix.",51],[6,"RowSlice","","Trait to access part of a row of a matrix"],[9,"row_slice","","Returns a view to a slice of a row of a matrix.",52],[6,"Cov","","Trait for computing the covariance of a set of data."],[9,"cov","","Computes the covariance of the obsevations stored by `m`:",53],[10,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53],[6,"Cross","","Trait of elements having a cross product."],[17,"Output","nalgebra::Cross",""],[9,"cross","nalgebra","Computes the cross product between two elements (usually vectors).",54],[6,"CrossMatrix","","Trait of elements having a cross product operation which can be expressed as a matrix."],[9,"cross_matrix","","The matrix associated to any cross product with this vector. I.e. `v.cross(anything)` =\n`v.cross_matrix().rmul(anything)`.",55],[6,"Det","","Trait of objects having a determinant. Typically used by square matrices."],[9,"det","","Returns the determinant of `m`.",56],[6,"Diag","","Trait to get the diagonal of square matrices."],[9,"from_diag","","Creates a new matrix with the given diagonal.",57],[9,"set_diag","","Sets the diagonal of this matrix.",57],[9,"diag","","The diagonal of this matrix.",57],[6,"Dim","","Trait of objects having a spacial dimension known at compile time."],[9,"dim","","The dimension of the object.",58],[6,"Dot","","Traits of objects having a dot product."],[9,"dot","","Computes the dot (inner) product of two vectors.",59],[6,"EigenQR","","Trait for computing the eigenvector and eigenvalues of a square matrix usin the QR algorithm."],[9,"eigen_qr","","Computes the eigenvectors and eigenvalues of this matrix.",60],[6,"Eye","","Trait for constructing the identity matrix"],[9,"new_identity","","Return the identity matrix of specified dimension",61],[6,"FloatPnt","","Trait of points with components implementing the `BaseFloat` trait."],[10,"sqdist","","Computes the square distance between two points.",62],[10,"dist","","Computes the distance between two points.",62],[6,"FloatVec","","Trait of vector with components implementing the `BaseFloat` trait."],[6,"FromHomogeneous","","Traits of objects which can be build from an homogeneous coordinate form."],[9,"from","","Builds an object from its homogeneous coordinate form.",63],[6,"Indexable","","This is a workaround of current Rust limitations."],[9,"at","","Reads the `i`-th element of `self`.",64],[9,"set","","Writes to the `i`-th element of `self`.",64],[9,"swap","","Swaps the `i`-th element of `self` with its `j`-th element.",64],[9,"unsafe_at","","Reads the `i`-th element of `self`.",64],[9,"unsafe_set","","Writes to the `i`-th element of `self`.",64],[6,"Inv","","Trait of objects having an inverse. Typically used to implement matrix inverse."],[9,"inv_cpy","","Returns the inverse of `m`.",65],[9,"inv","","In-place version of `inverse`.",65],[6,"Iterable","","This is a workaround of current Rust limitations."],[9,"iter","","Gets a vector-like read-only iterator.",66],[6,"IterableMut","","This is a workaround of current Rust limitations."],[9,"iter_mut","","Gets a vector-like read-write iterator.",67],[6,"LMul","","Trait of objects having a left multiplication with another element."],[9,"lmul","","Computes `v * self`",68],[6,"Mat","","Trait of matrices."],[6,"Mean","","Trait for computing the covariance of a set of data."],[9,"mean","","Computes the mean of the observations stored by `v`.\n \n  * For matrices, observations are stored in its rows.\n  * For vectors, observations are stored in its components (thus are 1-dimensional).",69],[6,"Norm","","Traits of objects having an euclidian norm."],[10,"norm","","Computes the norm of `self`.",70],[9,"sqnorm","","Computes the squared norm of `self`.",70],[9,"normalize_cpy","","Gets the normalized version of a copy of `v`.",70],[9,"normalize","","Normalizes `self`.",70],[6,"NumPnt","","Trait grouping most common operations on points."],[6,"NumVec","","Trait grouping most common operations on vectors."],[6,"One","","Multiplicative identity."],[9,"one","","Returns the multiplicative identity.",71],[6,"Orig","","The zero element of a vector space, seen as an element of its embeding affine space."],[9,"orig","","The trivial origin.",72],[9,"is_orig","","Returns true if this points is exactly the trivial origin.",72],[6,"Outer","","Traits of objects having an outer product."],[9,"outer","","Computes the outer product: `a * b`",73],[6,"POrd","","Pointwise ordering operations."],[9,"inf","","Returns the infimum of this value and another",74],[9,"sup","","Returns the supremum of this value and another",74],[9,"partial_cmp","","Compare `self` and `other` using a partial ordering relation.",74],[10,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",74],[10,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",74],[10,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",74],[10,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",74],[10,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",74],[10,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",74],[10,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",74],[6,"PntAsVec","","Trait that relates a point of an affine space to a vector of the associated vector space."],[9,"to_vec","","Converts this point to its associated vector.",75],[9,"as_vec","","Converts a reference to this point to a reference to its associated vector.",75],[9,"set_coords","","Sets the coordinates of this point to match those of a given vector.",75],[6,"RMul","","Trait of objects having a right multiplication with another element."],[9,"rmul","","Computes `self * v`",76],[6,"Rotate","","Trait of objects able to rotate other objects."],[9,"rotate","","Applies a rotation to `v`.",77],[9,"inv_rotate","","Applies an inverse rotation to `v`.",77],[6,"Rotation","","Trait of object which can represent a rotation, and to which new rotations can be appended. A\nrotation is assumed to be an isometry without translation and without reflexion."],[9,"rotation","","Gets the rotation associated with `self`.",78],[9,"inv_rotation","","Gets the inverse rotation associated with `self`.",78],[9,"append_rotation","","Appends a rotation to this object.",78],[9,"append_rotation_cpy","","Appends the rotation `amount` to a copy of `t`.",78],[9,"prepend_rotation","","Prepends a rotation to this object.",78],[9,"prepend_rotation_cpy","","Prepends the rotation `amount` to a copy of `t`.",78],[9,"set_rotation","","Sets the rotation of `self`.",78],[6,"RotationMatrix","","Trait of transformation having a rotation extractable as a rotation matrix. This can typically\nbe implemented by quaternions to convert them to a rotation matrix."],[17,"Output","nalgebra::RotationMatrix",""],[9,"to_rot_mat","nalgebra","Gets the rotation matrix represented by `self`.",79],[6,"RotationWithTranslation","","Various composition of rotation and translation."],[10,"append_rotation_wrt_point_cpy","","Applies a rotation centered on a specific point.",80],[10,"append_rotation_wrt_point","","Rotates `self` using a specific center of rotation.",80],[10,"append_rotation_wrt_center_cpy","","Applies a rotation centered on the translation of `m`.\n \n# Arguments\n  * `t` - the object to be rotated.\n  * `amount` - the rotation to apply.",80],[10,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",80],[6,"Row","","Trait to access rows of a matrix or a vector."],[9,"nrows","","The number of column of `self`.",81],[9,"row","","Reads the `i`-th row of `self`.",81],[9,"set_row","","Writes the `i`-th row of `self`.",81],[6,"ScalarAdd","","Trait of objects having an addition with a scalar."],[9,"add_s","","Gets the result of `self + n`.",82],[6,"ScalarSub","","Trait of objects having a subtraction with a scalar."],[9,"sub_s","","Gets the result of `self - n`.",83],[6,"ScalarMul","","Trait of objects having a multiplication with a scalar."],[9,"mul_s","","Gets the result of `self * n`.",84],[6,"ScalarDiv","","Trait of objects having a division by a scalar."],[9,"div_s","","Gets the result of `self / n`.",85],[6,"Shape","","The shape of an indexable object."],[9,"shape","","Returns the shape of an indexable object.",86],[6,"SquareMat","","Trait implemented by square matrices."],[6,"ToHomogeneous","","Traits of objects which can be put in homogeneous coordinates form."],[9,"to_homogeneous","","Gets the homogeneous coordinates form of this object.",87],[6,"Transform","","Trait of objects able to transform other objects."],[9,"transform","","Applies a transformation to `v`.",88],[9,"inv_transform","","Applies an inverse transformation to `v`.",88],[6,"Transformation","","Trait of object which represent a transformation, and to which new transformations can\nbe appended."],[9,"transformation","","Gets the transformation of `self`.",89],[9,"inv_transformation","","Gets the inverse transformation of `self`.",89],[9,"append_transformation","","Appends a transformation to this object.",89],[9,"append_transformation_cpy","","Appends the transformation `amount` to a copy of `t`.",89],[9,"prepend_transformation","","Prepends a transformation to this object.",89],[9,"prepend_transformation_cpy","","Prepends the transformation `amount` to a copy of `t`.",89],[9,"set_transformation","","Sets the transformation of `self`.",89],[6,"Translate","","Trait of objects able to translate other objects. This is typically\nimplemented by vectors to translate points."],[9,"translate","","Apply a translation to an object.",90],[9,"inv_translate","","Apply an inverse translation to an object.",90],[6,"Translation","","Trait of object which represent a translation, and to wich new translation\ncan be appended."],[9,"translation","","Gets the translation associated with this object.",91],[9,"inv_translation","","Gets the inverse translation associated with this object.",91],[9,"append_translation","","Appends a translation to this object.",91],[9,"append_translation_cpy","","Appends the translation `amount` to a copy of `t`.",91],[9,"prepend_translation","","Prepends a translation to this object.",91],[9,"prepend_translation_cpy","","Prepends the translation `amount` to a copy of `t`.",91],[9,"set_translation","","Sets the translation.",91],[6,"Transpose","","Trait of objects which can be transposed."],[9,"transpose_cpy","","Computes the transpose of a matrix.",92],[9,"transpose","","In-place version of `transposed`.",92],[6,"UniformSphereSample","","Trait of vectors able to sample a unit sphere."],[9,"sample","","Iterate through the samples.",93],[6,"VecAsPnt","","Trait that relates a point of an affine space to a vector of the associated vector space."],[9,"to_pnt","","Converts this point to its associated vector.",94],[9,"as_pnt","","Converts a reference to this point to a reference to its associated vector.",94],[6,"Zero","","Additive identity."],[9,"zero","","Returns the additive identity.",95],[9,"is_zero","","Tests if `self` is exactly zero.",95],[15,"assert_approx_eq_eps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait."],[15,"assert_approx_eq_ulps!","","Asserts approximate equality within a given tolerance of two values with the\n`ApproxEq` trait, with tolerance specified in ULPs."],[15,"assert_approx_eq!","","Asserts approximate equality of two values with the `ApproxEq` trait."],[10,"append_rotation_wrt_point_cpy","","Applies a rotation centered on a specific point.",80],[10,"append_rotation_wrt_point","","Rotates `self` using a specific center of rotation.",80],[10,"append_rotation_wrt_center_cpy","","Applies a rotation centered on the translation of `m`.\n \n# Arguments\n  * `t` - the object to be rotated.\n  * `amount` - the rotation to apply.",80],[10,"append_rotation_wrt_center","","Applies a rotation centered on the translation of `m`.",80],[10,"norm","","Computes the norm of `self`.",70],[10,"sqdist","","Computes the square distance between two points.",62],[10,"dist","","Computes the distance between two points.",62],[10,"partial_le","","Returns `true` iff `self` and `other` are comparable and `self <= other`.",74],[10,"partial_lt","","Returns `true` iff `self` and `other` are comparable and `self < other`.",74],[10,"partial_ge","","Returns `true` iff `self` and `other` are comparable and `self >= other`.",74],[10,"partial_gt","","Returns `true` iff `self` and `other` are comparable and `self > other`.",74],[10,"partial_min","","Return the minimum of `self` and `other` if they are comparable.",74],[10,"partial_max","","Return the maximum of `self` and `other` if they are comparable.",74],[10,"partial_clamp","","Clamp `value` between `min` and `max`. Returns `None` if `value` is not comparable to\n`min` or `max`.",74],[10,"approx_eq","","Tests approximate equality.",44],[10,"cov_to","","Computes the covariance of the obsevations stored by `m`:",53]],"paths":[[1,"DVec"],[1,"Iso2"],[1,"Iso3"],[1,"Iso4"],[1,"Mat1"],[1,"Mat2"],[1,"Mat3"],[1,"Mat4"],[1,"Mat5"],[1,"Mat6"],[1,"Vec1"],[1,"Vec2"],[1,"Vec3"],[1,"Vec4"],[1,"Vec5"],[1,"Vec6"],[1,"Pnt1"],[1,"Pnt2"],[1,"Pnt3"],[1,"Pnt4"],[1,"Pnt5"],[1,"Pnt6"],[1,"Quat"],[2,"POrdering"],[1,"DMat"],[1,"DVec1"],[1,"DVec2"],[1,"DVec3"],[1,"DVec4"],[1,"DVec5"],[1,"DVec6"],[1,"Vec0"],[1,"Pnt0"],[1,"UnitQuat"],[1,"Identity"],[1,"Rot2"],[1,"Rot3"],[1,"Rot4"],[1,"Persp3"],[1,"PerspMat3"],[1,"Ortho3"],[1,"OrthoMat3"],[6,"Absolute"],[6,"AbsoluteRotate"],[6,"ApproxEq"],[6,"Axpy"],[6,"Basis"],[6,"BaseFloat"],[6,"Bounded"],[6,"Cast"],[6,"Col"],[6,"ColSlice"],[6,"RowSlice"],[6,"Cov"],[6,"Cross"],[6,"CrossMatrix"],[6,"Det"],[6,"Diag"],[6,"Dim"],[6,"Dot"],[6,"EigenQR"],[6,"Eye"],[6,"FloatPnt"],[6,"FromHomogeneous"],[6,"Indexable"],[6,"Inv"],[6,"Iterable"],[6,"IterableMut"],[6,"LMul"],[6,"Mean"],[6,"Norm"],[6,"One"],[6,"Orig"],[6,"Outer"],[6,"POrd"],[6,"PntAsVec"],[6,"RMul"],[6,"Rotate"],[6,"Rotation"],[6,"RotationMatrix"],[6,"RotationWithTranslation"],[6,"Row"],[6,"ScalarAdd"],[6,"ScalarSub"],[6,"ScalarMul"],[6,"ScalarDiv"],[6,"Shape"],[6,"ToHomogeneous"],[6,"Transform"],[6,"Transformation"],[6,"Translate"],[6,"Translation"],[6,"Transpose"],[6,"UniformSphereSample"],[6,"VecAsPnt"],[6,"Zero"]]};

searchIndex['cgmath'] = {"items":[[0,"","cgmath","Computer graphics-centric math."],[1,"Matrix2","","A 2 x 2, column major matrix"],[11,"x","","",0],[11,"y","","",0],[1,"Matrix3","","A 3 x 3, column major matrix"],[11,"x","","",1],[11,"y","","",1],[11,"z","","",1],[1,"Matrix4","","A 4 x 4, column major matrix"],[11,"x","","",2],[11,"y","","",2],[11,"z","","",2],[11,"w","","",2],[1,"Quaternion","","A [quaternion](https://en.wikipedia.org/wiki/Quaternion) in scalar/vector\nform."],[11,"s","","",3],[11,"v","","",3],[1,"Vector2","",""],[11,"x","","",4],[11,"y","","",4],[1,"Vector3","",""],[11,"x","","",5],[11,"y","","",5],[11,"z","","",5],[1,"Vector4","",""],[11,"x","","",6],[11,"y","","",6],[11,"z","","",6],[11,"w","","",6],[1,"Rad","","An angle, in radians"],[11,"s","","",7],[1,"Deg","","An angle, in degrees"],[11,"s","","",8],[1,"Plane","","A 3-dimensional plane formed from the equation: `A*x + B*y + C*z - D = 0`."],[11,"n","","",9],[11,"d","","",9],[1,"Point2","","A point in 2-dimensional space."],[11,"x","","",10],[11,"y","","",10],[1,"Point3","","A point in 3-dimensional space."],[11,"x","","",11],[11,"y","","",11],[11,"z","","",11],[1,"Line","","A generic directed line segment from `origin` to `dest`."],[11,"origin","","",12],[11,"dest","","",12],[1,"Ray","","A generic ray starting at `origin` and extending infinitely in\n`direction`."],[11,"origin","","",13],[11,"direction","","",13],[1,"Basis3","","A three-dimensional rotation matrix."],[1,"Basis2","","A two-dimensional rotation matrix."],[1,"Decomposed","","A generic transformation consisting of a rotation,\ndisplacement vector and scale amount."],[11,"scale","","",14],[11,"rot","","",14],[11,"disp","","",14],[1,"AffineMatrix3","","A homogeneous transformation matrix."],[11,"mat","","",15],[1,"PerspectiveFov","","A perspective projection based on a vertical field-of-view angle."],[11,"fovy","","",16],[11,"aspect","","",16],[11,"near","","",16],[11,"far","","",16],[1,"Perspective","","A perspective projection with arbitrary left/right/bottom/top distances"],[11,"left","","",17],[11,"bottom","","",17],[11,"near","","",17],[1,"Ortho","","An orthographic projection with arbitrary left/right/bottom/top distances"],[11,"left","","",18],[11,"bottom","","",18],[11,"near","","",18],[1,"Aabb2","","A two-dimensional AABB, aka a rectangle."],[11,"min","","",19],[11,"max","","",19],[1,"Aabb3","","A three-dimensional AABB, aka a rectangular prism."],[11,"min","","",20],[11,"max","","",20],[1,"Cylinder","",""],[11,"center","","",21],[11,"axis","","",21],[11,"radius","","",21],[1,"Frustum","",""],[11,"left","","",22],[11,"right","","",22],[11,"bottom","","",22],[11,"top","","",22],[11,"near","","",22],[11,"far","","",22],[1,"FrustumPoints","",""],[11,"near_top_left","","",23],[11,"near_top_right","","",23],[11,"near_bottom_left","","",23],[11,"near_bottom_right","","",23],[11,"far_top_left","","",23],[11,"far_top_right","","",23],[11,"far_bottom_left","","",23],[11,"far_bottom_right","","",23],[1,"Obb2","",""],[11,"center","","",24],[11,"axis","","",24],[11,"extents","","",24],[1,"Obb3","",""],[11,"center","","",25],[11,"axis","","",25],[11,"extents","","",25],[1,"Sphere","",""],[11,"center","","",26],[11,"radius","","",26],[3,"dot","","Dot product of two vectors."],[3,"rad","","Create a new angle, in radians"],[3,"deg","","Create a new angle, in degrees"],[3,"bisect","",""],[3,"sin","",""],[3,"cos","",""],[3,"tan","",""],[3,"sin_cos","",""],[3,"cot","",""],[3,"sec","",""],[3,"csc","",""],[3,"acos","",""],[3,"asin","",""],[3,"atan","",""],[3,"atan2","",""],[3,"perspective","","Create a perspective projection matrix."],[3,"frustum","","Create a perspective matrix from a view frustrum."],[3,"ortho","","Create an orthographic projection matrix."],[3,"one","",""],[3,"zero","",""],[10,"rand","","",0],[10,"decode","","",0],[10,"encode","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"rand","","",1],[10,"decode","","",1],[10,"encode","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"rand","","",2],[10,"decode","","",2],[10,"encode","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"new","","Create a new matrix, providing values for each index.",0],[10,"from_cols","","Create a new matrix, providing columns.",0],[10,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",0],[10,"zero","","Create a zero matrix (all zeros).",0],[10,"identity","","Create an identity matrix (diagonal matrix of ones).",0],[10,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",0],[10,"from_angle","","",0],[10,"new","","Create a new matrix, providing values for each index.",1],[10,"from_cols","","Create a new matrix, providing columns.",1],[10,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",1],[10,"zero","","Create a zero matrix (all zeros).",1],[10,"identity","","Create an identity matrix (diagonal matrix of ones).",1],[10,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",1],[10,"from_angle_x","","Create a matrix from a rotation around the `x` axis (pitch).",1],[10,"from_angle_y","","Create a matrix from a rotation around the `y` axis (yaw).",1],[10,"from_angle_z","","Create a matrix from a rotation around the `z` axis (roll).",1],[10,"from_euler","","Create a matrix from a set of euler angles.",1],[10,"from_axis_angle","","Create a matrix from a rotation around an arbitrary axis",1],[10,"from_diagonal","","Create a matrix from a non-uniform scale",1],[10,"new","","Create a new matrix, providing values for each index.",2],[10,"from_cols","","Create a new matrix, providing columns.",2],[10,"from_value","","Create a new diagonal matrix, providing a single value to use for each\nnon-zero index.",2],[10,"zero","","Create a zero matrix (all zeros).",2],[10,"identity","","Create an identity matrix (diagonal matrix of ones).",2],[10,"from_translation","","Create a translation matrix from a Vector3",2],[10,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",2],[10,"add","","",0],[10,"add","","",1],[10,"add","","",2],[10,"sub","","",0],[10,"sub","","",1],[10,"sub","","",2],[10,"neg","","",0],[10,"neg","","",1],[10,"neg","","",2],[10,"zero","","",0],[10,"is_zero","","",0],[10,"zero","","",1],[10,"is_zero","","",1],[10,"zero","","",2],[10,"is_zero","","",2],[10,"mul","","",0],[10,"mul","","",1],[10,"mul","","",2],[10,"one","","",0],[10,"one","","",1],[10,"one","","",2],[10,"into_fixed","","",0],[10,"as_fixed","","",0],[10,"as_mut_fixed","","",0],[10,"from_fixed","","",0],[10,"from_fixed_ref","","",0],[10,"from_fixed_mut","","",0],[10,"index","","",0],[10,"index_mut","","",0],[10,"row","","",0],[10,"swap_rows","","",0],[10,"map","","",0],[10,"into_fixed","","",1],[10,"as_fixed","","",1],[10,"as_mut_fixed","","",1],[10,"from_fixed","","",1],[10,"from_fixed_ref","","",1],[10,"from_fixed_mut","","",1],[10,"index","","",1],[10,"index_mut","","",1],[10,"row","","",1],[10,"swap_rows","","",1],[10,"map","","",1],[10,"into_fixed","","",2],[10,"as_fixed","","",2],[10,"as_mut_fixed","","",2],[10,"from_fixed","","",2],[10,"from_fixed_ref","","",2],[10,"from_fixed_mut","","",2],[10,"index","","",2],[10,"index_mut","","",2],[10,"row","","",2],[10,"swap_rows","","",2],[10,"map","","",2],[10,"mul_s","","",0],[10,"div_s","","",0],[10,"rem_s","","",0],[10,"add_m","","",0],[10,"sub_m","","",0],[10,"mul_v","","",0],[10,"mul_m","","",0],[10,"neg_self","","",0],[10,"mul_self_s","","",0],[10,"div_self_s","","",0],[10,"rem_self_s","","",0],[10,"add_self_m","","",0],[10,"sub_self_m","","",0],[10,"transpose","","",0],[10,"transpose_self","","",0],[10,"determinant","","",0],[10,"diagonal","","",0],[10,"invert","","",0],[10,"is_diagonal","","",0],[10,"is_symmetric","","",0],[10,"mul_s","","",1],[10,"div_s","","",1],[10,"rem_s","","",1],[10,"add_m","","",1],[10,"sub_m","","",1],[10,"mul_v","","",1],[10,"mul_m","","",1],[10,"neg_self","","",1],[10,"mul_self_s","","",1],[10,"div_self_s","","",1],[10,"rem_self_s","","",1],[10,"add_self_m","","",1],[10,"sub_self_m","","",1],[10,"transpose","","",1],[10,"transpose_self","","",1],[10,"determinant","","",1],[10,"diagonal","","",1],[10,"invert","","",1],[10,"is_diagonal","","",1],[10,"is_symmetric","","",1],[10,"mul_s","","",2],[10,"div_s","","",2],[10,"rem_s","","",2],[10,"add_m","","",2],[10,"sub_m","","",2],[10,"mul_v","","",2],[10,"mul_m","","",2],[10,"neg_self","","",2],[10,"mul_self_s","","",2],[10,"div_self_s","","",2],[10,"rem_self_s","","",2],[10,"add_self_m","","",2],[10,"sub_self_m","","",2],[10,"transpose","","",2],[10,"transpose_self","","",2],[10,"determinant","","",2],[10,"diagonal","","",2],[10,"invert","","",2],[10,"is_diagonal","","",2],[10,"is_symmetric","","",2],[10,"approx_eq_eps","","",0],[10,"approx_eq_eps","","",1],[10,"approx_eq_eps","","",2],[10,"to_matrix3","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 3-dimensional identity matrix.",0],[10,"to_matrix4","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",0],[10,"to_matrix4","","Clone the elements of a 3-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",1],[10,"to_quaternion","","Convert the matrix to a quaternion",1],[10,"fmt","","",0],[10,"fmt","","",1],[10,"fmt","","",2],[10,"rand","","",3],[10,"decode","","",3],[10,"encode","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"map","","",3],[10,"index","","",3],[10,"index_mut","","",3],[10,"new","","Construct a new quaternion from one scalar component and three\nimaginary components",3],[10,"from_sv","","Construct a new quaternion from a scalar and a vector",3],[10,"zero","","The additive identity, ie: `q = 0 + 0i + 0j + 0i`",3],[10,"identity","","The multiplicative identity, ie: `q = 1 + 0i + 0j + 0i`",3],[10,"mul_s","","The result of multiplying the quaternion a scalar",3],[10,"div_s","","The result of dividing the quaternion a scalar",3],[10,"mul_v","","The result of multiplying the quaternion by a vector",3],[10,"add_q","","The sum of this quaternion and `other`",3],[10,"sub_q","","The difference between this quaternion and `other`",3],[10,"mul_q","","The result of multipliplying the quaternion by `other`",3],[10,"mul_self_s","","Multiply this quaternion by a scalar, in-place.",3],[10,"div_self_s","","Divide this quaternion by a scalar, in-place.",3],[10,"add_self_q","","Add this quaternion by another, in-place.",3],[10,"sub_self_q","","Subtract another quaternion from this one, in-place.",3],[10,"mul_self_q","","Multiply this quaternion by another, in-place.",3],[10,"dot","","The dot product of the quaternion and `q`.",3],[10,"conjugate","","The conjugate of the quaternion.",3],[10,"magnitude2","","The squared magnitude of the quaternion. This is useful for\nmagnitude comparisons where the exact magnitude does not need to be\ncalculated.",3],[10,"magnitude","","The magnitude of the quaternion",3],[10,"normalize","","Normalize this quaternion, returning the new quaternion.",3],[10,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",3],[10,"approx_eq_eps","","",3],[10,"slerp","","Spherical Linear Intoperlation",3],[10,"to_euler","","Convert a Quaternion to Eular angles\n    This is a polar singularity aware conversion",3],[10,"to_matrix3","","Convert the quaternion to a 3 x 3 rotation matrix",3],[10,"to_matrix4","","Convert the quaternion to a 4 x 4 rotation matrix",3],[10,"neg","","",3],[10,"fmt","","",3],[10,"to_rot3","","",3],[10,"to_quaternion","","",3],[10,"identity","","",3],[10,"look_at","","",3],[10,"between_vectors","","",3],[10,"rotate_vector","","",3],[10,"concat","","",3],[10,"concat_self","","",3],[10,"invert","","",3],[10,"invert_self","","",3],[10,"from_axis_angle","","",3],[10,"from_euler","","- [Maths - Conversion Euler to Quaternion]\n(http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm)",3],[10,"rand","","",4],[10,"decode","","",4],[10,"encode","","",4],[10,"hash","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"new","","Construct a new vector, using the provided values.",4],[10,"from_value","","Construct a vector from a single value, replicating it.",4],[10,"zero","","",4],[10,"is_zero","","",4],[10,"one","","",4],[10,"cast","","Component-wise casting to another type",4],[10,"into_fixed","","",4],[10,"as_fixed","","",4],[10,"as_mut_fixed","","",4],[10,"from_fixed","","",4],[10,"from_fixed_ref","","",4],[10,"from_fixed_mut","","",4],[10,"index","","",4],[10,"index_mut","","",4],[10,"map","","",4],[10,"add_s","","",4],[10,"sub_s","","",4],[10,"mul_s","","",4],[10,"div_s","","",4],[10,"rem_s","","",4],[10,"add_v","","",4],[10,"sub_v","","",4],[10,"mul_v","","",4],[10,"div_v","","",4],[10,"rem_v","","",4],[10,"neg_self","","",4],[10,"add_self_s","","",4],[10,"sub_self_s","","",4],[10,"mul_self_s","","",4],[10,"div_self_s","","",4],[10,"rem_self_s","","",4],[10,"add_self_v","","",4],[10,"sub_self_v","","",4],[10,"mul_self_v","","",4],[10,"div_self_v","","",4],[10,"rem_self_v","","",4],[10,"comp_add","","",4],[10,"comp_mul","","",4],[10,"comp_min","","",4],[10,"comp_max","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"neg","","",4],[10,"mul","","",4],[10,"div","","",4],[10,"rem","","",4],[10,"approx_eq_eps","","",4],[10,"rand","","",5],[10,"decode","","",5],[10,"encode","","",5],[10,"hash","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"ne","","",5],[10,"new","","Construct a new vector, using the provided values.",5],[10,"from_value","","Construct a vector from a single value, replicating it.",5],[10,"zero","","",5],[10,"is_zero","","",5],[10,"one","","",5],[10,"cast","","Component-wise casting to another type",5],[10,"into_fixed","","",5],[10,"as_fixed","","",5],[10,"as_mut_fixed","","",5],[10,"from_fixed","","",5],[10,"from_fixed_ref","","",5],[10,"from_fixed_mut","","",5],[10,"index","","",5],[10,"index_mut","","",5],[10,"map","","",5],[10,"add_s","","",5],[10,"sub_s","","",5],[10,"mul_s","","",5],[10,"div_s","","",5],[10,"rem_s","","",5],[10,"add_v","","",5],[10,"sub_v","","",5],[10,"mul_v","","",5],[10,"div_v","","",5],[10,"rem_v","","",5],[10,"neg_self","","",5],[10,"add_self_s","","",5],[10,"sub_self_s","","",5],[10,"mul_self_s","","",5],[10,"div_self_s","","",5],[10,"rem_self_s","","",5],[10,"add_self_v","","",5],[10,"sub_self_v","","",5],[10,"mul_self_v","","",5],[10,"div_self_v","","",5],[10,"rem_self_v","","",5],[10,"comp_add","","",5],[10,"comp_mul","","",5],[10,"comp_min","","",5],[10,"comp_max","","",5],[10,"add","","",5],[10,"sub","","",5],[10,"neg","","",5],[10,"mul","","",5],[10,"div","","",5],[10,"rem","","",5],[10,"approx_eq_eps","","",5],[10,"rand","","",6],[10,"decode","","",6],[10,"encode","","",6],[10,"hash","","",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"new","","Construct a new vector, using the provided values.",6],[10,"from_value","","Construct a vector from a single value, replicating it.",6],[10,"zero","","",6],[10,"is_zero","","",6],[10,"one","","",6],[10,"cast","","Component-wise casting to another type",6],[10,"into_fixed","","",6],[10,"as_fixed","","",6],[10,"as_mut_fixed","","",6],[10,"from_fixed","","",6],[10,"from_fixed_ref","","",6],[10,"from_fixed_mut","","",6],[10,"index","","",6],[10,"index_mut","","",6],[10,"map","","",6],[10,"add_s","","",6],[10,"sub_s","","",6],[10,"mul_s","","",6],[10,"div_s","","",6],[10,"rem_s","","",6],[10,"add_v","","",6],[10,"sub_v","","",6],[10,"mul_v","","",6],[10,"div_v","","",6],[10,"rem_v","","",6],[10,"neg_self","","",6],[10,"add_self_s","","",6],[10,"sub_self_s","","",6],[10,"mul_self_s","","",6],[10,"div_self_s","","",6],[10,"rem_self_s","","",6],[10,"add_self_v","","",6],[10,"sub_self_v","","",6],[10,"mul_self_v","","",6],[10,"div_self_v","","",6],[10,"rem_self_v","","",6],[10,"comp_add","","",6],[10,"comp_mul","","",6],[10,"comp_min","","",6],[10,"comp_max","","",6],[10,"add","","",6],[10,"sub","","",6],[10,"neg","","",6],[10,"mul","","",6],[10,"div","","",6],[10,"rem","","",6],[10,"approx_eq_eps","","",6],[10,"unit_x","","A unit vector in the `x` direction.",4],[10,"unit_y","","A unit vector in the `y` direction.",4],[10,"perp_dot","","The perpendicular dot product of the vector and `other`.",4],[10,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the\nprovided `z`.",4],[10,"unit_x","","A unit vector in the `x` direction.",5],[10,"unit_y","","A unit vector in the `y` direction.",5],[10,"unit_z","","A unit vector in the `w` direction.",5],[10,"cross","","Returns the cross product of the vector and `other`.",5],[10,"cross_self","","Calculates the cross product of the vector and `other`, then stores the\nresult in `self`.",5],[10,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the\nprovided `w`.",5],[10,"truncate","","Create a `Vector2`, dropping the `z` value.",5],[10,"unit_x","","A unit vector in the `x` direction.",6],[10,"unit_y","","A unit vector in the `y` direction.",6],[10,"unit_z","","A unit vector in the `z` direction.",6],[10,"unit_w","","A unit vector in the `w` direction.",6],[10,"truncate","","Create a `Vector3`, dropping the `w` value.",6],[10,"truncate_n","","Create a `Vector3`, dropping the nth element",6],[10,"angle","","",4],[10,"angle","","",5],[10,"angle","","",6],[10,"fmt","","",4],[10,"fmt","","",5],[10,"fmt","","",6],[10,"rand","","",7],[10,"decode","","",7],[10,"encode","","",7],[10,"hash","","",7],[10,"partial_cmp","","",7],[10,"lt","","",7],[10,"le","","",7],[10,"gt","","",7],[10,"ge","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"clone","","",7],[10,"rand","","",8],[10,"decode","","",8],[10,"encode","","",8],[10,"hash","","",8],[10,"partial_cmp","","",8],[10,"lt","","",8],[10,"le","","",8],[10,"gt","","",8],[10,"ge","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"clone","","",8],[10,"to_rad","","",7],[10,"to_rad","","",8],[10,"to_deg","","",7],[10,"to_deg","","",8],[10,"zero","","",7],[10,"full_turn","","",7],[10,"turn_div_2","","",7],[10,"turn_div_3","","",7],[10,"turn_div_4","","",7],[10,"turn_div_6","","",7],[10,"zero","","",8],[10,"full_turn","","",8],[10,"turn_div_2","","",8],[10,"turn_div_3","","",8],[10,"turn_div_4","","",8],[10,"turn_div_6","","",8],[10,"add","","",7],[10,"add","","",8],[10,"sub","","",7],[10,"sub","","",8],[10,"neg","","",7],[10,"neg","","",8],[10,"zero","","",7],[10,"is_zero","","",7],[10,"zero","","",8],[10,"is_zero","","",8],[10,"mul","","",7],[10,"mul","","",8],[10,"one","","",7],[10,"one","","",8],[10,"from","","",7],[10,"full_turn","","",7],[10,"from","","",8],[10,"full_turn","","",8],[10,"fmt","","",7],[10,"fmt","","",8],[10,"approx_eq_eps","","",7],[10,"approx_eq_eps","","",8],[10,"decode","","",9],[10,"encode","","",9],[10,"eq","","",9],[10,"ne","","",9],[10,"clone","","",9],[10,"new","","Construct a plane from a normal vector and a scalar distance. The\nplane will be perpendicular to `n`, and `d` units offset from the\norigin.",9],[10,"from_abcd","","# Arguments",9],[10,"from_vector4","","Construct a plane from the components of a four-dimensional vector",9],[10,"from_points","","Constructs a plane that passes through the the three points `a`, `b` and `c`",9],[10,"from_point_normal","","Construct a plane from a point and a normal vector.\nThe plane will contain the point `p` and be perpendicular to `n`.",9],[10,"approx_eq_eps","","",9],[10,"fmt","","",9],[10,"decode","","",10],[10,"encode","","",10],[10,"hash","","",10],[10,"clone","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"decode","","",11],[10,"encode","","",11],[10,"hash","","",11],[10,"clone","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"new","","",10],[10,"new","","",11],[10,"from_homogeneous","","",11],[10,"to_homogeneous","","",11],[10,"into_fixed","","",10],[10,"as_fixed","","",10],[10,"as_mut_fixed","","",10],[10,"from_fixed","","",10],[10,"from_fixed_ref","","",10],[10,"from_fixed_mut","","",10],[10,"index","","",10],[10,"index_mut","","",10],[10,"map","","",10],[10,"origin","","",10],[10,"from_vec","","",10],[10,"to_vec","","",10],[10,"mul_s","","",10],[10,"div_s","","",10],[10,"rem_s","","",10],[10,"add_v","","",10],[10,"sub_p","","",10],[10,"mul_self_s","","",10],[10,"div_self_s","","",10],[10,"rem_self_s","","",10],[10,"add_self_v","","",10],[10,"dot","","",10],[10,"min","","",10],[10,"max","","",10],[10,"approx_eq_eps","","",10],[10,"into_fixed","","",11],[10,"as_fixed","","",11],[10,"as_mut_fixed","","",11],[10,"from_fixed","","",11],[10,"from_fixed_ref","","",11],[10,"from_fixed_mut","","",11],[10,"index","","",11],[10,"index_mut","","",11],[10,"map","","",11],[10,"origin","","",11],[10,"from_vec","","",11],[10,"to_vec","","",11],[10,"mul_s","","",11],[10,"div_s","","",11],[10,"rem_s","","",11],[10,"add_v","","",11],[10,"sub_p","","",11],[10,"mul_self_s","","",11],[10,"div_self_s","","",11],[10,"rem_self_s","","",11],[10,"add_self_v","","",11],[10,"dot","","",11],[10,"min","","",11],[10,"max","","",11],[10,"approx_eq_eps","","",11],[10,"fmt","","",10],[10,"fmt","","",11],[10,"decode","","",12],[10,"encode","","",12],[10,"eq","","",12],[10,"ne","","",12],[10,"clone","","",12],[10,"new","","",12],[10,"decode","","",13],[10,"encode","","",13],[10,"eq","","",13],[10,"ne","","",13],[10,"clone","","",13],[10,"new","","",13],[10,"decode","","",27],[10,"encode","","",27],[10,"clone","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"as_matrix2","","Coerce to a `Matrix2`",27],[10,"to_rot2","","",27],[10,"to_matrix2","","",27],[10,"identity","","",27],[10,"look_at","","",27],[10,"between_vectors","","",27],[10,"rotate_vector","","",27],[10,"concat","","",27],[10,"concat_self","","",27],[10,"invert","","",27],[10,"invert_self","","",27],[10,"approx_eq_eps","","",27],[10,"from_angle","","",27],[10,"decode","","",28],[10,"encode","","",28],[10,"clone","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"from_quaternion","","Create a new rotation matrix from a quaternion.",28],[10,"as_matrix3","","Coerce to a `Matrix3`",28],[10,"to_rot3","","",28],[10,"to_matrix3","","",28],[10,"to_quaternion","","",28],[10,"identity","","",28],[10,"look_at","","",28],[10,"between_vectors","","",28],[10,"rotate_vector","","",28],[10,"concat","","",28],[10,"concat_self","","",28],[10,"invert","","",28],[10,"invert_self","","",28],[10,"approx_eq_eps","","",28],[10,"from_axis_angle","","",28],[10,"from_euler","","",28],[10,"from_angle_x","","",28],[10,"from_angle_y","","",28],[10,"from_angle_z","","",28],[10,"decode","","",14],[10,"encode","","",14],[10,"clone","","",14],[10,"identity","","",14],[10,"look_at","","",14],[10,"transform_vector","","",14],[10,"transform_point","","",14],[10,"concat","","",14],[10,"invert","","",14],[10,"to_matrix4","","",14],[10,"fmt","","",14],[10,"decode","","",15],[10,"encode","","",15],[10,"clone","","",15],[10,"identity","","",15],[10,"look_at","","",15],[10,"transform_vector","","",15],[10,"transform_point","","",15],[10,"concat","","",15],[10,"invert","","",15],[10,"to_matrix4","","",15],[10,"decode","","",16],[10,"encode","","",16],[10,"eq","","",16],[10,"ne","","",16],[10,"clone","","",16],[10,"to_perspective","","",16],[10,"to_frustum","","",16],[10,"to_matrix4","","",16],[10,"decode","","",17],[10,"encode","","",17],[10,"eq","","",17],[10,"ne","","",17],[10,"clone","","",17],[10,"to_frustum","","",17],[10,"to_matrix4","","",17],[10,"decode","","",18],[10,"encode","","",18],[10,"eq","","",18],[10,"ne","","",18],[10,"clone","","",18],[10,"to_frustum","","",18],[10,"to_matrix4","","",18],[10,"decode","","",19],[10,"encode","","",19],[10,"eq","","",19],[10,"ne","","",19],[10,"clone","","",19],[10,"new","","Construct a new axis-aligned bounding box from two points.",19],[10,"new","","",19],[10,"min","","",19],[10,"max","","",19],[10,"contains","","",19],[10,"fmt","","",19],[10,"decode","","",20],[10,"encode","","",20],[10,"eq","","",20],[10,"ne","","",20],[10,"clone","","",20],[10,"new","","Construct a new axis-aligned bounding box from two points.",20],[10,"new","","",20],[10,"min","","",20],[10,"max","","",20],[10,"contains","","",20],[10,"fmt","","",20],[10,"decode","","",21],[10,"encode","","",21],[10,"eq","","",21],[10,"ne","","",21],[10,"clone","","",21],[10,"decode","","",22],[10,"encode","","",22],[10,"eq","","",22],[10,"ne","","",22],[10,"clone","","",22],[10,"new","","Constructs a frustum",22],[10,"from_matrix4","","Extracts frustum planes from a projection matrix",22],[10,"decode","","",23],[10,"encode","","",23],[10,"eq","","",23],[10,"ne","","",23],[10,"clone","","",23],[10,"decode","","",24],[10,"encode","","",24],[10,"eq","","",24],[10,"ne","","",24],[10,"clone","","",24],[10,"decode","","",25],[10,"encode","","",25],[10,"eq","","",25],[10,"ne","","",25],[10,"clone","","",25],[10,"decode","","",26],[10,"encode","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"clone","","",26],[4,"Line2","",""],[4,"Line3","",""],[4,"Ray2","",""],[4,"Ray3","",""],[6,"Array1","","An array containing elements of type `Element`"],[10,"ptr","","Get the pointer to the first element of the array.",29],[10,"mut_ptr","","Get a mutable pointer to the first element of the array.",29],[10,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",29],[10,"replace_elem","","Replace an element in the array.",29],[9,"map","","Apply a function to each element.",29],[6,"Array2","","A column-major array"],[10,"ptr","","Get the pointer to the first element of the array.",30],[10,"mut_ptr","","Get a mutable pointer to the first element of the array.",30],[10,"swap_cols","","Swap two columns of this array.",30],[10,"replace_col","","Replace a column in the array.",30],[9,"row","","Get a row from this array by-value.",30],[9,"swap_rows","","Swap two rows of this array.",30],[10,"swap_elems","","Swap the values at index `a` and `b`",30],[9,"map","","Apply a function to each column.",30],[6,"FixedArray","","Homogeneous arrays of elements that can be converted to and from `[T, ..N]`\narrays."],[9,"into_fixed","","",31],[9,"as_fixed","","",31],[9,"as_mut_fixed","","",31],[9,"from_fixed","","",31],[9,"from_fixed_ref","","",31],[9,"from_fixed_mut","","",31],[6,"Matrix","",""],[9,"mul_s","","Multiply this matrix by a scalar, returning the new matrix.",32],[9,"div_s","","Divide this matrix by a scalar, returning the new matrix.",32],[9,"rem_s","","Take the remainder of this matrix by a scalar, returning the new\nmatrix.",32],[9,"add_m","","Add this matrix with another matrix, returning the new metrix.",32],[9,"sub_m","","Subtract another matrix from this matrix, returning the new matrix.",32],[9,"mul_v","","Multiplay a vector by this matrix, returning a new vector.",32],[9,"mul_m","","Multiply this matrix by another matrix, returning the new matrix.",32],[9,"neg_self","","Negate this matrix in-place (multiply by scalar -1).",32],[9,"mul_self_s","","Multiply this matrix by a scalar, in-place.",32],[9,"div_self_s","","Divide this matrix by a scalar, in-place.",32],[9,"rem_self_s","","Take the remainder of this matrix, in-place.",32],[9,"add_self_m","","Add this matrix with another matrix, in-place.",32],[9,"sub_self_m","","Subtract another matrix from this matrix, in-place.",32],[10,"mul_self_m","","Multiply this matrix by another matrix, in-place.",32],[9,"transpose","","Transpose this matrix, returning a new matrix.",32],[9,"transpose_self","","Transpose this matrix in-place.",32],[9,"determinant","","Take the determinant of this matrix.",32],[9,"diagonal","","Return a vector containing the diagonal of this matrix.",32],[10,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",32],[9,"invert","","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is\nthe identity matrix. Returns `None` if this matrix is not invertible\n(has a determinant of zero).",32],[10,"invert_self","","Invert this matrix in-place.",32],[10,"is_invertible","","Test if this matrix is invertible.",32],[10,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",32],[9,"is_diagonal","","Test if this is a diagonal matrix. That is, every element outside of\nthe diagonal is 0.",32],[9,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its\ntranspose.",32],[6,"ToMatrix2","","Represents types which can be converted to a Matrix2"],[9,"to_matrix2","","Convert this value to a Matrix2",33],[6,"ToMatrix3","","Represents types which can be converted to a Matrix3"],[9,"to_matrix3","","Convert this value to a Matrix3",34],[6,"ToMatrix4","","Represents types which can be converted to a Matrix4"],[9,"to_matrix4","","Convert this value to a Matrix4",35],[6,"ToQuaternion","","Represents types which can be expressed as a quaternion."],[9,"to_quaternion","","Convert this value to a quaternion.",36],[6,"Vector","","A trait that specifies a range of numeric operations for vectors. Not all\nof these make sense from a linear algebra point of view, but are included\nfor pragmatic reasons."],[9,"add_s","","Add a scalar to this vector, returning a new vector.",37],[9,"sub_s","","Subtract a scalar from this vector, returning a new vector.",37],[9,"mul_s","","Multiply this vector by a scalar, returning a new vector.",37],[9,"div_s","","Divide this vector by a scalar, returning a new vector.",37],[9,"rem_s","","Take the remainder of this vector by a scalar, returning a new vector.",37],[9,"add_v","","Add this vector to another, returning a new vector.",37],[9,"sub_v","","Subtract another vector from this one, returning a new vector.",37],[9,"mul_v","","Multiply this vector by another, returning a new vector.",37],[9,"div_v","","Divide this vector by another, returning a new vector.",37],[9,"rem_v","","Take the remainder of this vector by another, returning a new scalar.",37],[9,"neg_self","","Negate this vector in-place.",37],[9,"add_self_s","","Add a scalar to this vector in-place.",37],[9,"sub_self_s","","Subtract a scalar from this vector, in-place.",37],[9,"mul_self_s","","Multiply this vector by a scalar, in-place.",37],[9,"div_self_s","","Divide this vector by a scalar, in-place.",37],[9,"rem_self_s","","Take the remainder of this vector by a scalar, in-place.",37],[9,"add_self_v","","Add another vector to this one, in-place.",37],[9,"sub_self_v","","Subtract another vector from this one, in-place.",37],[9,"mul_self_v","","Multiply this matrix by another, in-place.",37],[9,"div_self_v","","Divide this matrix by anothor, in-place.",37],[9,"rem_self_v","","Take the remainder of this vector by another, in-place.",37],[9,"comp_add","","The sum of each component of the vector.",37],[9,"comp_mul","","The product of each component of the vector.",37],[10,"dot","","Vector dot product.",37],[9,"comp_min","","The minimum component of the vector.",37],[9,"comp_max","","The maximum component of the vector.",37],[6,"EuclideanVector","","Specifies geometric operations for vectors. This is only implemented for\n2-dimensional and 3-dimensional vectors."],[10,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",38],[10,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",38],[10,"length","","The norm of the vector.",38],[9,"angle","","The angle between the vector and `other`, in radians.",38],[10,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",38],[10,"normalize_to","","Returns a vector with the same direction and a given `length`.",38],[10,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",38],[10,"normalize_self","","Normalises the vector to a length of `1`.",38],[10,"normalize_self_to","","Normalizes the vector to `length`.",38],[10,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",38],[6,"Angle","","Operations on angles."],[9,"from","","Create a new angle from any other valid angle.",39],[10,"neg_self","","Negate this angle, in-place.",39],[10,"add_a","","Add this angle with another, returning the new angle.",39],[10,"sub_a","","Subtract another angle from this one, returning the new angle.",39],[10,"div_a","","Divide this angle by another, returning the ratio.",39],[10,"rem_a","","Take the remainder of this angle with another.",39],[10,"mul_s","","Multiply this angle by a scalar, returning the new angle.",39],[10,"div_s","","Divide this angle by a scalar, returing the new angle.",39],[10,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",39],[10,"add_self_a","","Add this angle with another, in-place.",39],[10,"sub_self_a","","Subtract another angle from this one, in-place.",39],[10,"mul_self_s","","Multiply this angle by a scalar, in-place.",39],[10,"div_self_s","","Divide this angle by a scalar, in-place.",39],[10,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",39],[10,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",39],[10,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",39],[10,"opposite","","Return the angle rotated by half a turn",39],[10,"bisect","","Returns the interior bisector of the two angles",39],[9,"full_turn","","",39],[10,"turn_div_2","","",39],[10,"turn_div_3","","",39],[10,"turn_div_4","","",39],[10,"turn_div_6","","",39],[10,"equiv","","",39],[6,"ToRad","","Represents types that can be converted to radians."],[9,"to_rad","","Convert this value to radians.",40],[6,"ToDeg","","Represents types that can be converted to degrees."],[9,"to_deg","","Convert this value to degrees.",41],[6,"Point","","Specifies the numeric operations for point types."],[9,"origin","","Create a point at the origin.",42],[9,"from_vec","","Create a point from a vector.",42],[9,"to_vec","","Convert a point to a vector.",42],[9,"mul_s","","Multiply each component by a scalar, returning the new point.",42],[9,"div_s","","Divide each component by a scalar, returning the new point.",42],[9,"rem_s","","Subtract a scalar from each component, returning the new point.",42],[9,"add_v","","Add a vector to this point, returning the new point.",42],[9,"sub_p","","Subtract another point from this one, returning a new vector.",42],[9,"mul_self_s","","Multiply each component by a scalar, in-place.",42],[9,"div_self_s","","Divide each component by a scalar, in-place.",42],[9,"rem_self_s","","Take the remainder of each component by a scalar, in-place.",42],[9,"add_self_v","","Add a vector to this point, in-place.",42],[9,"dot","","This is a weird one, but its useful for plane calculations.",42],[9,"min","","",42],[9,"max","","",42],[6,"Rotation","","A trait for a generic rotation. A rotation is a transformation that\ncreates a circular motion, and preserves at least one point in the space."],[9,"identity","","Create the identity transform (causes no transformation).",43],[9,"look_at","","Create a rotation to a given direction with an 'up' vector",43],[9,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'.\nBoth given vectors are assumed to have unit length.",43],[9,"rotate_vector","","Rotate a vector using this rotation.",43],[10,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",43],[10,"rotate_ray","","Rotate a ray using this rotation.",43],[9,"concat","","Create a new rotation which combines both this rotation, and another.",43],[9,"invert","","Create a new rotation which \"un-does\" this rotation. That is,\n`r.concat(r.invert())` is the identity.",43],[10,"concat_self","","Modify this rotation in-place by combining it with another.",43],[10,"invert_self","","Invert this rotation in-place.",43],[6,"Rotation2","","A two-dimensional rotation."],[9,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both\nfrom_axis_angle() and from_euler() for 2D space.",44],[6,"Rotation3","","A three-dimensional rotation."],[9,"from_axis_angle","","Create a rotation using an angle around a given axis.",45],[9,"from_euler","","Create a rotation from a set of euler angles.",45],[10,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",45],[10,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",45],[10,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",45],[6,"ToBasis2","","Represents types which can be converted to a rotation matrix."],[9,"to_rot2","","Convert this type to a rotation matrix.",46],[6,"ToBasis3","","Represents types which can be converted to a rotation matrix."],[9,"to_rot3","","Convert this type to a rotation matrix.",47],[6,"Transform","","A trait representing an [affine\ntransformation](https://en.wikipedia.org/wiki/Affine_transformation) that\ncan be applied to points or vectors. An affine transformation is one which"],[9,"identity","","Create an identity transformation. That is, a transformation which\ndoes nothing.",48],[9,"look_at","","Create a transformation that rotates a vector to look at `center` from\n`eye`, using `up` for orientation.",48],[9,"transform_vector","","Transform a vector using this transform.",48],[9,"transform_point","","Transform a point using this transform.",48],[10,"transform_ray","","Transform a ray using this transform.",48],[10,"transform_as_point","","Transform a vector as a point using this transform.",48],[9,"concat","","Combine this transform with another, yielding a new transformation\nwhich has the effects of both.",48],[9,"invert","","Create a transform that \"un-does\" this one.",48],[10,"concat_self","","Combine this transform with another, in-place.",48],[10,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",48],[6,"Transform3","",""],[6,"Projection","",""],[9,"to_frustum","","",49],[6,"Aabb","",""],[9,"new","","Create a new AABB using two points as opposing corners.",50],[9,"min","","Return a shared reference to the point nearest to (-inf, -inf).",50],[9,"max","","Return a shared reference to the point nearest to (inf, inf).",50],[10,"dim","","Return the dimensions of this AABB.",50],[10,"volume","","Return the volume this AABB encloses.",50],[10,"center","","Return the center point of this AABB.",50],[9,"contains","","Tests whether a point is cointained in the box, inclusive for min corner\nand exclusive for the max corner.",50],[10,"grow","","Returns a new AABB that is grown to include the given point.",50],[10,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",50],[10,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",50],[10,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",50],[6,"Intersect","",""],[9,"intersection","","",51],[6,"ApproxEq","",""],[10,"approx_epsilon","","",52],[10,"approx_eq","","",52],[9,"approx_eq_eps","","",52],[6,"PartialOrd","","A trait providing a [partial ordering](http://mathworld.wolfram.com/PartialOrder.html)."],[9,"partial_min","","",53],[9,"partial_max","","",53],[6,"BaseNum","","Base numeric types with partial ordering"],[6,"BaseInt","","Base integer types"],[6,"BaseFloat","","Base floating point types"],[6,"One","","Multiplicative neutral element"],[9,"one","","",54],[6,"Zero","","Additive neutral element"],[9,"zero","","",55],[9,"is_zero","","",55],[15,"assert_approx_eq_eps!","",""],[15,"assert_approx_eq!","",""],[10,"ptr","","Get the pointer to the first element of the array.",29],[10,"mut_ptr","","Get a mutable pointer to the first element of the array.",29],[10,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",29],[10,"replace_elem","","Replace an element in the array.",29],[10,"ptr","","Get the pointer to the first element of the array.",30],[10,"mut_ptr","","Get a mutable pointer to the first element of the array.",30],[10,"swap_cols","","Swap two columns of this array.",30],[10,"replace_col","","Replace a column in the array.",30],[10,"swap_elems","","Swap the values at index `a` and `b`",30],[10,"mul_self_m","","Multiply this matrix by another matrix, in-place.",32],[10,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",32],[10,"invert_self","","Invert this matrix in-place.",32],[10,"is_invertible","","Test if this matrix is invertible.",32],[10,"is_identity","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",32],[10,"dot","","Vector dot product.",37],[10,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",38],[10,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",38],[10,"length","","The norm of the vector.",38],[10,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",38],[10,"normalize_to","","Returns a vector with the same direction and a given `length`.",38],[10,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",38],[10,"normalize_self","","Normalises the vector to a length of `1`.",38],[10,"normalize_self_to","","Normalizes the vector to `length`.",38],[10,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",38],[10,"neg_self","","Negate this angle, in-place.",39],[10,"add_a","","Add this angle with another, returning the new angle.",39],[10,"sub_a","","Subtract another angle from this one, returning the new angle.",39],[10,"div_a","","Divide this angle by another, returning the ratio.",39],[10,"rem_a","","Take the remainder of this angle with another.",39],[10,"mul_s","","Multiply this angle by a scalar, returning the new angle.",39],[10,"div_s","","Divide this angle by a scalar, returing the new angle.",39],[10,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",39],[10,"add_self_a","","Add this angle with another, in-place.",39],[10,"sub_self_a","","Subtract another angle from this one, in-place.",39],[10,"mul_self_s","","Multiply this angle by a scalar, in-place.",39],[10,"div_self_s","","Divide this angle by a scalar, in-place.",39],[10,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",39],[10,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",39],[10,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",39],[10,"opposite","","Return the angle rotated by half a turn",39],[10,"bisect","","Returns the interior bisector of the two angles",39],[10,"turn_div_2","","",39],[10,"turn_div_3","","",39],[10,"turn_div_4","","",39],[10,"turn_div_6","","",39],[10,"equiv","","",39],[10,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",43],[10,"rotate_ray","","Rotate a ray using this rotation.",43],[10,"concat_self","","Modify this rotation in-place by combining it with another.",43],[10,"invert_self","","Invert this rotation in-place.",43],[10,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",45],[10,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",45],[10,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",45],[10,"transform_ray","","Transform a ray using this transform.",48],[10,"transform_as_point","","Transform a vector as a point using this transform.",48],[10,"concat_self","","Combine this transform with another, in-place.",48],[10,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",48],[10,"dim","","Return the dimensions of this AABB.",50],[10,"volume","","Return the volume this AABB encloses.",50],[10,"center","","Return the center point of this AABB.",50],[10,"grow","","Returns a new AABB that is grown to include the given point.",50],[10,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",50],[10,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",50],[10,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",50],[10,"approx_epsilon","","",52],[10,"approx_eq","","",52]],"paths":[[1,"Matrix2"],[1,"Matrix3"],[1,"Matrix4"],[1,"Quaternion"],[1,"Vector2"],[1,"Vector3"],[1,"Vector4"],[1,"Rad"],[1,"Deg"],[1,"Plane"],[1,"Point2"],[1,"Point3"],[1,"Line"],[1,"Ray"],[1,"Decomposed"],[1,"AffineMatrix3"],[1,"PerspectiveFov"],[1,"Perspective"],[1,"Ortho"],[1,"Aabb2"],[1,"Aabb3"],[1,"Cylinder"],[1,"Frustum"],[1,"FrustumPoints"],[1,"Obb2"],[1,"Obb3"],[1,"Sphere"],[1,"Basis2"],[1,"Basis3"],[6,"Array1"],[6,"Array2"],[6,"FixedArray"],[6,"Matrix"],[6,"ToMatrix2"],[6,"ToMatrix3"],[6,"ToMatrix4"],[6,"ToQuaternion"],[6,"Vector"],[6,"EuclideanVector"],[6,"Angle"],[6,"ToRad"],[6,"ToDeg"],[6,"Point"],[6,"Rotation"],[6,"Rotation2"],[6,"Rotation3"],[6,"ToBasis2"],[6,"ToBasis3"],[6,"Transform"],[6,"Projection"],[6,"Aabb"],[6,"Intersect"],[6,"ApproxEq"],[6,"PartialOrd"],[6,"One"],[6,"Zero"]]};

searchIndex['glutin'] = {"items":[[0,"","glutin","The purpose of this library is to provide an OpenGL context on as many\n platforms as possible."],[1,"MonitorID","","Identifier for a monitor."],[1,"WindowBuilder","","Object that allows you to build windows."],[1,"Window","","Represents an OpenGL context and the Window or environment around it."],[1,"WindowProxy","","Represents a thread safe subset of operations that can be called\non a window. This structure can be safely cloned and sent between\nthreads.\n"],[1,"PollEventsIterator","","An iterator for the `poll_events` function."],[1,"WaitEventsIterator","","An iterator for the `wait_events` function."],[1,"AvailableMonitorsIter","","An iterator for the list of available monitors."],[2,"Event","",""],[12,"Resized","","The size of the window has changed.",0],[12,"Moved","","The position of the window has changed.",0],[12,"Closed","","The window has been closed.",0],[12,"ReceivedCharacter","","The window received a unicode character.",0],[12,"Focused","","The window gained or lost focus.",0],[12,"KeyboardInput","","An event from the keyboard has been received.",0],[12,"MouseMoved","","The cursor has moved on the window.",0],[12,"MouseWheel","","A positive value indicates that the wheel was rotated forward, away from the user;\na negative value indicates that the wheel was rotated backward, toward the user.",0],[12,"MouseInput","","An event from the mouse has been received.",0],[12,"Awakened","","The event loop was woken up by another thread.",0],[2,"ElementState","",""],[12,"Pressed","","",1],[12,"Released","","",1],[2,"MouseButton","",""],[12,"LeftMouseButton","","",2],[12,"RightMouseButton","","",2],[12,"MiddleMouseButton","","",2],[12,"OtherMouseButton","","",2],[2,"VirtualKeyCode","",""],[12,"Key1","","The '1' key over the letters.",3],[12,"Key2","","The '2' key over the letters.",3],[12,"Key3","","The '3' key over the letters.",3],[12,"Key4","","The '4' key over the letters.",3],[12,"Key5","","The '5' key over the letters.",3],[12,"Key6","","The '6' key over the letters.",3],[12,"Key7","","The '7' key over the letters.",3],[12,"Key8","","The '8' key over the letters.",3],[12,"Key9","","The '9' key over the letters.",3],[12,"Key0","","The '0' key over the 'O' and 'P' keys.",3],[12,"A","","",3],[12,"B","","",3],[12,"C","","",3],[12,"D","","",3],[12,"E","","",3],[12,"F","","",3],[12,"G","","",3],[12,"H","","",3],[12,"I","","",3],[12,"J","","",3],[12,"K","","",3],[12,"L","","",3],[12,"M","","",3],[12,"N","","",3],[12,"O","","",3],[12,"P","","",3],[12,"Q","","",3],[12,"R","","",3],[12,"S","","",3],[12,"T","","",3],[12,"U","","",3],[12,"V","","",3],[12,"W","","",3],[12,"X","","",3],[12,"Y","","",3],[12,"Z","","",3],[12,"Escape","","The Escape key, next to F1.",3],[12,"F1","","",3],[12,"F2","","",3],[12,"F3","","",3],[12,"F4","","",3],[12,"F5","","",3],[12,"F6","","",3],[12,"F7","","",3],[12,"F8","","",3],[12,"F9","","",3],[12,"F10","","",3],[12,"F11","","",3],[12,"F12","","",3],[12,"F13","","",3],[12,"F14","","",3],[12,"F15","","",3],[12,"Snapshot","","Print Screen/SysRq.",3],[12,"Scroll","","Scroll Lock.",3],[12,"Pause","","Pause/Break key, next to Scroll lock.",3],[12,"Insert","","`Insert`, next to Backspace.",3],[12,"Home","","",3],[12,"Delete","","",3],[12,"End","","",3],[12,"PageDown","","",3],[12,"PageUp","","",3],[12,"Left","","",3],[12,"Up","","",3],[12,"Right","","",3],[12,"Down","","",3],[12,"Back","","The Backspace key, right over Enter.",3],[12,"Return","","The Enter key.",3],[12,"Space","","The space bar.",3],[12,"Numlock","","",3],[12,"Numpad0","","",3],[12,"Numpad1","","",3],[12,"Numpad2","","",3],[12,"Numpad3","","",3],[12,"Numpad4","","",3],[12,"Numpad5","","",3],[12,"Numpad6","","",3],[12,"Numpad7","","",3],[12,"Numpad8","","",3],[12,"Numpad9","","",3],[12,"AbntC1","","",3],[12,"AbntC2","","",3],[12,"Add","","",3],[12,"Apostrophe","","",3],[12,"Apps","","",3],[12,"At","","",3],[12,"Ax","","",3],[12,"Backslash","","",3],[12,"Calculator","","",3],[12,"Capital","","",3],[12,"Colon","","",3],[12,"Comma","","",3],[12,"Convert","","",3],[12,"Decimal","","",3],[12,"Divide","","",3],[12,"Equals","","",3],[12,"Grave","","",3],[12,"Kana","","",3],[12,"Kanji","","",3],[12,"LAlt","","",3],[12,"LBracket","","",3],[12,"LControl","","",3],[12,"LMenu","","",3],[12,"LShift","","",3],[12,"LWin","","",3],[12,"Mail","","",3],[12,"MediaSelect","","",3],[12,"MediaStop","","",3],[12,"Minus","","",3],[12,"Multiply","","",3],[12,"Mute","","",3],[12,"MyComputer","","",3],[12,"NextTrack","","",3],[12,"NoConvert","","",3],[12,"NumpadComma","","",3],[12,"NumpadEnter","","",3],[12,"NumpadEquals","","",3],[12,"OEM102","","",3],[12,"Period","","",3],[12,"Playpause","","",3],[12,"Power","","",3],[12,"Prevtrack","","",3],[12,"RAlt","","",3],[12,"RBracket","","",3],[12,"RControl","","",3],[12,"RMenu","","",3],[12,"RShift","","",3],[12,"RWin","","",3],[12,"Semicolon","","",3],[12,"Slash","","",3],[12,"Sleep","","",3],[12,"Stop","","",3],[12,"Subtract","","",3],[12,"Sysrq","","",3],[12,"Tab","","",3],[12,"Underline","","",3],[12,"Unlabeled","","",3],[12,"VolumeDown","","",3],[12,"VolumeUp","","",3],[12,"Wake","","",3],[12,"Webback","","",3],[12,"WebFavorites","","",3],[12,"WebForward","","",3],[12,"WebHome","","",3],[12,"WebRefresh","","",3],[12,"WebSearch","","",3],[12,"WebStop","","",3],[12,"Yen","","",3],[2,"CreationError","","Error that can happen while creating a window or a headless renderer."],[12,"OsError","","",4],[12,"NotSupported","","",4],[2,"Api","","All APIs related to OpenGL that you can possibly get while using glutin."],[12,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",5],[12,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",5],[3,"get_available_monitors","","Returns the list of all available monitors."],[3,"get_primary_monitor","","Returns the primary monitor of the system."],[10,"fmt","","",0],[10,"clone","","",0],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"hash","","",1],[10,"fmt","","",1],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"hash","","",2],[10,"fmt","","",2],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"hash","","",3],[10,"fmt","","",3],[4,"ScanCode","",""],[10,"fmt","","",0],[10,"clone","","",0],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"hash","","",1],[10,"fmt","","",1],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"hash","","",2],[10,"fmt","","",2],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"hash","","",3],[10,"fmt","","",3],[10,"eq","","",4],[10,"ne","","",4],[10,"fmt","","",4],[10,"clone","","",4],[10,"description","","",4],[10,"eq","","",5],[10,"ne","","",5],[10,"clone","","",5],[10,"fmt","","",5],[10,"new","","Initializes a new `WindowBuilder` with default values.",6],[10,"with_dimensions","","Requests the window to be of specific dimensions.",6],[10,"with_title","","Requests a specific title for the window.",6],[10,"with_fullscreen","","Requests fullscreen mode.",6],[10,"with_shared_lists","","The created window will share all its OpenGL objects with the window in the parameter.",6],[10,"with_gl_version","","Requests to use a specific OpenGL version.",6],[10,"with_gl_debug_flag","","Sets the *debug* flag for the OpenGL context.",6],[10,"with_vsync","","Requests that the window has vsync enabled.",6],[10,"with_visibility","","Sets whether the window will be initially hidden or visible.",6],[10,"with_multisampling","","Sets the multisampling level to request.",6],[10,"with_depth_buffer","","Sets the number of bits in the depth buffer.",6],[10,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",6],[10,"with_pixel_format","","Sets the number of bits in the color buffer.",6],[10,"with_stereoscopy","","Request the backend to be stereoscopic.",6],[10,"build","","Builds the window.",6],[10,"build_strict","","Builds the window.",6],[10,"default","","",7],[10,"new","","Creates a new OpenGL context, and a Window for platforms where this is appropriate.",7],[10,"is_closed","","Returns true if the window has previously been closed by the user.",7],[10,"should_close","","Returns true if the window has previously been closed by the user.",7],[10,"set_title","","Modifies the title of the window.",7],[10,"show","","Shows the window if it was hidden.",7],[10,"hide","","Hides the window if it was visible.",7],[10,"get_position","","Returns the position of the top-left hand corner of the window relative to the\n top-left hand corner of the desktop.",7],[10,"set_position","","Modifies the position of the window.",7],[10,"get_inner_size","","Returns the size in pixels of the client area of the window.",7],[10,"get_outer_size","","Returns the size in pixels of the window.",7],[10,"set_inner_size","","Modifies the inner size of the window.",7],[10,"poll_events","","Returns an iterator to all the events that are currently in the window's events queue.",7],[10,"wait_events","","Waits for an event, then returns an iterator to all the events that are currently\n in the window's events queue.",7],[10,"make_current","","Sets the context as the current context.",7],[10,"get_proc_address","","Returns the address of an OpenGL function.",7],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",7],[10,"platform_display","","Gets the native platform specific display for this window.\nThis is typically only required when integrating with\nother libraries that need this information.",7],[10,"get_api","","Returns the API that is currently provided by this window.",7],[10,"create_window_proxy","","Create a window proxy for this window, that can be freely\npassed to different threads.",7],[10,"set_window_resize_callback","","Sets a resize callback that is called by Mac (and potentially other\noperating systems) during resize operations. This can be used to repaint\nduring window resizing.",7],[10,"get_proc_addr","","",7],[10,"clone","","",8],[10,"wakeup_event_loop","","Triggers a blocked event loop to wake up. This is\ntypically called when another thread wants to wake\nup the blocked rendering thread to cause a refresh.",8],[4,"Item","",""],[10,"next","","",9],[4,"Item","",""],[10,"next","","",10],[4,"Item","",""],[10,"next","","",11],[10,"get_name","","Returns a human-readable name of the monitor.",12],[10,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",12]],"paths":[[2,"Event"],[2,"ElementState"],[2,"MouseButton"],[2,"VirtualKeyCode"],[2,"CreationError"],[2,"Api"],[1,"WindowBuilder"],[1,"Window"],[1,"WindowProxy"],[1,"PollEventsIterator"],[1,"WaitEventsIterator"],[1,"AvailableMonitorsIter"],[1,"MonitorID"]]};

searchIndex['image'] = {"items":[[0,"","image","This crate provides native rust implementations of\nImage encoders and decoders and basic image manipulation\nfunctions."],[1,"Luma","","Grayscale colors"],[1,"LumaA","","Grayscale colors + alpha channel"],[1,"Rgb","","RGB colors"],[1,"Rgba","","RGB colors + alpha channel"],[1,"SubImage","","A View into another image"],[1,"ImageBuffer","","Generic image buffer"],[1,"Pixels","","Immutable pixel iterator"],[1,"MutPixels","","Mutable pixel iterator"],[1,"Frame","","A single animation frame"],[1,"Frames","","Hold the frames of the animated image"],[2,"ColorType","","An enumeration over supported color types and their bit depths"],[12,"Grey","","Pixel is greyscale",0],[12,"RGB","","Pixel contains R, G and B channels",0],[12,"Palette","","Pixel is an index into a color palette",0],[12,"GreyA","","Pixel is greyscale with an alpha channel",0],[12,"RGBA","","Pixel is RGB with an alpha channel",0],[2,"ImageError","","An enumeration of Image Errors"],[12,"FormatError","","The Image is not formatted properly",1],[12,"DimensionError","","The Image's dimensions are either too small or too large",1],[12,"UnsupportedError","","The Decoder does not support this image format",1],[12,"UnsupportedColor","","The Decoder does not support this color type",1],[12,"NotEnoughData","","Not enough data was provided to the Decoder\nto decode the image",1],[12,"IoError","","An I/O Error occurred while decoding the image",1],[12,"ImageEnd","","The end of the image has been reached",1],[2,"ImageFormat","","An enumeration of supported image formats.\nNot all formats support both encoding and decoding."],[12,"PNG","","An Image in PNG Format",2],[12,"JPEG","","An Image in JPEG Format",2],[12,"GIF","","An Image in GIF Format",2],[12,"WEBP","","An Image in WEBP Format",2],[12,"PPM","","An Image in PPM Format",2],[12,"TIFF","","An Image in TIFF Format",2],[12,"TGA","","An Image in TGA Format",2],[2,"FilterType","","Available Sampling Filters"],[12,"Nearest","","Nearest Neighbor",3],[12,"Triangle","","Linear Filter",3],[12,"CatmullRom","","Cubic Filter",3],[12,"Gaussian","","Gaussian Filter",3],[12,"Lanczos3","","Lanczos with window 3",3],[2,"DynamicImage","","A Dynamic Image"],[12,"ImageLuma8","","Each pixel in this image is 8-bit Luma",4],[12,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",4],[12,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",4],[12,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",4],[3,"open","","Open the image located at the path specified.\nThe image's format is determined from the path's file extension."],[3,"load","","Create a new image from a Reader"],[3,"load_from_memory","","Create a new image from a byte slice\nMakes an educated guess about the image format.\nTGA is not supported by this function."],[3,"load_from_memory_with_format","","Create a new image from a byte slice"],[3,"save_buffer","","Saves the supplied buffer to a file at the path specified."],[0,"imageops","","Image Processing Functions"],[3,"rotate90","image::imageops","Rotate an image 90 degrees clockwise."],[3,"rotate180","","Rotate an image 180 degrees clockwise."],[3,"rotate270","","Rotate an image 270 degrees clockwise."],[3,"flip_horizontal","","Flip an image horizontally"],[3,"flip_vertical","","Flip an image vertically"],[3,"filter3x3","","Perform a 3x3 box filter on the supplied image.\n```kernel``` is an array of the filter weights of length 9."],[3,"resize","","Resize the supplied image to the specified dimensions\n```nwidth``` and ```nheight``` are the new dimensions.\n```filter``` is the sampling filter to use."],[3,"blur","","Performs a Gaussian blur on the supplied image.\n```sigma``` is a measure of how much to blur by."],[3,"unsharpen","","Performs an unsharpen mask on the supplied image\n```sigma``` is the amount to blur the image by.\n```threshold``` is the threshold for the difference between\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking"],[3,"grayscale","","Convert the supplied image to grayscale"],[3,"invert","","Invert each pixel within the supplied image\nThis function operates in place."],[3,"contrast","","Adjust the contrast of the supplied image\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast."],[3,"brighten","","Brighten the supplied image\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it."],[3,"crop","","Return a mutable view into an image"],[3,"overlay","","Overlay an image at a given coordinate (x, y)"],[0,"webp","image","Decoding of Webp Images"],[1,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder."],[10,"new","","Create a new WebpDecoder from the Reader ```r```.\nThis function takes ownership of the Reader.",5],[10,"dimensions","","",5],[10,"colortype","","",5],[10,"row_len","","",5],[10,"read_scanline","","",5],[10,"read_image","","",5],[0,"vp8","","An implementation of the VP8 Video Codec"],[1,"Frame","image::webp::vp8","A Representation of the last decoded video frame"],[11,"width","","The width of the luma plane",6],[11,"height","","The height of the luma plane",6],[11,"ybuf","","The luma plane of the frame",6],[11,"keyframe","","Indicates whether this frame is a keyframe",6],[11,"for_display","","Indicates whether this frame is intended for display",6],[11,"pixel_type","","The pixel type of the frame as defined by Section 9.2\nof the VP8 Specification",6],[1,"VP8Decoder","","VP8 Decoder\nOnly decodes keyframes"],[10,"clone","","",6],[10,"fmt","","",6],[10,"default","","",6],[10,"new","","Create a new decoder.\nThe reader must present a raw vp8 bitstream to the decoder",7],[10,"decode_frame","","Decodes the current frame and returns a reference to it",7],[0,"ppm","image","Encoding of portable pixmap Images"],[1,"PPMEncoder","image::ppm","A representation of a PPM encoder."],[10,"new","","Create a new PPMEncoder from the Writer ```w```.\nThis function takes ownership of the Writer.",8],[10,"encode","","Encode the buffer ```im``` as a PPM image.\n```width``` and ```height``` are the dimensions of the buffer.\n```color``` is the buffers ColorType.",8],[0,"png","image","Decoding and Encoding of PNG Images"],[1,"PNGDecoder","image::png","The representation of a PNG decoder"],[1,"PNGEncoder","","The representation of a PNG encoder"],[10,"new","","Create a new decoder that decodes from the stream ```r```",9],[10,"palette","","Returns a reference to the color palette used for indexed\ncolor images.\nEach array element is a tuple of RGB values.",9],[10,"dimensions","","",9],[10,"colortype","","",9],[10,"row_len","","",9],[10,"read_scanline","","",9],[10,"read_image","","",9],[10,"new","","Create a new encoder that writes its output to ```w```",10],[10,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```",10],[0,"zlib","","An Implementation of RFC 1950"],[1,"ZlibDecoder","image::png::zlib","A Zlib compressed stream decoder."],[10,"new","","Create a new decoder that decodes from a Reader",11],[10,"inner","","Return a mutable reference to the wrapped Reader",11],[10,"read","","",11],[0,"deflate","image::png","An Implementation of RFC 1951"],[1,"Inflater","image::png::deflate","A DEFLATE compressed stream decoder."],[10,"new","","Create a new decoder that decodes from a Reader",12],[10,"eof","","Indicate whether the end of the stream has been reached.",12],[10,"inner","","Return a mutable reference to the wrapped Reader",12],[10,"read","","",12],[0,"hash","image::png","This module provides implementations of common hashing algorithms."],[1,"Adler32","image::png::hash","An Implementation of the Adler-32 checksum"],[1,"Crc32","","An Implementation of the Crc-32 checksum"],[10,"new","","Create a new hasher.",13],[10,"update","","Update the internal hasher with the bytes from ```buf```",13],[10,"checksum","","Return the computed hash.",13],[10,"reset","","Reset this hasher to its initial state.",13],[10,"new","","Create a new hasher.",14],[10,"update","","Update the internal hasher with the bytes from ```buf```",14],[10,"checksum","","Return the computed hash.",14],[10,"reset","","Reset this hasher to its initial state.",14],[0,"jpeg","image","Decoding and Encoding of JPEG Images"],[1,"JPEGDecoder","image::jpeg","The representation of a JPEG decoder"],[1,"JPEGEncoder","","The representation of a JPEG encoder"],[1,"Component","","A representation of a JPEG component"],[11,"id","","The Component's identifier",15],[11,"h","","Horizontal sampling factor",15],[11,"v","","Vertical sampling factor",15],[11,"tq","","The quantization table selector",15],[11,"dc_table","","Index to the Huffman DC Table",15],[11,"ac_table","","Index to the AC Huffman Table",15],[11,"dc_pred","","The dc prediction of the component",15],[10,"new","","Create a new encoder that writes its output to ```w```",16],[10,"encode","","Encodes the image ```image```\nthat has dimensions ```width``` and ```height```\nand ```ColorType``` ```c```\nThe Image in encoded with subsampling ratio 4:2:2",16],[10,"clone","","",15],[10,"new","","Create a new decoder that decodes from the stream ```r```",17],[10,"dimensions","","",17],[10,"colortype","","",17],[10,"row_len","","",17],[10,"read_scanline","","",17],[10,"read_image","","",17],[0,"gif","image","Decoding of GIF Images"],[1,"GIFDecoder","image::gif","A gif decoder"],[10,"new","","Creates a new GIF decoder",18],[10,"dimensions","","",18],[10,"colortype","","",18],[10,"row_len","","",18],[10,"read_scanline","","",18],[10,"read_image","","",18],[0,"lzw","","This modules provides an implementation of the Lempel–Ziv–Welch Compression Algorithm"],[3,"decode","image::gif::lzw","Decodes a lzw compressed stream"],[0,"tiff","image","Decoding and Encoding of TIFF Images"],[1,"TIFFDecoder","image::tiff","The representation of a PNG decoder"],[2,"ByteOrder","","Byte order of the TIFF file."],[12,"LittleEndian","","little endian byte order",19],[12,"BigEndian","","big endian byte order",19],[10,"fmt","","",19],[10,"fmt","","",20],[10,"new","","Create a new decoder that decodes from the stream ```r```",20],[10,"init","","Initializes the decoder.",20],[10,"next_image","","Reads in the next image.\nIf there is no further image in the TIFF file a format error is return.\nTo determine whether there are more images call `TIFFDecoder::more_images` instead.",20],[10,"more_images","","Returns `true` if there is at least one more image available.",20],[10,"byte_order","","Returns the byte_order",20],[10,"read_short","","Reads a TIFF short value",20],[10,"read_long","","Reads a TIFF long value",20],[10,"read_offset","","Reads a TIFF IFA offset/value field",20],[10,"goto_offset","","Moves the cursor to the specified offset",20],[10,"dimensions","","",20],[10,"colortype","","",20],[10,"row_len","","",20],[10,"read_scanline","","",20],[10,"read_image","","",20],[0,"tga","image","Decoding of TGA Images"],[1,"TGADecoder","image::tga","The representation of a TGA decoder"],[10,"new","","Create a new decoder that decodes from the stream `r`",21],[10,"dimensions","","",21],[10,"colortype","","",21],[10,"row_len","","",21],[10,"read_scanline","","",21],[10,"read_image","","",21],[10,"eq","image","",1],[10,"ne","","",1],[10,"fmt","","",1],[10,"from_error","","",1],[10,"fmt","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"next","","",22],[10,"next","","",23],[10,"new","","Construct a new subimage",24],[10,"inner_mut","","Returns a mutable reference to the wrapped image.",24],[10,"change_bounds","","Change the coordinates of this subimage.",24],[10,"to_image","","Convert this subimage to an ImageBuffer",24],[10,"dimensions","","",24],[10,"bounds","","",24],[10,"get_pixel","","",24],[10,"put_pixel","","",24],[10,"blend_pixel","","",24],[10,"get_pixel_mut","","",24],[10,"to_rgb","","Returns a copy of this image as an RGB image.",4],[10,"to_rgba","","Returns a copy of this image as an RGBA image.",4],[10,"to_luma","","Returns a copy of this image as a Luma image.",4],[10,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",4],[10,"crop","","Return a cut out of this image delimited by the bounding rectangle.",4],[10,"as_rgb8","","Return a reference to an 8bit RGB image",4],[10,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",4],[10,"as_rgba8","","Return a reference to an 8bit RGBA image",4],[10,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",4],[10,"as_luma8","","Return a reference to an 8bit Grayscale image",4],[10,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",4],[10,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",4],[10,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",4],[10,"raw_pixels","","Return this image's pixels as a byte vector.",4],[10,"color","","Return this image's color type.",4],[10,"grayscale","","Return a grayscale version of this image.",4],[10,"invert","","Invert the colors of this image.\nThis method operates inplace.",4],[10,"resize","","Resize this image using the specified filter algorithm.\nReturns a new image. The image's aspect ratio is preserved.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[10,"resize_exact","","Resize this image using the specified filter algorithm.\nReturns a new image. Does not preserve aspect ratio.\n```nwidth``` and ```nheight``` are the new image's dimensions",4],[10,"blur","","Performs a Gaussian blur on this image.\n```sigma``` is a measure of how much to blur by.",4],[10,"unsharpen","","Performs an unsharpen mask on this image\n```sigma``` is the amount to blur the image by.\n```threshold``` is a control of how much to sharpen.\nsee https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking",4],[10,"filter3x3","","Filters this image with the specified 3x3 kernel.",4],[10,"adjust_contrast","","Adjust the contrast of this image.\n```contrast``` is the amount to adjust the contrast by.\nNegative values decrease the contrast and positive values increase the contrast.",4],[10,"brighten","","Brighten the pixels of this image.\n```value``` is the amount to brighten each pixel by.\nNegative values decrease the brightness and positive values increase it.",4],[10,"flipv","","Flip this image vertically",4],[10,"fliph","","Flip this image horizontally",4],[10,"rotate90","","Rotate this image 90 degrees clockwise.",4],[10,"rotate180","","Rotate this image 180 degrees clockwise.",4],[10,"rotate270","","Rotate this image 270 degrees clockwise.",4],[10,"save","","Encode this image and write it to ```w```",4],[10,"dimensions","","",4],[10,"bounds","","",4],[10,"get_pixel","","",4],[10,"put_pixel","","",4],[10,"blend_pixel","","",4],[10,"get_pixel_mut","","",4],[10,"clone","","",0],[10,"fmt","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"fmt","","",25],[10,"clone","","",25],[10,"eq","","",25],[10,"ne","","",25],[10,"channel_count","","",25],[10,"color_model","","",25],[10,"channels","","",25],[10,"channels_mut","","",25],[10,"channels4","","",25],[10,"from_channels","","",25],[10,"from_slice","","",25],[10,"from_slice_mut","","",25],[10,"to_rgb","","",25],[10,"to_rgba","","",25],[10,"to_luma","","",25],[10,"to_luma_alpha","","",25],[10,"map","","",25],[10,"apply","","",25],[10,"map_with_alpha","","",25],[10,"apply_with_alpha","","",25],[10,"map2","","",25],[10,"apply2","","",25],[10,"invert","","",25],[10,"blend","","",25],[10,"index","","",25],[10,"index_mut","","",25],[10,"fmt","","",26],[10,"clone","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"channel_count","","",26],[10,"color_model","","",26],[10,"channels","","",26],[10,"channels_mut","","",26],[10,"channels4","","",26],[10,"from_channels","","",26],[10,"from_slice","","",26],[10,"from_slice_mut","","",26],[10,"to_rgb","","",26],[10,"to_rgba","","",26],[10,"to_luma","","",26],[10,"to_luma_alpha","","",26],[10,"map","","",26],[10,"apply","","",26],[10,"map_with_alpha","","",26],[10,"apply_with_alpha","","",26],[10,"map2","","",26],[10,"apply2","","",26],[10,"invert","","",26],[10,"blend","","",26],[10,"index","","",26],[10,"index_mut","","",26],[10,"fmt","","",27],[10,"clone","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"channel_count","","",27],[10,"color_model","","",27],[10,"channels","","",27],[10,"channels_mut","","",27],[10,"channels4","","",27],[10,"from_channels","","",27],[10,"from_slice","","",27],[10,"from_slice_mut","","",27],[10,"to_rgb","","",27],[10,"to_rgba","","",27],[10,"to_luma","","",27],[10,"to_luma_alpha","","",27],[10,"map","","",27],[10,"apply","","",27],[10,"map_with_alpha","","",27],[10,"apply_with_alpha","","",27],[10,"map2","","",27],[10,"apply2","","",27],[10,"invert","","",27],[10,"blend","","",27],[10,"index","","",27],[10,"index_mut","","",27],[10,"fmt","","",28],[10,"clone","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"channel_count","","",28],[10,"color_model","","",28],[10,"channels","","",28],[10,"channels_mut","","",28],[10,"channels4","","",28],[10,"from_channels","","",28],[10,"from_slice","","",28],[10,"from_slice_mut","","",28],[10,"to_rgb","","",28],[10,"to_rgba","","",28],[10,"to_luma","","",28],[10,"to_luma_alpha","","",28],[10,"map","","",28],[10,"apply","","",28],[10,"map_with_alpha","","",28],[10,"apply_with_alpha","","",28],[10,"map2","","",28],[10,"apply2","","",28],[10,"invert","","",28],[10,"blend","","",28],[10,"index","","",28],[10,"index_mut","","",28],[10,"from_color","","",26],[10,"from_color","","",26],[10,"from_color","","",26],[10,"from_color","","",28],[10,"from_color","","",28],[10,"from_color","","",28],[10,"from_color","","",27],[10,"from_color","","",27],[10,"from_color","","",27],[10,"from_color","","",25],[10,"from_color","","",25],[10,"from_color","","",25],[10,"blend","","",28],[10,"blend","","",26],[10,"blend","","",27],[10,"blend","","",25],[10,"invert","","",28],[10,"invert","","",26],[10,"invert","","",27],[10,"invert","","",25],[10,"as_mut_slice","collections::vec","",29],[10,"from_raw","image","Contructs a buffer from a generic container\n(for example a `Vec` or a slice)\nReturns None if the container is not big enough",30],[10,"into_raw","","Returns the underlying raw buffer",30],[10,"dimensions","","The width and height of this image.",30],[10,"width","","The width of this image.",30],[10,"height","","The height of this image.",30],[10,"as_slice","","The raw image data as a slice.",30],[10,"as_mut_slice","","The raw image data as a slice.",30],[10,"pixels","","Returns an iterator over the pixels of this image.",30],[10,"pixels_mut","","Returns an iterator over the mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",30],[10,"enumerate_pixels","","Enumerates over the pixels of the image.\nThe iterator yields the coordinates of each pixel\nalong with a reference to them.",30],[10,"enumerate_pixels_mut","","Enumerates over the pixels of the image.",30],[10,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",30],[10,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",30],[10,"put_pixel","","Puts a pixel at location `(x, y)`",30],[10,"into_dynamic","","Casts the buffer into a dynamically typed image buffer",30],[10,"clone","","",30],[10,"dimensions","","",30],[10,"bounds","","",30],[10,"get_pixel","","",30],[10,"get_pixel_mut","","",30],[10,"put_pixel","","",30],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",30],[10,"index","","",30],[10,"new","","Creates a new image buffer based on a `Vec<T>`.",30],[10,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",30],[10,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function.\nThe arguments to the function are the pixel's x and y coordinates.",30],[10,"from_vec","","Creates an image buffer out of an existing buffer.\nReturns None if the buffer is not big enough.",30],[10,"into_vec","","Consumes the image buffer and returns the underlying data\nas an owned buffer",30],[10,"convert","","",30],[10,"new","","Contructs a new frame iterator",31],[10,"clone","","",32],[10,"new","","Contructs a new frame",32],[10,"from_parts","","Contructs a new frame",32],[10,"delay","","Delay of this frame",32],[10,"buffer","","Returns the image buffer",32],[10,"into_buffer","","Returns the image buffer",32],[10,"left","","Returns the x offset",32],[10,"top","","Returns the x offset",32],[10,"next","","",31],[4,"ImageResult","","Result of an image decoding/encoding process"],[4,"RgbImage","","Sendable Rgb image buffer"],[4,"RgbaImage","","Sendable Rgb + alpha channel image buffer"],[4,"GreyImage","","Sendable grayscale image buffer"],[4,"GreyAlphaImage","","Sendable grayscale + alpha channel image buffer"],[6,"Primitive","","Primitive trait from old stdlib, added max_value"],[9,"max_value","","The maximum value of primitive.",33],[6,"Pixel","","A generalized pixel."],[9,"channel_count","","Returns the number of channels of this pixel type.",34],[9,"channels","","Returns the components as a slice.",34],[9,"channels_mut","","Returns the components as a mutable slice",34],[9,"color_model","","Returns a string that can help to interprete the meaning each channel\nSee [gimp babl](http://gegl.org/babl/).",34],[9,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel\nhas less than 4 channels the remainder is filled with the maximum value\nTODO deprecate",34],[9,"from_channels","","Construct a pixel from the 4 channels a, b, c and d.\nIf the pixel does not contain 4 channels the extra are ignored.\nTODO deprecate",34],[9,"from_slice","","Returns a view into a slice.",34],[9,"from_slice_mut","","Returns mutable view into a mutable slice.",34],[9,"to_rgb","","Convert this pixel to RGB",34],[9,"to_rgba","","Convert this pixel to RGB with an alpha channel",34],[9,"to_luma","","Convert this pixel to luma",34],[9,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",34],[9,"map","","Apply the function ```f``` to each channel of this pixel.",34],[9,"apply","","Apply the function ```f``` to each channel of this pixel.",34],[9,"map_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel.",34],[9,"apply_with_alpha","","Apply the function f to each channel except the alpha channel.\nApply the function g to the alpha channel. Works in-place.",34],[9,"map2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise.",34],[9,"apply2","","Apply the function ```f``` to each channel of this pixel and\n```other``` pairwise. Works in-place.",34],[9,"invert","","Invert this pixel",34],[9,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",34],[6,"ImageDecoder","","The trait that all decoders implement"],[9,"dimensions","","Returns a tuple containing the width and height of the image",35],[9,"colortype","","Returns the color type of the image e.g RGB(8) (8bit RGB)",35],[9,"row_len","","Returns the length in bytes of one decoded row of the image",35],[10,"is_animated","","Returns true if the image is animated",35],[10,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",35],[9,"read_scanline","","Reads one row from the image into buf and returns the row index",35],[9,"read_image","","Decodes the entire image and return it as a Vector",35],[10,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",35],[6,"GenericImage","","A trait for manipulating images."],[9,"dimensions","","The width and height of this image.",36],[9,"bounds","","The bounding rectangle of this image.",36],[9,"get_pixel","","Returns the pixel located at (x, y)",36],[9,"get_pixel_mut","","Puts a pixel at location (x, y)",36],[9,"put_pixel","","Put a pixel at location (x, y)",36],[9,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",36],[10,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",36],[10,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36],[10,"is_animated","","Returns true if the image is animated",35],[10,"into_frames","","Returns the frames of the image\nIf the image is not animated it returns a single frame",35],[10,"load_rect","","Decodes a specific region of the image, represented by the rectangle\nstarting from ```x``` and ```y``` and having ```length``` and ```width```",35],[10,"pixels","","Returns an Iterator over the pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with their value",36],[10,"pixels_mut","","Returns an Iterator over mutable pixels of this image.\nThe iterator yields the coordinates of each pixel\nalong with a mutable reference to them.",36],[10,"expand_palette","","Expands a color palette by re-using the existing buffer.\nAssumes 8 bit per pixel. Uses an optionally transparent index to \nadjust it's alpha value accordingly.",37]],"paths":[[2,"ColorType"],[2,"ImageError"],[2,"ImageFormat"],[2,"FilterType"],[2,"DynamicImage"],[1,"WebpDecoder"],[1,"Frame"],[1,"VP8Decoder"],[1,"PPMEncoder"],[1,"PNGDecoder"],[1,"PNGEncoder"],[1,"ZlibDecoder"],[1,"Inflater"],[1,"Adler32"],[1,"Crc32"],[1,"Component"],[1,"JPEGEncoder"],[1,"JPEGDecoder"],[1,"GIFDecoder"],[2,"ByteOrder"],[1,"TIFFDecoder"],[1,"TGADecoder"],[1,"Pixels"],[1,"MutPixels"],[1,"SubImage"],[1,"Rgb"],[1,"Luma"],[1,"Rgba"],[1,"LumaA"],[1,"Vec"],[1,"ImageBuffer"],[1,"Frames"],[1,"Frame"],[6,"Primitive"],[6,"Pixel"],[6,"ImageDecoder"],[6,"GenericImage"],[4,"GreyImage"]]};

searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[3,"zero","","Returns the additive identity, `0`."],[3,"one","","Returns the multiplicative identity, `1`."],[3,"abs","","Computes the absolute value."],[3,"abs_sub","","The positive difference of two numbers."],[3,"signum","","Returns the sign of the number."],[3,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[1,"BigUint","num::bigint","A big unsigned integer type."],[1,"BigInt","","A big signed integer type."],[2,"Sign","","A Sign is a `BigInt`'s composing element."],[12,"Minus","","",0],[12,"NoSign","","",0],[12,"Plus","","",0],[0,"BigDigit","",""],[3,"from_doublebigdigit","num::bigint::BigDigit","Split one `DoubleBigDigit` into two `BigDigit`s."],[3,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[18,"BITS","",""],[18,"BASE","",""],[4,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[4,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[18,"ZERO_BIG_DIGIT","",""],[6,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[9,"to_biguint","","Converts the value of `self` to a `BigUint`.",1],[6,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[9,"to_bigint","","Converts the value of `self` to a `BigInt`.",2],[6,"RandBigInt","",""],[9,"gen_biguint","","Generate a random `BigUint` of the given bit size.",3],[9,"gen_bigint","","Generate a random BigInt of the given bit size.",3],[9,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",3],[9,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[9,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[10,"decode","","",4],[10,"encode","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"partial_cmp","","",4],[10,"cmp","","",4],[10,"default","","",4],[10,"hash","","",4],[10,"fmt","","",4],[10,"fmt","","",4],[10,"from_str","","",4],[4,"Output","",""],[10,"bitand","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitand","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitxor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitxor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"shl","","",4],[4,"Output","",""],[4,"Output","",""],[10,"shr","","",4],[4,"Output","",""],[10,"zero","","",4],[10,"is_zero","","",4],[10,"one","","",4],[4,"Output","",""],[10,"add","","",4],[4,"Output","",""],[4,"Output","",""],[10,"add","","",4],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",4],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",4],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",4],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",4],[4,"Output","",""],[4,"Output","",""],[10,"div","","",4],[4,"Output","",""],[4,"Output","",""],[10,"div","","",4],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",4],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",4],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",4],[4,"Output","",""],[10,"checked_add","","",4],[10,"checked_sub","","",4],[10,"checked_mul","","",4],[10,"checked_div","","",4],[10,"div_rem","","",4],[10,"div_floor","","",4],[10,"mod_floor","","",4],[10,"div_mod_floor","","",4],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",4],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",4],[10,"divides","","Deprecated, use `is_multiple_of` instead.",4],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4],[10,"is_even","","Returns `true` if the number is divisible by `2`.",4],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",4],[10,"to_i64","","",4],[10,"to_u64","","",4],[10,"from_i64","","",4],[10,"from_u64","","",4],[10,"to_biguint","","",5],[10,"to_biguint","","",4],[10,"from_str_radix","","Creates and initializes a `BigUint`.",4],[10,"new","","Creates and initializes a `BigUint`.",4],[10,"from_slice","","Creates and initializes a `BigUint`.",4],[10,"parse_bytes","","Creates and initializes a `BigUint`.",4],[10,"bits","","Determines the fewest bits necessary to express the `BigUint`.",4],[10,"decode","","",0],[10,"encode","","",0],[10,"fmt","","",0],[10,"clone","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[4,"Output","",""],[10,"neg","","Negate Sign value.",0],[10,"decode","","",5],[10,"encode","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"partial_cmp","","",5],[10,"cmp","","",5],[10,"default","","",5],[10,"fmt","","",5],[10,"fmt","","",5],[10,"hash","","",5],[10,"from_str","","",5],[4,"Output","",""],[10,"shl","","",5],[4,"Output","",""],[4,"Output","",""],[10,"shr","","",5],[4,"Output","",""],[10,"zero","","",5],[10,"is_zero","","",5],[10,"one","","",5],[10,"abs","","",5],[10,"abs_sub","","",5],[10,"signum","","",5],[10,"is_positive","","",5],[10,"is_negative","","",5],[4,"Output","",""],[10,"add","","",5],[4,"Output","",""],[4,"Output","",""],[10,"add","","",5],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",5],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",5],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",5],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",5],[4,"Output","",""],[4,"Output","",""],[10,"div","","",5],[4,"Output","",""],[4,"Output","",""],[10,"div","","",5],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",5],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",5],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",5],[4,"Output","",""],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[10,"div_rem","","",5],[10,"div_floor","","",5],[10,"mod_floor","","",5],[10,"div_mod_floor","","",5],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[10,"divides","","Deprecated, use `is_multiple_of` instead.",5],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[10,"is_even","","Returns `true` if the number is divisible by `2`.",5],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[10,"to_i64","","",5],[10,"to_u64","","",5],[10,"from_i64","","",5],[10,"from_u64","","",5],[10,"to_bigint","","",5],[10,"to_bigint","","",4],[10,"from_str_radix","","Creates and initializes a BigInt.",5],[10,"new","","Creates and initializes a BigInt.",5],[10,"from_biguint","","Creates and initializes a `BigInt`.",5],[10,"from_slice","","Creates and initializes a `BigInt`.",5],[10,"parse_bytes","","Creates and initializes a `BigInt`.",5],[10,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",5],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[0,"complex","num","Complex numbers."],[1,"Complex","num::complex","A complex number in Cartesian form."],[11,"re","","Real portion of the complex number",6],[11,"im","","Imaginary portion of the complex number",6],[4,"Complex32","",""],[4,"Complex64","",""],[10,"decode","","",6],[10,"encode","","",6],[10,"hash","","",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"new","","Create a new Complex",6],[10,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6],[10,"conj","","Returns the complex conjugate. i.e. `re - i im`",6],[10,"scale","","Multiplies `self` by the scalar `t`.",6],[10,"unscale","","Divides `self` by the scalar `t`.",6],[10,"inv","","Returns `1/self`",6],[10,"norm","","Calculate |self|",6],[10,"arg","","Calculate the principal Arg of self.",6],[10,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6],[10,"from_polar","","Convert a polar representation into a complex number.",6],[4,"Output","",""],[10,"add","","",6],[4,"Output","",""],[4,"Output","",""],[10,"add","","",6],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",6],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",6],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",6],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",6],[4,"Output","",""],[4,"Output","",""],[10,"div","","",6],[4,"Output","",""],[4,"Output","",""],[10,"div","","",6],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",6],[4,"Output","",""],[10,"zero","","",6],[10,"is_zero","","",6],[10,"one","","",6],[10,"fmt","","",6],[10,"fmt","","",6],[0,"integer","num","Integer trait and functions."],[3,"div_rem","num::integer","Simultaneous integer division and modulus"],[3,"div_floor","","Floored integer division"],[3,"mod_floor","","Floored integer modulus"],[3,"div_mod_floor","","Simultaneous floored integer division and modulus"],[3,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[3,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[6,"Integer","",""],[9,"div_floor","","Floored integer division.",7],[9,"mod_floor","","Floored integer modulo, satisfying:",7],[9,"gcd","","Greatest Common Divisor (GCD).",7],[9,"lcm","","Lowest Common Multiple (LCM).",7],[9,"divides","","Deprecated, use `is_multiple_of` instead.",7],[9,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7],[9,"is_even","","Returns `true` if the number is even.",7],[9,"is_odd","","Returns `true` if the number is odd.",7],[9,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7],[10,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7],[0,"iter","num","External iterators for generic mathematics"],[1,"Range","num::iter","An iterator over the range [start, stop)"],[1,"RangeInclusive","","An iterator over the range [start, stop]"],[1,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[1,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[10,"clone","","",8],[4,"Item","",""],[10,"next","","",8],[10,"size_hint","","",8],[10,"next_back","","",8],[10,"clone","","",9],[4,"Item","",""],[10,"next","","",9],[10,"size_hint","","",9],[10,"next_back","","",9],[10,"clone","","",10],[4,"Item","",""],[10,"next","","",10],[10,"clone","","",11],[4,"Item","",""],[10,"next","","",11],[0,"traits","num","Numeric traits for generic mathematics"],[6,"Num","num::traits","The base trait for numeric types"],[6,"Zero","","Defines an additive identity element for `Self`."],[9,"zero","","Returns the additive identity element of `Self`, `0`.",12],[9,"is_zero","","Returns `true` if `self` is equal to the additive identity.",12],[6,"One","","Defines a multiplicative identity element for `Self`."],[9,"one","","Returns the multiplicative identity element of `Self`, `1`.",13],[6,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[9,"abs","","Computes the absolute value.",14],[9,"abs_sub","","The positive difference of two numbers.",14],[9,"signum","","Returns the sign of the number.",14],[9,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",14],[9,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",14],[6,"Unsigned","","A trait for values which cannot be negative"],[6,"Bounded","","Numbers which have upper and lower bounds"],[9,"min_value","","returns the smallest finite number this type can represent",15],[9,"max_value","","returns the largest finite number this type can represent",15],[6,"Saturating","","Saturating math operations"],[9,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",16],[9,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",16],[6,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[9,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",17],[6,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[9,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",18],[6,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[9,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",19],[6,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[9,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",20],[0,"rational","num","Rational numbers"],[1,"Ratio","num::rational","Represents the ratio between 2 numbers."],[4,"Rational","","Alias for a `Ratio` of machine-sized integers."],[4,"Rational32","",""],[4,"Rational64","",""],[4,"BigRational","","Alias for arbitrary precision rationals."],[10,"decode","","",21],[10,"encode","","",21],[10,"hash","","",21],[10,"clone","","",21],[10,"from_integer","","Creates a ratio representing the integer `t`.",21],[10,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",21],[10,"new","","Create a new Ratio. Fails if `denom == 0`.",21],[10,"to_integer","","Converts to an integer.",21],[10,"numer","","Gets an immutable reference to the numerator.",21],[10,"denom","","Gets an immutable reference to the denominator.",21],[10,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",21],[10,"reduced","","Returns a `reduce`d copy of self.",21],[10,"recip","","Returns the reciprocal.",21],[10,"floor","","Rounds towards minus infinity.",21],[10,"ceil","","Rounds towards plus infinity.",21],[10,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",21],[10,"trunc","","Rounds towards zero.",21],[10,"fract","","Returns the fractional part of a number.",21],[10,"from_float","","Converts a float into a rational number.",21],[10,"eq","","",21],[10,"ne","","",21],[10,"lt","","",21],[10,"gt","","",21],[10,"le","","",21],[10,"ge","","",21],[10,"partial_cmp","","",21],[10,"cmp","","",21],[4,"Output","",""],[10,"mul","","",21],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",21],[4,"Output","",""],[4,"Output","",""],[10,"div","","",21],[4,"Output","",""],[4,"Output","",""],[10,"div","","",21],[4,"Output","",""],[4,"Output","",""],[10,"add","","",21],[4,"Output","",""],[4,"Output","",""],[10,"add","","",21],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",21],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",21],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",21],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",21],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",21],[4,"Output","",""],[10,"zero","","",21],[10,"is_zero","","",21],[10,"one","","",21],[10,"abs","","",21],[10,"abs_sub","","",21],[10,"signum","","",21],[10,"is_positive","","",21],[10,"is_negative","","",21],[10,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",21],[10,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",21],[10,"from_str","","Parses `numer/denom` or just `numer`.",21],[10,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",21]],"paths":[[2,"Sign"],[6,"ToBigUint"],[6,"ToBigInt"],[6,"RandBigInt"],[1,"BigUint"],[1,"BigInt"],[1,"Complex"],[6,"Integer"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[6,"Zero"],[6,"One"],[6,"Signed"],[6,"Bounded"],[6,"Saturating"],[6,"CheckedAdd"],[6,"CheckedSub"],[6,"CheckedMul"],[6,"CheckedDiv"],[1,"Ratio"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[10,"encode","collections::dlist","",10],[10,"decode","","",10],[10,"encode","collections::ring_buf","",11],[10,"decode","","",11],[10,"encode","collections::btree::map","",12],[10,"decode","","",12],[10,"encode","collections::btree::set","",13],[10,"decode","","",13],[10,"encode","std::collections::hash::map","",14],[10,"decode","","",14],[10,"encode","std::collections::hash::set","",15],[10,"decode","","",15],[10,"encode","collections::vec_map","",16],[10,"decode","","",16],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[1,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[11,"char_set","","Character set to use",17],[11,"newline","","Newline to use",17],[11,"pad","","True to pad output with `=` characters",17],[11,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17],[2,"CharacterSet","","Available encoding character sets"],[12,"Standard","","The standard character set (uses `+` and `/`)",18],[12,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18],[2,"Newline","","Available newline types"],[12,"LF","","A linefeed (i.e. Unix-style newline)",19],[12,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19],[2,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[12,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20],[12,"InvalidBase64Length","","The input had an invalid length",20],[5,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[5,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[5,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[6,"ToBase64","","A trait for converting a value to base64 encoding."],[9,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21],[6,"FromBase64","","A trait for converting from base64 encoded values."],[9,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22],[10,"fmt","","",20],[10,"description","","",20],[10,"detail","","",20],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[2,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[12,"InvalidHexCharacter","","The input contained a character not part of the hex format",23],[12,"InvalidHexLength","","The input had an invalid length",23],[6,"ToHex","","A trait for converting a value to hexadecimal encoding"],[9,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24],[6,"FromHex","","A trait for converting hexadecimal encoded values"],[9,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25],[10,"fmt","","",23],[10,"description","","",23],[10,"detail","","",23],[0,"json","rustc-serialize","JSON parsing and serialization"],[1,"PrettyJson","rustc-serialize::json",""],[1,"AsJson","",""],[1,"AsPrettyJson","",""],[1,"Encoder","","A structure for implementing serialization to JSON."],[1,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[1,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[1,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[1,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[1,"Decoder","","A structure to decode JSON to values in rust."],[2,"Json","","Represents a json value"],[12,"I64","","",26],[12,"U64","","",26],[12,"F64","","",26],[12,"String","","",26],[12,"Boolean","","",26],[12,"Array","","",26],[12,"Object","","",26],[12,"Null","","",26],[2,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[12,"InvalidSyntax","","",27],[12,"InvalidNumber","","",27],[12,"EOFWhileParsingObject","","",27],[12,"EOFWhileParsingArray","","",27],[12,"EOFWhileParsingValue","","",27],[12,"EOFWhileParsingString","","",27],[12,"KeyMustBeAString","","",27],[12,"ExpectedColon","","",27],[12,"TrailingCharacters","","",27],[12,"TrailingComma","","",27],[12,"InvalidEscape","","",27],[12,"InvalidUnicodeCodePoint","","",27],[12,"LoneLeadingSurrogateInHexEscape","","",27],[12,"UnexpectedEndOfHexEscape","","",27],[12,"UnrecognizedHex","","",27],[12,"NotFourDigit","","",27],[12,"NotUtf8","","",27],[2,"ParserError","",""],[12,"SyntaxError","","msg, line, col",28],[12,"IoError","","",28],[2,"DecoderError","",""],[12,"ParseError","","",29],[12,"ExpectedError","","",29],[12,"MissingFieldError","","",29],[12,"UnknownVariantError","","",29],[12,"ApplicationError","","",29],[2,"JsonEvent","","The output of the streaming parser."],[12,"ObjectStart","","",30],[12,"ObjectEnd","","",30],[12,"ArrayStart","","",30],[12,"ArrayEnd","","",30],[12,"BooleanValue","","",30],[12,"I64Value","","",30],[12,"U64Value","","",30],[12,"F64Value","","",30],[12,"StringValue","","",30],[12,"NullValue","","",30],[12,"Error","","",30],[2,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[12,"Index","","",31],[12,"Key","","",31],[3,"error_str","","Returns a readable error string for a given error code."],[3,"decode","","Shortcut function to decode a JSON `&str` into an object"],[3,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[3,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[3,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[4,"Array","",""],[4,"Object","",""],[4,"BuilderError","",""],[4,"EncodeResult","",""],[4,"DecodeResult","",""],[6,"ToJson","","A trait for converting values to JSON"],[9,"to_json","","Converts the value of `self` to an instance of JSON",32],[10,"fmt","","",26],[10,"partial_cmp","","",26],[10,"lt","","",26],[10,"le","","",26],[10,"gt","","",26],[10,"ge","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"clone","","",26],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"fmt","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",28],[10,"fmt","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"fmt","","",27],[10,"description","","",29],[10,"detail","","",29],[10,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",33],[4,"Error","",""],[10,"emit_nil","","",33],[10,"emit_usize","","",33],[10,"emit_u64","","",33],[10,"emit_u32","","",33],[10,"emit_u16","","",33],[10,"emit_u8","","",33],[10,"emit_isize","","",33],[10,"emit_i64","","",33],[10,"emit_i32","","",33],[10,"emit_i16","","",33],[10,"emit_i8","","",33],[10,"emit_bool","","",33],[10,"emit_f64","","",33],[10,"emit_f32","","",33],[10,"emit_char","","",33],[10,"emit_str","","",33],[10,"emit_enum","","",33],[10,"emit_enum_variant","","",33],[10,"emit_enum_variant_arg","","",33],[10,"emit_enum_struct_variant","","",33],[10,"emit_enum_struct_variant_field","","",33],[10,"emit_struct","","",33],[10,"emit_struct_field","","",33],[10,"emit_tuple","","",33],[10,"emit_tuple_arg","","",33],[10,"emit_tuple_struct","","",33],[10,"emit_tuple_struct_arg","","",33],[10,"emit_option","","",33],[10,"emit_option_none","","",33],[10,"emit_option_some","","",33],[10,"emit_seq","","",33],[10,"emit_seq_elt","","",33],[10,"emit_map","","",33],[10,"emit_map_elt_key","","",33],[10,"emit_map_elt_val","","",33],[10,"new","","Creates a new encoder whose output will be written to the specified writer",34],[10,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34],[4,"Error","",""],[10,"emit_nil","","",34],[10,"emit_usize","","",34],[10,"emit_u64","","",34],[10,"emit_u32","","",34],[10,"emit_u16","","",34],[10,"emit_u8","","",34],[10,"emit_isize","","",34],[10,"emit_i64","","",34],[10,"emit_i32","","",34],[10,"emit_i16","","",34],[10,"emit_i8","","",34],[10,"emit_bool","","",34],[10,"emit_f64","","",34],[10,"emit_f32","","",34],[10,"emit_char","","",34],[10,"emit_str","","",34],[10,"emit_enum","","",34],[10,"emit_enum_variant","","",34],[10,"emit_enum_variant_arg","","",34],[10,"emit_enum_struct_variant","","",34],[10,"emit_enum_struct_variant_field","","",34],[10,"emit_struct","","",34],[10,"emit_struct_field","","",34],[10,"emit_tuple","","",34],[10,"emit_tuple_arg","","",34],[10,"emit_tuple_struct","","",34],[10,"emit_tuple_struct_arg","","",34],[10,"emit_option","","",34],[10,"emit_option_none","","",34],[10,"emit_option_some","","",34],[10,"emit_seq","","",34],[10,"emit_seq_elt","","",34],[10,"emit_map","","",34],[10,"emit_map_elt_key","","",34],[10,"emit_map_elt_val","","",34],[10,"encode","","",26],[10,"from_reader","","Decodes a json value from an `&mut io::Reader`",26],[10,"from_str","","Decodes a json value from a string",26],[10,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Show`.",26],[10,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26],[10,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26],[10,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26],[10,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26],[10,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26],[10,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26],[10,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26],[10,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26],[10,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26],[10,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26],[10,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26],[10,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26],[10,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26],[10,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26],[10,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26],[10,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26],[10,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26],[10,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26],[10,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26],[10,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26],[4,"Output","",""],[10,"index","","",26],[4,"Output","",""],[10,"index","","",26],[10,"fmt","","",30],[10,"clone","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"fmt","","",31],[10,"clone","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"new","","",35],[10,"len","","Returns The number of elements in the Stack.",35],[10,"is_empty","","Returns true if the stack is empty.",35],[10,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35],[10,"is_equal_to","","Compares this stack with an array of StackElements.",35],[10,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35],[10,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35],[10,"top","","Returns the top-most element (if any).",35],[4,"Item","",""],[10,"next","","",36],[10,"new","","Creates the JSON parser.",36],[10,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36],[10,"new","","Create a JSON Builder.",37],[10,"build","","",37],[10,"new","","Creates a new decoder instance for decoding the specified JSON value.",38],[4,"Error","",""],[10,"read_nil","","",38],[10,"read_usize","","",38],[10,"read_u8","","",38],[10,"read_u16","","",38],[10,"read_u32","","",38],[10,"read_u64","","",38],[10,"read_isize","","",38],[10,"read_i8","","",38],[10,"read_i16","","",38],[10,"read_i32","","",38],[10,"read_i64","","",38],[10,"read_f32","","",38],[10,"read_f64","","",38],[10,"read_bool","","",38],[10,"read_char","","",38],[10,"read_str","","",38],[10,"read_enum","","",38],[10,"read_enum_variant","","",38],[10,"read_enum_variant_arg","","",38],[10,"read_enum_struct_variant","","",38],[10,"read_enum_struct_variant_field","","",38],[10,"read_struct","","",38],[10,"read_struct_field","","",38],[10,"read_tuple","","",38],[10,"read_tuple_arg","","",38],[10,"read_tuple_struct","","",38],[10,"read_tuple_struct_arg","","",38],[10,"read_option","","",38],[10,"read_seq","","",38],[10,"read_seq_elt","","",38],[10,"read_map","","",38],[10,"read_map_elt_key","","",38],[10,"read_map_elt_val","","",38],[10,"error","","",38],[10,"to_json","","",26],[10,"to_json","collections::string","",0],[10,"to_json","collections::vec","",3],[10,"to_json","collections::btree::map","",12],[10,"to_json","std::collections::hash::map","",14],[10,"to_json","core::option","",4],[10,"fmt","rustc-serialize::json","Encodes a json value into a string",26],[10,"fmt","","Encodes a json value into a string",39],[10,"fmt","","Encodes a json value into a string",40],[10,"indent","","Set the indentation level for the emitted JSON",41],[10,"fmt","","Encodes a json value into a string",41],[10,"from_str","","",26],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[6,"Decoder","rustc-serialize",""],[17,"Error","rustc-serialize::Decoder",""],[9,"read_nil","rustc-serialize","",42],[9,"read_usize","","",42],[9,"read_u64","","",42],[9,"read_u32","","",42],[9,"read_u16","","",42],[9,"read_u8","","",42],[9,"read_isize","","",42],[9,"read_i64","","",42],[9,"read_i32","","",42],[9,"read_i16","","",42],[9,"read_i8","","",42],[9,"read_bool","","",42],[9,"read_f64","","",42],[9,"read_f32","","",42],[9,"read_char","","",42],[9,"read_str","","",42],[9,"read_enum","","",42],[9,"read_enum_variant","","",42],[9,"read_enum_variant_arg","","",42],[9,"read_enum_struct_variant","","",42],[9,"read_enum_struct_variant_field","","",42],[9,"read_struct","","",42],[9,"read_struct_field","","",42],[9,"read_tuple","","",42],[9,"read_tuple_arg","","",42],[9,"read_tuple_struct","","",42],[9,"read_tuple_struct_arg","","",42],[9,"read_option","","",42],[9,"read_seq","","",42],[9,"read_seq_elt","","",42],[9,"read_map","","",42],[9,"read_map_elt_key","","",42],[9,"read_map_elt_val","","",42],[9,"error","","",42],[6,"Encoder","",""],[17,"Error","rustc-serialize::Encoder",""],[9,"emit_nil","rustc-serialize","",43],[9,"emit_usize","","",43],[9,"emit_u64","","",43],[9,"emit_u32","","",43],[9,"emit_u16","","",43],[9,"emit_u8","","",43],[9,"emit_isize","","",43],[9,"emit_i64","","",43],[9,"emit_i32","","",43],[9,"emit_i16","","",43],[9,"emit_i8","","",43],[9,"emit_bool","","",43],[9,"emit_f64","","",43],[9,"emit_f32","","",43],[9,"emit_char","","",43],[9,"emit_str","","",43],[9,"emit_enum","","",43],[9,"emit_enum_variant","","",43],[9,"emit_enum_variant_arg","","",43],[9,"emit_enum_struct_variant","","",43],[9,"emit_enum_struct_variant_field","","",43],[9,"emit_struct","","",43],[9,"emit_struct_field","","",43],[9,"emit_tuple","","",43],[9,"emit_tuple_arg","","",43],[9,"emit_tuple_struct","","",43],[9,"emit_tuple_struct_arg","","",43],[9,"emit_option","","",43],[9,"emit_option_none","","",43],[9,"emit_option_some","","",43],[9,"emit_seq","","",43],[9,"emit_seq_elt","","",43],[9,"emit_map","","",43],[9,"emit_map_elt_key","","",43],[9,"emit_map_elt_val","","",43],[6,"Decodable","",""],[9,"decode","","",44],[6,"Encodable","",""],[9,"encode","","",45],[6,"DecoderHelpers","",""],[9,"read_to_vec","","",46],[6,"EncoderHelpers","",""],[9,"emit_from_vec","","",47]],"paths":[[1,"String"],[1,"Box"],[1,"Rc"],[1,"Vec"],[2,"Option"],[1,"Path"],[1,"Path"],[1,"Cell"],[1,"RefCell"],[1,"Arc"],[1,"DList"],[1,"RingBuf"],[1,"BTreeMap"],[1,"BTreeSet"],[1,"HashMap"],[1,"HashSet"],[1,"VecMap"],[1,"Config"],[2,"CharacterSet"],[2,"Newline"],[2,"FromBase64Error"],[6,"ToBase64"],[6,"FromBase64"],[2,"FromHexError"],[6,"ToHex"],[6,"FromHex"],[2,"Json"],[2,"ErrorCode"],[2,"ParserError"],[2,"DecoderError"],[2,"JsonEvent"],[2,"StackElement"],[6,"ToJson"],[1,"Encoder"],[1,"PrettyEncoder"],[1,"Stack"],[1,"Parser"],[1,"Builder"],[1,"Decoder"],[1,"PrettyJson"],[1,"AsJson"],[1,"AsPrettyJson"],[6,"Decoder"],[6,"Encoder"],[6,"Decodable"],[6,"Encodable"],[6,"DecoderHelpers"],[6,"EncoderHelpers"]]};

searchIndex['gl_generator'] = {"items":[[0,"","gl_generator","# gl_generator"],[3,"generate_bindings","","Public function that generates Rust source code."],[0,"generators","",""],[3,"gen_type_aliases","gl_generator::generators","Generates all the type aliases for a namespace."],[3,"gen_parameters","","Generates the list of Rust `Arg`s that a `Cmd` requires."],[3,"gen_return_type","","Generates the Rust return type of a `Cmd`."],[3,"gen_symbol_name","","Generates the native symbol name of a `Cmd`."],[0,"global_gen","",""],[1,"GlobalGenerator","gl_generator::generators::global_gen",""],[10,"write","","",0],[0,"static_gen","gl_generator::generators",""],[1,"StaticGenerator","gl_generator::generators::static_gen",""],[10,"write","","",1],[0,"struct_gen","gl_generator::generators",""],[1,"StructGenerator","gl_generator::generators::struct_gen",""],[10,"write","","",2],[0,"static_struct_gen","gl_generator::generators",""],[1,"StaticStructGenerator","gl_generator::generators::static_struct_gen",""],[10,"write","","",3],[6,"Generator","gl_generator::generators","Trait for a bindings generator."],[9,"write","","Builds the GL bindings.",4],[0,"registry","gl_generator",""],[1,"Registry","gl_generator::registry",""],[11,"groups","","",5],[11,"enums","","",5],[11,"cmds","","",5],[11,"features","","",5],[11,"extensions","","",5],[11,"aliases","","",5],[1,"EnumIterator","",""],[1,"CmdIterator","",""],[1,"Group","",""],[11,"name","","",6],[11,"enums","","",6],[1,"EnumNs","",""],[11,"namespace","","",7],[11,"group","","",7],[11,"ty","","",7],[11,"start","","",7],[11,"end","","",7],[11,"vendor","","",7],[11,"comment","","",7],[11,"defs","","",7],[1,"Enum","",""],[11,"ident","","",8],[11,"value","","",8],[11,"alias","","",8],[11,"ty","","",8],[1,"CmdNs","",""],[11,"namespace","","",9],[11,"defs","","",9],[1,"Binding","",""],[11,"ident","","",10],[11,"ty","","",10],[11,"group","","",10],[1,"Cmd","",""],[11,"proto","","",11],[11,"params","","",11],[11,"is_safe","","True if this command doesn't take any pointers.",11],[11,"alias","","",11],[11,"vecequiv","","",11],[11,"glx","","",11],[1,"Feature","",""],[11,"api","","",12],[11,"name","","",12],[11,"number","","",12],[11,"requires","","",12],[11,"removes","","",12],[1,"Require","",""],[11,"comment","","",13],[11,"enums","","A reference to the earlier types, by name",13],[11,"commands","","A reference to the earlier types, by name",13],[1,"Remove","",""],[11,"profile","","",14],[11,"comment","","",14],[11,"enums","","A reference to the earlier types, by name",14],[11,"commands","","A reference to the earlier types, by name",14],[1,"Extension","",""],[11,"name","","",15],[11,"supported","","which apis this extension is defined for (see Feature.api)",15],[11,"requires","","",15],[1,"GlxOpcode","",""],[11,"ty","","",16],[11,"opcode","","",16],[11,"name","","",16],[11,"comment","","",16],[1,"Filter","",""],[11,"extensions","","",17],[11,"profile","","",17],[11,"version","","",17],[11,"api","","",17],[2,"Ns","",""],[12,"Gl","","",18],[12,"Glx","","",18],[12,"Wgl","","",18],[12,"Egl","","",18],[12,"Gles1","","",18],[12,"Gles2","","",18],[10,"fmt_struct_name","","",18],[10,"from_str","","",18],[10,"fmt","","",18],[10,"from_xml","","Generate a registry from the supplied XML string",5],[10,"get_tys","","Returns a set of all the types used in the supplied registry. This is useful\nfor working out what conversions are needed for the specific registry.",5],[10,"enum_iter","","",5],[10,"cmd_iter","","",5],[4,"Item","",""],[10,"next","","",19],[4,"Item","",""],[10,"next","","",20],[10,"clone","","",12],[10,"clone","","",13],[10,"clone","","",14],[10,"clone","","",15]],"paths":[[1,"GlobalGenerator"],[1,"StaticGenerator"],[1,"StructGenerator"],[1,"StaticStructGenerator"],[6,"Generator"],[1,"Registry"],[1,"Group"],[1,"EnumNs"],[1,"Enum"],[1,"CmdNs"],[1,"Binding"],[1,"Cmd"],[1,"Feature"],[1,"Require"],[1,"Remove"],[1,"Extension"],[1,"GlxOpcode"],[1,"Filter"],[2,"Ns"],[1,"EnumIterator"],[1,"CmdIterator"]]};

searchIndex['xml'] = {"items":[[0,"","xml","This crate currently provides almost XML 1.0/1.1-compliant pull parser."],[0,"macros","","Contains several macros used in this crate."],[0,"name","",""],[1,"Name","xml::name","Represents a qualified XML name."],[11,"local_name","","A local name, e.g. `string` in `xsi:string`.",0],[11,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",0],[11,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",0],[1,"OwnedName","","An owned variant of `Name`."],[11,"local_name","","A local name, e.g. `string` in `xsi:string`.",1],[11,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",1],[11,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",1],[10,"hash","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"fmt","","",0],[10,"fmt","","",0],[10,"to_owned","","Returns an owned variant of the qualified name.",0],[10,"local","","Returns a new `Name` instance representing plain local name.",0],[10,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",0],[10,"to_repr","","Returns correct XML representation of this local name and prefix.",0],[10,"hash","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"fmt","","",1],[10,"fmt","","",1],[10,"borrow","","Constructs a borrowed `Name` based on this owned name.",1],[10,"local","","Returns a new `OwnedName` instance representing a plain local name.",1],[10,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",1],[10,"prefix_as_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",1],[10,"namespace_as_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",1],[10,"to_repr","","See `Name::to_repr()` for details.",1],[10,"from_str","","Parses the given string slice into a qualified name.",1],[0,"attribute","xml",""],[1,"Attribute","xml::attribute","A borrowed version of an XML attribute."],[11,"name","","Attribute name.",2],[11,"value","","Attribute value.",2],[1,"OwnedAttribute","",""],[11,"name","","",3],[11,"value","","",3],[10,"hash","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"fmt","","",2],[10,"to_owned","","",2],[10,"new","","",2],[10,"hash","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"clone","","",3],[10,"borrow","","",3],[10,"new","","",3],[10,"fmt","","",3],[0,"common","xml","Contains several types used throughout the library."],[1,"Error","xml::common","XML parsing error."],[2,"XmlVersion","","XML version enumeration."],[12,"Version10","","XML version 1.0.",4],[12,"Version11","","XML version 1.1.",4],[3,"is_whitespace_char","","Checks whether the given character is a white space character (`S`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[3,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[3,"is_name_char","","Checks whether the given character is a name character (`NameChar`)\nas is defined by XML 1.1 specification, [section 2.3][1]."],[6,"HasPosition","","Represents a thing which has a position inside some textual document."],[9,"row","","Returns a line number inside the document.",5],[9,"col","","Returns a column number inside the document.",5],[10,"eq","","",6],[10,"ne","","",6],[10,"clone","","",6],[10,"fmt","","",6],[10,"row","","",6],[10,"col","","",6],[10,"new","","Creates a new error using position information from the provided\n`HasPosition` object and a message.",6],[10,"new_full","","Creates a new error using provided position information and a message.",6],[10,"msg","","Returns a reference to a message which is contained inside this error.",6],[10,"description","","",6],[10,"detail","","",6],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"fmt","","",4],[0,"escape","xml",""],[3,"escape_str","xml::escape","Performs escaping of common XML characters."],[0,"namespace","xml",""],[1,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs."],[1,"NamespaceMappings","","An iterator over mappings from prefixes to URIs in a namespace."],[1,"NamespaceStack","","Namespace stack is a sequence of namespaces."],[1,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack."],[4,"UriMapping","",""],[18,"NS_XMLNS_PREFIX","",""],[18,"NS_XMLNS_URI","",""],[18,"NS_XML_PREFIX","",""],[18,"NS_XML_URI","",""],[18,"NS_EMPTY_URI","",""],[6,"NamespaceIterable","","Denotes something which contains namespace URI mappings."],[17,"Iter","xml::namespace::NamespaceIterable",""],[9,"uri_mappings","xml::namespace","",7],[10,"clone","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"empty","","Returns an empty namespace.",8],[10,"is_empty","","Checks whether this namespace is empty.",8],[10,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but the default mappings.",8],[10,"put","","Puts a mapping into this namespace.",8],[10,"force_put","","Puts a mapping into this namespace forcefully.",8],[10,"get","","Queries the namespace for the given prefix.",8],[4,"Item","",""],[10,"next","","",9],[4,"Iter","",""],[10,"uri_mappings","","",8],[10,"eq","","",10],[10,"ne","","",10],[10,"clone","","",10],[10,"empty","","Returns an empty namespace stack.",10],[10,"default","","Returns a namespace stack with default items in it.",10],[10,"push_empty","","Adds an empty namespace to the top of this stack.",10],[10,"pop","","Removes a namespace at the top of the stack.",10],[10,"peek","","Returns a namespace at the top of the stack, leaving the stack intact.",10],[10,"put","","Puts a mapping into the topmost namespace in this stack.",10],[10,"get","","Performs a search for the given prefix in the whole stack.",10],[10,"squash","","Combines this stack of namespaces into a single namespace.",10],[4,"Item","",""],[10,"next","","",11],[4,"Iter","",""],[10,"uri_mappings","","",10],[0,"reader","xml","Contains high-level interface for a pull-based XML parser."],[1,"EventReader","xml::reader","Simple wrapper around an `std::io::Buffer` which provides pull-based XML parsing."],[1,"Events","","XML events iterator, created by `events()` method on `Parser`."],[0,"config","","Contains parser configuration structure."],[1,"ParserConfig","xml::reader::config","Parser configuration structure."],[11,"trim_whitespace","","Whether or not should whitespace be removed. Default is false.",12],[11,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",12],[11,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",12],[11,"ignore_comments","","Whether or not should comments be omitted. Default is true.",12],[11,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",12],[10,"new","","Returns a new config with default values.",12],[10,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",12],[10,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",12],[10,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",12],[10,"ignore_comments","","Sets the field to the provided value and returns updated config object.",12],[10,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",12],[0,"events","xml::reader","Contains `XmlEvent` datatype, instances of which are emitted by the parser."],[2,"XmlEvent","xml::reader::events","An element of an XML input stream."],[12,"StartDocument","","Corresponds to XML document declaration.",13],[11,"version","xml::reader::events::XmlEvent","XML version.",13],[11,"encoding","","XML document encoding.",13],[11,"standalone","","XML standalone declaration.",13],[12,"EndDocument","xml::reader::events","Denotes to the end of the document stream.",13],[12,"ProcessingInstruction","","Denotes an XML processing instruction.",13],[11,"name","xml::reader::events::XmlEvent","Processing instruction target.",13],[11,"data","","Processing instruction content.",13],[12,"StartElement","xml::reader::events","Denotes a beginning of an XML element.",13],[11,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[11,"attributes","","A list of attributes associated with the element.",13],[11,"namespace","","Contents of the namespace mapping at this point of the document.",13],[12,"EndElement","xml::reader::events","Denotes an end of an XML document.",13],[11,"name","xml::reader::events::XmlEvent","Qualified name of the element.",13],[12,"CData","xml::reader::events","Denotes CDATA content.",13],[12,"Comment","","Denotes a comment.",13],[12,"Characters","","Denotes character data outside of tags.",13],[12,"Whitespace","","Denotes a chunk of whitespace outside of tags.",13],[12,"Error","","Denotes parsing error.",13],[10,"clone","","",13],[10,"eq","","",13],[10,"ne","","",13],[10,"fmt","","",13],[10,"as_writer_event","","",13],[10,"new","xml::reader","Creates a new parser, consuming given `Buffer`.",14],[10,"new_with_config","","Creates a new parser with the provded configuration, consuming given `Buffer`.",14],[10,"next","","Pulls and returns next XML event from the stream.",14],[10,"events","","Returns an iterator over XML events.",14],[4,"Item","",""],[10,"next","","",15],[10,"new_from_string","","Convenience method to create a reader from an owned string.",14],[10,"new_from_bytes","","Convenience method to create a reader from an owned vector of bytes.",14],[10,"new_from_str_slice","","Convenience method to create a reader from a string slice.",14],[10,"new_from_bytes_slice","","Convenience method to create a reader from a slice of bytes.",14],[0,"writer","xml",""],[1,"EventWriter","xml::writer",""],[0,"config","","Contains emitter configuration structure."],[1,"EmitterConfig","xml::writer::config","Emitter configuration structure."],[11,"line_separator","","Line separator used to separate lines in formatted output. Default is `\"\\n\"`.",16],[11,"indent_string","","A string which will be used for a single level of indentation. Default is `\"  \"`\n(two spaces).",16],[11,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",16],[11,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",16],[11,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",16],[11,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",16],[10,"new","","Creates an emitter configuration with default values.",16],[10,"line_separator","","Sets the field to the provided value and returns updated config object.",16],[10,"indent_string","","Sets the field to the provided value and returns updated config object.",16],[10,"perform_indent","","Sets the field to the provided value and returns updated config object.",16],[10,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",16],[10,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",16],[10,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",16],[0,"events","xml::writer",""],[2,"XmlEvent","xml::writer::events","An element of an XML output stream."],[12,"StartDocument","","Corresponds to XML document declaration.",17],[11,"version","xml::writer::events::XmlEvent","XML version.",17],[11,"encoding","","XML document encoding.",17],[11,"standalone","","XML standalone declaration.",17],[12,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",17],[11,"name","xml::writer::events::XmlEvent","Processing instruction target.",17],[11,"data","","Processing instruction content.",17],[12,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",17],[11,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[11,"attributes","","A list of attributes associated with the element.",17],[11,"namespace","","Contents of the namespace mapping at this point of the document.",17],[12,"EndElement","xml::writer::events","Denotes an end of an XML document.",17],[11,"name","xml::writer::events::XmlEvent","Qualified name of the element.",17],[12,"CData","xml::writer::events","Denotes CDATA content.",17],[12,"Comment","","Denotes a comment.",17],[12,"Characters","","Denotes character data outside of tags.",17],[4,"EventWriterResult","xml::writer",""],[10,"new","","",18],[10,"new_with_config","","",18],[10,"write","","",18],[10,"new_into_mem","","",18],[10,"new_into_mem_config","","",18],[0,"util","xml",""],[1,"ClonedPairwise","xml::util",""],[6,"OptionBorrowExt","",""],[9,"borrow_internals","","",19],[6,"IntoOwned","",""],[9,"into_owned","","",20],[6,"IteratorClonedPairwiseExt","",""],[9,"cloned_pairwise","","",21],[10,"borrow_internals","core::option","",22],[4,"Item","xml::util",""],[10,"next","","",23]],"paths":[[1,"Name"],[1,"OwnedName"],[1,"Attribute"],[1,"OwnedAttribute"],[2,"XmlVersion"],[6,"HasPosition"],[1,"Error"],[6,"NamespaceIterable"],[1,"Namespace"],[1,"NamespaceMappings"],[1,"NamespaceStack"],[1,"NamespaceStackMappings"],[1,"ParserConfig"],[2,"XmlEvent"],[1,"EventReader"],[1,"Events"],[1,"EmitterConfig"],[2,"XmlEvent"],[1,"EventWriter"],[6,"OptionBorrowExt"],[6,"IntoOwned"],[6,"IteratorClonedPairwiseExt"],[2,"Option"],[1,"ClonedPairwise"]]};

searchIndex['log'] = {"items":[[0,"","log","Utilities for program-wide and customizable logging"],[1,"LogLevel","","Wraps the log level with fmt implementations."],[1,"LogRecord","","A LogRecord is created by the logging macros, and passed as the only\nargument to Loggers."],[11,"module_path","","The module path of where the LogRecord originated.",0],[11,"level","","The LogLevel of this record.",0],[11,"args","","The arguments from the log line.",0],[11,"file","","The file of where the LogRecord originated.",0],[11,"line","","The line number of where the LogRecord originated.",0],[3,"set_logger","","Replaces the task-local logger with the specified logger, returning the old\nlogger."],[0,"macros","","Logging macros"],[18,"MAX_LOG_LEVEL","","Maximum logging level of a module that can be specified. Common logging\nlevels are found in the DEBUG/INFO/WARN/ERROR constants."],[18,"DEBUG","","Debug log level"],[18,"INFO","","Info log level"],[18,"WARN","","Warn log level"],[18,"ERROR","","Error log level"],[6,"Logger","","A trait used to represent an interface to a task-local logger. Each task\ncan have its own custom logger which can respond to logging messages\nhowever it likes."],[9,"log","","Logs a single message described by the `record`.",1],[10,"fmt","","",2],[10,"partial_cmp","","",2],[10,"lt","","",2],[10,"le","","",2],[10,"gt","","",2],[10,"ge","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",0],[15,"log!","","The standard logging macro"],[15,"error!","","A convenience macro for logging at the error log level."],[15,"warn!","","A convenience macro for logging at the warning log level."],[15,"info!","","A convenience macro for logging at the info log level."],[15,"debug!","","A convenience macro for logging at the debug log level. This macro can also\nbe omitted at compile time by passing `--cfg ndebug` to the compiler. If\nthis option is not passed, then debug statements will be compiled."],[15,"log_enabled!","","A macro to test whether a log level is enabled for the current module."]],"paths":[[1,"LogRecord"],[6,"Logger"],[1,"LogLevel"]]};

searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down."],[1,"Error","","Error corresponds to something that can go wrong while parsing\na regular expression."],[11,"pos","","The *approximate* character index of where the error occurred.",0],[11,"msg","","A message describing the error.",0],[1,"Captures","","Captures represents a group of captured strings for a single match."],[1,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression."],[1,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression."],[1,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression."],[1,"FindMatches","","An iterator over all non-overlapping matches for a particular string."],[1,"NoExpand","","NoExpand indicates literal string replacement."],[1,"RegexSplits","","Yields all substrings delimited by a regular expression match."],[1,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match."],[2,"Regex","","A compiled regular expression"],[3,"quote","","Escapes all regular expression meta characters in `text`."],[3,"is_match","","Tests if the given regular expression matches somewhere in the text given."],[10,"fmt","","",0],[10,"fmt","","",0],[10,"clone","","",1],[10,"fmt","","Shows the original regular expression.",1],[10,"fmt","","Shows the original regular expression.",1],[10,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1],[10,"is_match","","Returns true if and only if the regex matches the string given.",1],[10,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1],[10,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1],[10,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1],[10,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1],[10,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1],[10,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1],[10,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1],[10,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1],[10,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1],[10,"as_str","","Returns the original string of this regex.",1],[10,"reg_replace","","",2],[10,"next","","",3],[10,"next","","",4],[10,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5],[10,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5],[10,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5],[10,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5],[10,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5],[10,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5],[10,"len","","Returns the number of captured groups.",5],[10,"is_empty","","Returns if there are no captured groups.",5],[10,"next","","",6],[10,"next","","",7],[10,"next","","",8],[10,"next","","",9],[6,"Replacer","","Replacer describes types that can be used to replace matches in a string."],[9,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",10]],"paths":[[1,"Error"],[2,"Regex"],[1,"NoExpand"],[1,"RegexSplits"],[1,"RegexSplitsN"],[1,"Captures"],[1,"SubCaptures"],[1,"SubCapturesPos"],[1,"FindCaptures"],[1,"FindMatches"],[6,"Replacer"]]};

searchIndex['compile_msg'] = {"items":[[0,"","compile_msg",""],[3,"plugin_registrar","",""]],"paths":[]};

searchIndex['khronos_api'] = {"items":[[0,"","khronos_api","This crates contains the sources of the official OpenGL repository."],[5,"GL_XML","","Content of the official `gl.xml` file."],[5,"EGL_XML","","Content of the official `egl.xml` file."],[5,"WGL_XML","","Content of the official `wgl.xml` file."],[5,"GLX_XML","","Content of the official `glx.xml` file."]],"paths":[]};

searchIndex['gl_common'] = {"items":[[0,"","gl_common","Defines everything used by `gl_generator`."],[6,"GlFunctionsSource","",""],[9,"get_proc_addr","","",0]],"paths":[[6,"GlFunctionsSource"]]};

initSearch(searchIndex);
